{"C:\\Users\\David\\Desktop\\project_team175\\src\\controller\\IInsightFacade.ts":{"path":"C:\\Users\\David\\Desktop\\project_team175\\src\\controller\\IInsightFacade.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":113}},"2":{"start":{"line":5,"column":0},"end":{"line":8,"column":89}},"3":{"start":{"line":6,"column":4},"end":{"line":6,"column":48}},"4":{"start":{"line":7,"column":4},"end":{"line":7,"column":42}},"5":{"start":{"line":11,"column":8},"end":{"line":11,"column":23}},"6":{"start":{"line":12,"column":8},"end":{"line":12,"column":52}},"7":{"start":{"line":15,"column":0},"end":{"line":15,"column":36}},"8":{"start":{"line":18,"column":8},"end":{"line":18,"column":23}},"9":{"start":{"line":19,"column":8},"end":{"line":19,"column":53}},"10":{"start":{"line":22,"column":0},"end":{"line":22,"column":38}},"11":{"start":{"line":25,"column":8},"end":{"line":25,"column":23}},"12":{"start":{"line":26,"column":8},"end":{"line":26,"column":59}},"13":{"start":{"line":29,"column":0},"end":{"line":29,"column":50}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":1},"end":{"line":5,"column":2}},"loc":{"start":{"line":5,"column":31},"end":{"line":8,"column":1}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":4},"end":{"line":10,"column":5}},"loc":{"start":{"line":10,"column":25},"end":{"line":13,"column":5}},"line":10},"2":{"name":"(anonymous_2)","decl":{"start":{"line":17,"column":4},"end":{"line":17,"column":5}},"loc":{"start":{"line":17,"column":25},"end":{"line":20,"column":5}},"line":17},"3":{"name":"(anonymous_3)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":25},"end":{"line":27,"column":5}},"line":24}},"branchMap":{"0":{"loc":{"start":{"line":8,"column":24},"end":{"line":8,"column":87}},"type":"binary-expr","locations":[{"start":{"line":8,"column":24},"end":{"line":8,"column":50}},{"start":{"line":8,"column":55},"end":{"line":8,"column":86}}],"line":8}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":21,"6":21,"7":1,"8":1,"9":1,"10":1,"11":0,"12":0,"13":1},"f":{"0":1,"1":21,"2":1,"3":0},"b":{"0":[1,1]},"inputSourceMap":{"version":3,"file":"C:/Users/David/Desktop/project_team175/src/controller/IInsightFacade.ts","sources":["C:/Users/David/Desktop/project_team175/src/controller/IInsightFacade.ts"],"names":[],"mappings":";;;AAQA,IAAY,kBAGX;AAHD,WAAY,kBAAkB;IAC7B,2CAAqB,CAAA;IACrB,qCAAe,CAAA;AAChB,CAAC,EAHW,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAG7B;AAYD,MAAa,YAAa,SAAQ,KAAK;IACtC,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;IAC7C,CAAC;CACD;AALD,oCAKC;AAED,MAAa,aAAc,SAAQ,KAAK;IACvC,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;IAC9C,CAAC;CACD;AALD,sCAKC;AAED,MAAa,mBAAoB,SAAQ,KAAK;IAC7C,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC;IACpD,CAAC;CACD;AALD,kDAKC","sourcesContent":["/*\n * This is the primary high-level API for the project. In this folder there should be:\n * A class called InsightFacade, this should be in a file called InsightFacade.ts.\n * You should not change this interface at all or the test suite will not work.\n */\n\nimport JSZip from \"jszip\";\n\nexport enum InsightDatasetKind {\n\tSections = \"sections\",\n\tRooms = \"rooms\",\n}\n\nexport interface InsightDataset {\n\tid: string;\n\tkind: InsightDatasetKind;\n\tnumRows: number;\n}\n\nexport interface InsightResult {\n\t[key: string]: string | number;\n}\n\nexport class InsightError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, InsightError);\n\t}\n}\n\nexport class NotFoundError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, NotFoundError);\n\t}\n}\n\nexport class ResultTooLargeError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, ResultTooLargeError);\n\t}\n}\n\nexport interface IInsightFacade {\n\t/**\n\t * Add a dataset to insightUBC.\n\t *\n\t * @param id  The id of the dataset being added. Follows the format /^[^_]+$/\n\t * @param content  The base64 content of the dataset. This content should be in the form of a serialized zip file.\n\t * @param kind  The kind of the dataset\n\t *\n\t * @return Promise <string[]>\n\t *\n\t * The promise should fulfill on a successful add, reject for any failures.\n\t * The promise should fulfill with a string array,\n\t * containing the ids of all currently added datasets upon a successful add.\n\t * The promise should reject with an InsightError describing the error.\n\t *\n\t * An id is invalid if it contains an underscore, or is only whitespace characters.\n\t * If id is the same as the id of an already added dataset, the dataset should be rejected and not saved.\n\t *\n\t * After receiving the dataset, it should be processed into a data structure of\n\t * your design. The processed data structure should be persisted to disk; your\n\t * system should be able to load this persisted value into memory for answering\n\t * queries.\n\t *\n\t * Ultimately, a dataset must be added or loaded from disk before queries can\n\t * be successfully answered.\n\t */\n\taddDataset(id: string, content: string, kind: InsightDatasetKind): Promise<string[]>;\n\n\t/**\n\t * Remove a dataset from insightUBC.\n\t *\n\t * @param id  The id of the dataset to remove. Follows the format /^[^_]+$/\n\t *\n\t * @return Promise <string>\n\t *\n\t * The promise should fulfill upon a successful removal, reject on any error.\n\t * Attempting to remove a dataset that hasn't been added yet counts as an error.\n\t *\n\t * An id is invalid if it contains an underscore, or is only whitespace characters.\n\t *\n\t * The promise should fulfill the id of the dataset that was removed.\n\t * The promise should reject with a NotFoundError (if a valid id was not yet added)\n\t * or an InsightError (invalid id or any other source of failure) describing the error.\n\t *\n\t * This will delete both disk and memory caches for the dataset for the id meaning\n\t * that subsequent queries for that id should fail unless a new addDataset happens first.\n\t */\n\tremoveDataset(id: string): Promise<string>;\n\n\t/**\n\t * Perform a query on insightUBC.\n\t *\n\t * @param query  The query to be performed.\n\t *\n\t * If a query is incorrectly formatted, references a dataset not added (in memory or on disk),\n\t * or references multiple datasets, it should be rejected.\n\t *\n\t * @return Promise <InsightResult[]>\n\t *\n\t * The promise should fulfill with an array of results.\n\t * The promise should reject with a ResultTooLargeError (if the query returns too many results)\n\t * or an InsightError (for any other source of failure) describing the error.\n\t */\n\tperformQuery(query: unknown): Promise<InsightResult[]>;\n\n\t/**\n\t * List all currently added datasets, their types, and number of rows.\n\t *\n\t * @return Promise <InsightDataset[]>\n\t * The promise should fulfill an array of currently added InsightDatasets, and will only fulfill.\n\t */\n\tlistDatasets(): Promise<InsightDataset[]>;\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"ebbf8a14fa8488efc7954d7fa53a0d35e5c5e124","contentHash":"eb577d9b0a6051121f1f2089d07806658df16d205b7385231bd2c019d1d6eafa"},"C:\\Users\\David\\Desktop\\project_team175\\src\\controller\\InsightFacade.ts":{"path":"C:\\Users\\David\\Desktop\\project_team175\\src\\controller\\InsightFacade.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":12,"column":3}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"2":{"start":{"line":3,"column":26},"end":{"line":3,"column":33}},"3":{"start":{"line":4,"column":15},"end":{"line":4,"column":52}},"4":{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},"5":{"start":{"line":6,"column":6},"end":{"line":6,"column":68}},"6":{"start":{"line":6,"column":51},"end":{"line":6,"column":63}},"7":{"start":{"line":8,"column":4},"end":{"line":8,"column":39}},"8":{"start":{"line":10,"column":4},"end":{"line":10,"column":33}},"9":{"start":{"line":10,"column":26},"end":{"line":10,"column":33}},"10":{"start":{"line":11,"column":4},"end":{"line":11,"column":17}},"11":{"start":{"line":13,"column":25},"end":{"line":17,"column":2}},"12":{"start":{"line":14,"column":4},"end":{"line":14,"column":72}},"13":{"start":{"line":16,"column":4},"end":{"line":16,"column":21}},"14":{"start":{"line":18,"column":19},"end":{"line":24,"column":1}},"15":{"start":{"line":19,"column":4},"end":{"line":19,"column":42}},"16":{"start":{"line":19,"column":31},"end":{"line":19,"column":42}},"17":{"start":{"line":20,"column":17},"end":{"line":20,"column":19}},"18":{"start":{"line":21,"column":4},"end":{"line":21,"column":141}},"19":{"start":{"line":21,"column":21},"end":{"line":21,"column":141}},"20":{"start":{"line":21,"column":40},"end":{"line":21,"column":141}},"21":{"start":{"line":21,"column":109},"end":{"line":21,"column":141}},"22":{"start":{"line":22,"column":4},"end":{"line":22,"column":36}},"23":{"start":{"line":23,"column":4},"end":{"line":23,"column":18}},"24":{"start":{"line":25,"column":22},"end":{"line":27,"column":1}},"25":{"start":{"line":26,"column":4},"end":{"line":26,"column":62}},"26":{"start":{"line":28,"column":0},"end":{"line":28,"column":62}},"27":{"start":{"line":29,"column":25},"end":{"line":29,"column":52}},"28":{"start":{"line":30,"column":11},"end":{"line":30,"column":44}},"29":{"start":{"line":31,"column":16},"end":{"line":31,"column":49}},"30":{"start":{"line":32,"column":18},"end":{"line":32,"column":55}},"31":{"start":{"line":33,"column":20},"end":{"line":33,"column":59}},"32":{"start":{"line":34,"column":17},"end":{"line":34,"column":53}},"33":{"start":{"line":36,"column":17},"end":{"line":47,"column":5}},"34":{"start":{"line":48,"column":15},"end":{"line":48,"column":17}},"35":{"start":{"line":49,"column":14},"end":{"line":49,"column":23}},"36":{"start":{"line":51,"column":8},"end":{"line":53,"column":9}},"37":{"start":{"line":52,"column":12},"end":{"line":52,"column":91}},"38":{"start":{"line":54,"column":8},"end":{"line":56,"column":9}},"39":{"start":{"line":55,"column":12},"end":{"line":55,"column":112}},"40":{"start":{"line":57,"column":8},"end":{"line":74,"column":9}},"41":{"start":{"line":59,"column":24},"end":{"line":59,"column":45}},"42":{"start":{"line":60,"column":35},"end":{"line":60,"column":65}},"43":{"start":{"line":61,"column":36},"end":{"line":61,"column":89}},"44":{"start":{"line":62,"column":12},"end":{"line":68,"column":13}},"45":{"start":{"line":64,"column":20},"end":{"line":64,"column":84}},"46":{"start":{"line":65,"column":20},"end":{"line":65,"column":26}},"47":{"start":{"line":67,"column":20},"end":{"line":67,"column":106}},"48":{"start":{"line":69,"column":12},"end":{"line":69,"column":40}},"49":{"start":{"line":70,"column":12},"end":{"line":70,"column":63}},"50":{"start":{"line":73,"column":12},"end":{"line":73,"column":104}},"51":{"start":{"line":77,"column":25},"end":{"line":77,"column":27}},"52":{"start":{"line":78,"column":8},"end":{"line":81,"column":11}},"53":{"start":{"line":79,"column":32},"end":{"line":79,"column":50}},"54":{"start":{"line":80,"column":12},"end":{"line":80,"column":39}},"55":{"start":{"line":82,"column":26},"end":{"line":82,"column":53}},"56":{"start":{"line":83,"column":8},"end":{"line":85,"column":9}},"57":{"start":{"line":84,"column":12},"end":{"line":84,"column":71}},"58":{"start":{"line":86,"column":25},"end":{"line":86,"column":27}},"59":{"start":{"line":87,"column":8},"end":{"line":100,"column":9}},"60":{"start":{"line":88,"column":12},"end":{"line":90,"column":13}},"61":{"start":{"line":89,"column":16},"end":{"line":89,"column":25}},"62":{"start":{"line":91,"column":25},"end":{"line":91,"column":27}},"63":{"start":{"line":92,"column":12},"end":{"line":97,"column":13}},"64":{"start":{"line":93,"column":16},"end":{"line":93,"column":41}},"65":{"start":{"line":96,"column":16},"end":{"line":96,"column":81}},"66":{"start":{"line":98,"column":27},"end":{"line":98,"column":54}},"67":{"start":{"line":99,"column":12},"end":{"line":99,"column":56}},"68":{"start":{"line":101,"column":8},"end":{"line":101,"column":48}},"69":{"start":{"line":102,"column":24},"end":{"line":106,"column":9}},"70":{"start":{"line":107,"column":8},"end":{"line":107,"column":23}},"71":{"start":{"line":110,"column":8},"end":{"line":122,"column":9}},"72":{"start":{"line":111,"column":12},"end":{"line":115,"column":15}},"73":{"start":{"line":112,"column":16},"end":{"line":112,"column":75}},"74":{"start":{"line":113,"column":16},"end":{"line":113,"column":54}},"75":{"start":{"line":114,"column":16},"end":{"line":114,"column":81}},"76":{"start":{"line":116,"column":38},"end":{"line":116,"column":73}},"77":{"start":{"line":117,"column":12},"end":{"line":117,"column":97}},"78":{"start":{"line":118,"column":12},"end":{"line":118,"column":63}},"79":{"start":{"line":121,"column":12},"end":{"line":121,"column":77}},"80":{"start":{"line":125,"column":8},"end":{"line":127,"column":9}},"81":{"start":{"line":126,"column":12},"end":{"line":126,"column":47}},"82":{"start":{"line":130,"column":23},"end":{"line":130,"column":25}},"83":{"start":{"line":131,"column":8},"end":{"line":134,"column":9}},"84":{"start":{"line":132,"column":32},"end":{"line":132,"column":62}},"85":{"start":{"line":133,"column":12},"end":{"line":133,"column":41}},"86":{"start":{"line":135,"column":8},"end":{"line":135,"column":24}},"87":{"start":{"line":138,"column":27},"end":{"line":138,"column":29}},"88":{"start":{"line":139,"column":8},"end":{"line":146,"column":9}},"89":{"start":{"line":140,"column":12},"end":{"line":142,"column":13}},"90":{"start":{"line":141,"column":16},"end":{"line":141,"column":25}},"91":{"start":{"line":143,"column":25},"end":{"line":143,"column":40}},"92":{"start":{"line":144,"column":30},"end":{"line":144,"column":56}},"93":{"start":{"line":145,"column":12},"end":{"line":145,"column":43}},"94":{"start":{"line":147,"column":8},"end":{"line":149,"column":9}},"95":{"start":{"line":147,"column":43},"end":{"line":147,"column":50}},"96":{"start":{"line":148,"column":12},"end":{"line":148,"column":25}},"97":{"start":{"line":150,"column":8},"end":{"line":150,"column":20}},"98":{"start":{"line":153,"column":28},"end":{"line":153,"column":30}},"99":{"start":{"line":154,"column":24},"end":{"line":154,"column":37}},"100":{"start":{"line":155,"column":8},"end":{"line":157,"column":9}},"101":{"start":{"line":156,"column":12},"end":{"line":156,"column":25}},"102":{"start":{"line":158,"column":8},"end":{"line":161,"column":11}},"103":{"start":{"line":159,"column":31},"end":{"line":159,"column":59}},"104":{"start":{"line":160,"column":12},"end":{"line":160,"column":45}},"105":{"start":{"line":162,"column":8},"end":{"line":164,"column":9}},"106":{"start":{"line":162,"column":43},"end":{"line":162,"column":49}},"107":{"start":{"line":163,"column":12},"end":{"line":163,"column":25}},"108":{"start":{"line":165,"column":8},"end":{"line":165,"column":20}},"109":{"start":{"line":168,"column":8},"end":{"line":172,"column":11}},"110":{"start":{"line":169,"column":12},"end":{"line":171,"column":13}},"111":{"start":{"line":170,"column":16},"end":{"line":170,"column":29}},"112":{"start":{"line":173,"column":8},"end":{"line":173,"column":20}},"113":{"start":{"line":176,"column":8},"end":{"line":178,"column":9}},"114":{"start":{"line":177,"column":12},"end":{"line":177,"column":92}},"115":{"start":{"line":179,"column":8},"end":{"line":181,"column":9}},"116":{"start":{"line":180,"column":12},"end":{"line":180,"column":92}},"117":{"start":{"line":182,"column":8},"end":{"line":190,"column":9}},"118":{"start":{"line":183,"column":12},"end":{"line":183,"column":37}},"119":{"start":{"line":184,"column":32},"end":{"line":184,"column":60}},"120":{"start":{"line":185,"column":12},"end":{"line":185,"column":41}},"121":{"start":{"line":186,"column":12},"end":{"line":186,"column":39}},"122":{"start":{"line":189,"column":12},"end":{"line":189,"column":113}},"123":{"start":{"line":193,"column":26},"end":{"line":193,"column":51}},"124":{"start":{"line":194,"column":25},"end":{"line":194,"column":47}},"125":{"start":{"line":195,"column":24},"end":{"line":195,"column":37}},"126":{"start":{"line":196,"column":22},"end":{"line":196,"column":52}},"127":{"start":{"line":197,"column":26},"end":{"line":197,"column":34}},"128":{"start":{"line":198,"column":8},"end":{"line":200,"column":9}},"129":{"start":{"line":199,"column":12},"end":{"line":199,"column":106}},"130":{"start":{"line":201,"column":24},"end":{"line":201,"column":57}},"131":{"start":{"line":202,"column":32},"end":{"line":202,"column":82}},"132":{"start":{"line":203,"column":31},"end":{"line":203,"column":74}},"133":{"start":{"line":204,"column":8},"end":{"line":206,"column":9}},"134":{"start":{"line":205,"column":12},"end":{"line":205,"column":82}},"135":{"start":{"line":207,"column":8},"end":{"line":207,"column":30}},"136":{"start":{"line":210,"column":33},"end":{"line":222,"column":10}},"137":{"start":{"line":211,"column":34},"end":{"line":211,"column":36}},"138":{"start":{"line":212,"column":12},"end":{"line":220,"column":15}},"139":{"start":{"line":213,"column":30},"end":{"line":213,"column":47}},"140":{"start":{"line":214,"column":30},"end":{"line":214,"column":38}},"141":{"start":{"line":215,"column":16},"end":{"line":219,"column":17}},"142":{"start":{"line":216,"column":32},"end":{"line":216,"column":51}},"143":{"start":{"line":217,"column":36},"end":{"line":217,"column":41}},"144":{"start":{"line":218,"column":20},"end":{"line":218,"column":61}},"145":{"start":{"line":221,"column":12},"end":{"line":221,"column":33}},"146":{"start":{"line":223,"column":8},"end":{"line":236,"column":9}},"147":{"start":{"line":224,"column":31},"end":{"line":224,"column":72}},"148":{"start":{"line":225,"column":12},"end":{"line":235,"column":15}},"149":{"start":{"line":226,"column":31},"end":{"line":226,"column":44}},"150":{"start":{"line":227,"column":31},"end":{"line":227,"column":44}},"151":{"start":{"line":228,"column":16},"end":{"line":233,"column":17}},"152":{"start":{"line":229,"column":20},"end":{"line":229,"column":56}},"153":{"start":{"line":231,"column":21},"end":{"line":233,"column":17}},"154":{"start":{"line":232,"column":20},"end":{"line":232,"column":43}},"155":{"start":{"line":234,"column":16},"end":{"line":234,"column":25}},"156":{"start":{"line":237,"column":8},"end":{"line":237,"column":32}},"157":{"start":{"line":240,"column":28},"end":{"line":240,"column":62}},"158":{"start":{"line":241,"column":8},"end":{"line":248,"column":9}},"159":{"start":{"line":242,"column":28},"end":{"line":242,"column":58}},"160":{"start":{"line":243,"column":12},"end":{"line":243,"column":83}},"161":{"start":{"line":243,"column":66},"end":{"line":243,"column":80}},"162":{"start":{"line":246,"column":12},"end":{"line":246,"column":75}},"163":{"start":{"line":247,"column":12},"end":{"line":247,"column":101}},"164":{"start":{"line":251,"column":28},"end":{"line":258,"column":10}},"165":{"start":{"line":252,"column":28},"end":{"line":252,"column":45}},"166":{"start":{"line":253,"column":12},"end":{"line":257,"column":14}},"167":{"start":{"line":259,"column":8},"end":{"line":259,"column":44}},"168":{"start":{"line":262,"column":0},"end":{"line":262,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":74},"end":{"line":2,"column":75}},"loc":{"start":{"line":2,"column":96},"end":{"line":9,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":6,"column":38},"end":{"line":6,"column":39}},"loc":{"start":{"line":6,"column":49},"end":{"line":6,"column":65}},"line":6},"2":{"name":"(anonymous_2)","decl":{"start":{"line":9,"column":6},"end":{"line":9,"column":7}},"loc":{"start":{"line":9,"column":28},"end":{"line":12,"column":1}},"line":9},"3":{"name":"(anonymous_3)","decl":{"start":{"line":13,"column":80},"end":{"line":13,"column":81}},"loc":{"start":{"line":13,"column":95},"end":{"line":15,"column":1}},"line":13},"4":{"name":"(anonymous_4)","decl":{"start":{"line":15,"column":5},"end":{"line":15,"column":6}},"loc":{"start":{"line":15,"column":20},"end":{"line":17,"column":1}},"line":15},"5":{"name":"(anonymous_5)","decl":{"start":{"line":18,"column":50},"end":{"line":18,"column":51}},"loc":{"start":{"line":18,"column":65},"end":{"line":24,"column":1}},"line":18},"6":{"name":"(anonymous_6)","decl":{"start":{"line":25,"column":56},"end":{"line":25,"column":57}},"loc":{"start":{"line":25,"column":71},"end":{"line":27,"column":1}},"line":25},"7":{"name":"(anonymous_7)","decl":{"start":{"line":50,"column":4},"end":{"line":50,"column":5}},"loc":{"start":{"line":50,"column":40},"end":{"line":75,"column":5}},"line":50},"8":{"name":"(anonymous_8)","decl":{"start":{"line":76,"column":4},"end":{"line":76,"column":5}},"loc":{"start":{"line":76,"column":41},"end":{"line":108,"column":5}},"line":76},"9":{"name":"(anonymous_9)","decl":{"start":{"line":78,"column":20},"end":{"line":78,"column":21}},"loc":{"start":{"line":78,"column":44},"end":{"line":81,"column":9}},"line":78},"10":{"name":"(anonymous_10)","decl":{"start":{"line":109,"column":4},"end":{"line":109,"column":5}},"loc":{"start":{"line":109,"column":39},"end":{"line":123,"column":5}},"line":109},"11":{"name":"(anonymous_11)","decl":{"start":{"line":111,"column":55},"end":{"line":111,"column":56}},"loc":{"start":{"line":111,"column":67},"end":{"line":115,"column":13}},"line":111},"12":{"name":"(anonymous_12)","decl":{"start":{"line":124,"column":4},"end":{"line":124,"column":5}},"loc":{"start":{"line":124,"column":43},"end":{"line":128,"column":5}},"line":124},"13":{"name":"(anonymous_13)","decl":{"start":{"line":129,"column":4},"end":{"line":129,"column":5}},"loc":{"start":{"line":129,"column":27},"end":{"line":136,"column":5}},"line":129},"14":{"name":"(anonymous_14)","decl":{"start":{"line":137,"column":4},"end":{"line":137,"column":5}},"loc":{"start":{"line":137,"column":32},"end":{"line":151,"column":5}},"line":137},"15":{"name":"(anonymous_15)","decl":{"start":{"line":147,"column":31},"end":{"line":147,"column":32}},"loc":{"start":{"line":147,"column":43},"end":{"line":147,"column":50}},"line":147},"16":{"name":"(anonymous_16)","decl":{"start":{"line":152,"column":4},"end":{"line":152,"column":5}},"loc":{"start":{"line":152,"column":26},"end":{"line":166,"column":5}},"line":152},"17":{"name":"(anonymous_17)","decl":{"start":{"line":158,"column":24},"end":{"line":158,"column":25}},"loc":{"start":{"line":158,"column":37},"end":{"line":161,"column":9}},"line":158},"18":{"name":"(anonymous_18)","decl":{"start":{"line":162,"column":32},"end":{"line":162,"column":33}},"loc":{"start":{"line":162,"column":43},"end":{"line":162,"column":49}},"line":162},"19":{"name":"(anonymous_19)","decl":{"start":{"line":167,"column":4},"end":{"line":167,"column":5}},"loc":{"start":{"line":167,"column":28},"end":{"line":174,"column":5}},"line":167},"20":{"name":"(anonymous_20)","decl":{"start":{"line":168,"column":32},"end":{"line":168,"column":33}},"loc":{"start":{"line":168,"column":43},"end":{"line":172,"column":9}},"line":168},"21":{"name":"(anonymous_21)","decl":{"start":{"line":175,"column":4},"end":{"line":175,"column":5}},"loc":{"start":{"line":175,"column":28},"end":{"line":191,"column":5}},"line":175},"22":{"name":"(anonymous_22)","decl":{"start":{"line":192,"column":4},"end":{"line":192,"column":5}},"loc":{"start":{"line":192,"column":30},"end":{"line":208,"column":5}},"line":192},"23":{"name":"(anonymous_23)","decl":{"start":{"line":209,"column":4},"end":{"line":209,"column":5}},"loc":{"start":{"line":209,"column":43},"end":{"line":238,"column":5}},"line":209},"24":{"name":"(anonymous_24)","decl":{"start":{"line":210,"column":53},"end":{"line":210,"column":54}},"loc":{"start":{"line":210,"column":63},"end":{"line":222,"column":9}},"line":210},"25":{"name":"(anonymous_25)","decl":{"start":{"line":212,"column":36},"end":{"line":212,"column":37}},"loc":{"start":{"line":212,"column":48},"end":{"line":220,"column":13}},"line":212},"26":{"name":"(anonymous_26)","decl":{"start":{"line":225,"column":34},"end":{"line":225,"column":35}},"loc":{"start":{"line":225,"column":44},"end":{"line":235,"column":13}},"line":225},"27":{"name":"(anonymous_27)","decl":{"start":{"line":239,"column":4},"end":{"line":239,"column":5}},"loc":{"start":{"line":239,"column":33},"end":{"line":249,"column":5}},"line":239},"28":{"name":"(anonymous_28)","decl":{"start":{"line":243,"column":47},"end":{"line":243,"column":48}},"loc":{"start":{"line":243,"column":66},"end":{"line":243,"column":80}},"line":243},"29":{"name":"(anonymous_29)","decl":{"start":{"line":250,"column":4},"end":{"line":250,"column":5}},"loc":{"start":{"line":250,"column":25},"end":{"line":260,"column":5}},"line":250},"30":{"name":"(anonymous_30)","decl":{"start":{"line":251,"column":59},"end":{"line":251,"column":60}},"loc":{"start":{"line":251,"column":67},"end":{"line":258,"column":9}},"line":251}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":12,"column":3}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":57},"end":{"line":12,"column":2}}],"line":2},"1":{"loc":{"start":{"line":2,"column":57},"end":{"line":12,"column":2}},"type":"cond-expr","locations":[{"start":{"line":2,"column":74},"end":{"line":9,"column":1}},{"start":{"line":9,"column":6},"end":{"line":12,"column":1}}],"line":2},"2":{"loc":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"type":"if","locations":[{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},{"start":{"line":3,"column":4},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},"type":"if","locations":[{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},{"start":{"line":5,"column":4},"end":{"line":7,"column":5}}],"line":5},"4":{"loc":{"start":{"line":5,"column":8},"end":{"line":5,"column":85}},"type":"binary-expr","locations":[{"start":{"line":5,"column":8},"end":{"line":5,"column":13}},{"start":{"line":5,"column":18},"end":{"line":5,"column":84}}],"line":5},"5":{"loc":{"start":{"line":5,"column":18},"end":{"line":5,"column":84}},"type":"cond-expr","locations":[{"start":{"line":5,"column":34},"end":{"line":5,"column":47}},{"start":{"line":5,"column":50},"end":{"line":5,"column":84}}],"line":5},"6":{"loc":{"start":{"line":5,"column":50},"end":{"line":5,"column":84}},"type":"binary-expr","locations":[{"start":{"line":5,"column":50},"end":{"line":5,"column":63}},{"start":{"line":5,"column":67},"end":{"line":5,"column":84}}],"line":5},"7":{"loc":{"start":{"line":10,"column":4},"end":{"line":10,"column":33}},"type":"if","locations":[{"start":{"line":10,"column":4},"end":{"line":10,"column":33}},{"start":{"line":10,"column":4},"end":{"line":10,"column":33}}],"line":10},"8":{"loc":{"start":{"line":13,"column":25},"end":{"line":17,"column":2}},"type":"binary-expr","locations":[{"start":{"line":13,"column":26},"end":{"line":13,"column":30}},{"start":{"line":13,"column":34},"end":{"line":13,"column":57}},{"start":{"line":13,"column":63},"end":{"line":17,"column":1}}],"line":13},"9":{"loc":{"start":{"line":13,"column":63},"end":{"line":17,"column":1}},"type":"cond-expr","locations":[{"start":{"line":13,"column":80},"end":{"line":15,"column":1}},{"start":{"line":15,"column":5},"end":{"line":17,"column":1}}],"line":13},"10":{"loc":{"start":{"line":18,"column":19},"end":{"line":24,"column":1}},"type":"binary-expr","locations":[{"start":{"line":18,"column":20},"end":{"line":18,"column":24}},{"start":{"line":18,"column":28},"end":{"line":18,"column":45}},{"start":{"line":18,"column":50},"end":{"line":24,"column":1}}],"line":18},"11":{"loc":{"start":{"line":19,"column":4},"end":{"line":19,"column":42}},"type":"if","locations":[{"start":{"line":19,"column":4},"end":{"line":19,"column":42}},{"start":{"line":19,"column":4},"end":{"line":19,"column":42}}],"line":19},"12":{"loc":{"start":{"line":19,"column":8},"end":{"line":19,"column":29}},"type":"binary-expr","locations":[{"start":{"line":19,"column":8},"end":{"line":19,"column":11}},{"start":{"line":19,"column":15},"end":{"line":19,"column":29}}],"line":19},"13":{"loc":{"start":{"line":21,"column":4},"end":{"line":21,"column":141}},"type":"if","locations":[{"start":{"line":21,"column":4},"end":{"line":21,"column":141}},{"start":{"line":21,"column":4},"end":{"line":21,"column":141}}],"line":21},"14":{"loc":{"start":{"line":21,"column":40},"end":{"line":21,"column":141}},"type":"if","locations":[{"start":{"line":21,"column":40},"end":{"line":21,"column":141}},{"start":{"line":21,"column":40},"end":{"line":21,"column":141}}],"line":21},"15":{"loc":{"start":{"line":21,"column":44},"end":{"line":21,"column":107}},"type":"binary-expr","locations":[{"start":{"line":21,"column":44},"end":{"line":21,"column":59}},{"start":{"line":21,"column":63},"end":{"line":21,"column":107}}],"line":21},"16":{"loc":{"start":{"line":25,"column":22},"end":{"line":27,"column":1}},"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":27}},{"start":{"line":25,"column":31},"end":{"line":25,"column":51}},{"start":{"line":25,"column":56},"end":{"line":27,"column":1}}],"line":25},"17":{"loc":{"start":{"line":26,"column":11},"end":{"line":26,"column":61}},"type":"cond-expr","locations":[{"start":{"line":26,"column":37},"end":{"line":26,"column":40}},{"start":{"line":26,"column":43},"end":{"line":26,"column":61}}],"line":26},"18":{"loc":{"start":{"line":26,"column":12},"end":{"line":26,"column":33}},"type":"binary-expr","locations":[{"start":{"line":26,"column":12},"end":{"line":26,"column":15}},{"start":{"line":26,"column":19},"end":{"line":26,"column":33}}],"line":26},"19":{"loc":{"start":{"line":51,"column":8},"end":{"line":53,"column":9}},"type":"if","locations":[{"start":{"line":51,"column":8},"end":{"line":53,"column":9}},{"start":{"line":51,"column":8},"end":{"line":53,"column":9}}],"line":51},"20":{"loc":{"start":{"line":51,"column":12},"end":{"line":51,"column":42}},"type":"binary-expr","locations":[{"start":{"line":51,"column":12},"end":{"line":51,"column":22}},{"start":{"line":51,"column":26},"end":{"line":51,"column":42}}],"line":51},"21":{"loc":{"start":{"line":54,"column":8},"end":{"line":56,"column":9}},"type":"if","locations":[{"start":{"line":54,"column":8},"end":{"line":56,"column":9}},{"start":{"line":54,"column":8},"end":{"line":56,"column":9}}],"line":54},"22":{"loc":{"start":{"line":62,"column":12},"end":{"line":68,"column":13}},"type":"switch","locations":[{"start":{"line":63,"column":16},"end":{"line":65,"column":26}},{"start":{"line":66,"column":16},"end":{"line":67,"column":106}}],"line":62},"23":{"loc":{"start":{"line":83,"column":8},"end":{"line":85,"column":9}},"type":"if","locations":[{"start":{"line":83,"column":8},"end":{"line":85,"column":9}},{"start":{"line":83,"column":8},"end":{"line":85,"column":9}}],"line":83},"24":{"loc":{"start":{"line":88,"column":12},"end":{"line":90,"column":13}},"type":"if","locations":[{"start":{"line":88,"column":12},"end":{"line":90,"column":13}},{"start":{"line":88,"column":12},"end":{"line":90,"column":13}}],"line":88},"25":{"loc":{"start":{"line":140,"column":12},"end":{"line":142,"column":13}},"type":"if","locations":[{"start":{"line":140,"column":12},"end":{"line":142,"column":13}},{"start":{"line":140,"column":12},"end":{"line":142,"column":13}}],"line":140},"26":{"loc":{"start":{"line":147,"column":8},"end":{"line":149,"column":9}},"type":"if","locations":[{"start":{"line":147,"column":8},"end":{"line":149,"column":9}},{"start":{"line":147,"column":8},"end":{"line":149,"column":9}}],"line":147},"27":{"loc":{"start":{"line":155,"column":8},"end":{"line":157,"column":9}},"type":"if","locations":[{"start":{"line":155,"column":8},"end":{"line":157,"column":9}},{"start":{"line":155,"column":8},"end":{"line":157,"column":9}}],"line":155},"28":{"loc":{"start":{"line":162,"column":8},"end":{"line":164,"column":9}},"type":"if","locations":[{"start":{"line":162,"column":8},"end":{"line":164,"column":9}},{"start":{"line":162,"column":8},"end":{"line":164,"column":9}}],"line":162},"29":{"loc":{"start":{"line":169,"column":12},"end":{"line":171,"column":13}},"type":"if","locations":[{"start":{"line":169,"column":12},"end":{"line":171,"column":13}},{"start":{"line":169,"column":12},"end":{"line":171,"column":13}}],"line":169},"30":{"loc":{"start":{"line":176,"column":8},"end":{"line":178,"column":9}},"type":"if","locations":[{"start":{"line":176,"column":8},"end":{"line":178,"column":9}},{"start":{"line":176,"column":8},"end":{"line":178,"column":9}}],"line":176},"31":{"loc":{"start":{"line":176,"column":12},"end":{"line":176,"column":42}},"type":"binary-expr","locations":[{"start":{"line":176,"column":12},"end":{"line":176,"column":22}},{"start":{"line":176,"column":26},"end":{"line":176,"column":42}}],"line":176},"32":{"loc":{"start":{"line":179,"column":8},"end":{"line":181,"column":9}},"type":"if","locations":[{"start":{"line":179,"column":8},"end":{"line":181,"column":9}},{"start":{"line":179,"column":8},"end":{"line":181,"column":9}}],"line":179},"33":{"loc":{"start":{"line":198,"column":8},"end":{"line":200,"column":9}},"type":"if","locations":[{"start":{"line":198,"column":8},"end":{"line":200,"column":9}},{"start":{"line":198,"column":8},"end":{"line":200,"column":9}}],"line":198},"34":{"loc":{"start":{"line":204,"column":8},"end":{"line":206,"column":9}},"type":"if","locations":[{"start":{"line":204,"column":8},"end":{"line":206,"column":9}},{"start":{"line":204,"column":8},"end":{"line":206,"column":9}}],"line":204},"35":{"loc":{"start":{"line":215,"column":16},"end":{"line":219,"column":17}},"type":"if","locations":[{"start":{"line":215,"column":16},"end":{"line":219,"column":17}},{"start":{"line":215,"column":16},"end":{"line":219,"column":17}}],"line":215},"36":{"loc":{"start":{"line":223,"column":8},"end":{"line":236,"column":9}},"type":"if","locations":[{"start":{"line":223,"column":8},"end":{"line":236,"column":9}},{"start":{"line":223,"column":8},"end":{"line":236,"column":9}}],"line":223},"37":{"loc":{"start":{"line":228,"column":16},"end":{"line":233,"column":17}},"type":"if","locations":[{"start":{"line":228,"column":16},"end":{"line":233,"column":17}},{"start":{"line":228,"column":16},"end":{"line":233,"column":17}}],"line":228},"38":{"loc":{"start":{"line":228,"column":20},"end":{"line":228,"column":76}},"type":"binary-expr","locations":[{"start":{"line":228,"column":20},"end":{"line":228,"column":46}},{"start":{"line":228,"column":50},"end":{"line":228,"column":76}}],"line":228},"39":{"loc":{"start":{"line":231,"column":21},"end":{"line":233,"column":17}},"type":"if","locations":[{"start":{"line":231,"column":21},"end":{"line":233,"column":17}},{"start":{"line":231,"column":21},"end":{"line":233,"column":17}}],"line":231},"40":{"loc":{"start":{"line":231,"column":25},"end":{"line":231,"column":81}},"type":"binary-expr","locations":[{"start":{"line":231,"column":25},"end":{"line":231,"column":51}},{"start":{"line":231,"column":55},"end":{"line":231,"column":81}}],"line":231}},"s":{"0":1,"1":148,"2":148,"3":148,"4":148,"5":148,"6":50,"7":148,"8":0,"9":0,"10":0,"11":1,"12":1,"13":0,"14":1,"15":1,"16":0,"17":1,"18":1,"19":1,"20":148,"21":148,"22":1,"23":1,"24":1,"25":4,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":16,"34":16,"35":16,"36":13,"37":4,"38":9,"39":0,"40":9,"41":9,"42":9,"43":9,"44":9,"45":8,"46":7,"47":1,"48":7,"49":7,"50":1,"51":8,"52":8,"53":41618,"54":41618,"55":8,"56":8,"57":1,"58":7,"59":7,"60":41615,"61":7,"62":41608,"63":41608,"64":41608,"65":0,"66":41608,"67":41608,"68":7,"69":7,"70":7,"71":7,"72":7,"73":5,"74":5,"75":5,"76":7,"77":7,"78":7,"79":0,"80":41608,"81":452284,"82":41608,"83":41608,"84":452284,"85":452284,"86":41608,"87":8,"88":8,"89":41618,"90":7,"91":41611,"92":41611,"93":41611,"94":8,"95":17,"96":1,"97":7,"98":41611,"99":41611,"100":41611,"101":16488,"102":25123,"103":452284,"104":452284,"105":25123,"106":25123,"107":0,"108":25123,"109":452284,"110":4522840,"111":0,"112":452284,"113":6,"114":3,"115":3,"116":1,"117":2,"118":2,"119":2,"120":2,"121":2,"122":0,"123":39,"124":39,"125":39,"126":39,"127":29,"128":29,"129":0,"130":29,"131":29,"132":28,"133":28,"134":0,"135":28,"136":28,"137":6258,"138":6258,"139":6998,"140":6998,"141":6998,"142":6998,"143":6998,"144":6998,"145":6258,"146":28,"147":28,"148":28,"149":12995,"150":12995,"151":12995,"152":8436,"153":4559,"154":4559,"155":0,"156":28,"157":29,"158":29,"159":29,"160":29,"161":1873748,"162":0,"163":0,"164":4,"165":4,"166":4,"167":4,"168":1},"f":{"0":148,"1":50,"2":0,"3":1,"4":0,"5":1,"6":4,"7":13,"8":8,"9":41618,"10":7,"11":5,"12":41608,"13":41608,"14":8,"15":17,"16":41611,"17":452284,"18":25123,"19":452284,"20":4522840,"21":6,"22":39,"23":28,"24":6258,"25":6998,"26":12995,"27":29,"28":1873748,"29":4,"30":4},"b":{"0":[1,1,1],"1":[1,0],"2":[148,0],"3":[148,0],"4":[148,148],"5":[0,148],"6":[148,0],"7":[0,0],"8":[1,1,1],"9":[1,0],"10":[1,1,1],"11":[0,1],"12":[1,1],"13":[1,0],"14":[148,0],"15":[148,148],"16":[1,1,1],"17":[3,1],"18":[4,4],"19":[4,9],"20":[13,9],"21":[0,9],"22":[8,1],"23":[1,7],"24":[7,41608],"25":[7,41611],"26":[1,7],"27":[16488,25123],"28":[0,25123],"29":[0,4522840],"30":[3,3],"31":[6,4],"32":[1,2],"33":[0,29],"34":[0,28],"35":[6998,0],"36":[28,0],"37":[8436,4559],"38":[12995,8436],"39":[4559,0],"40":[4559,4559]},"inputSourceMap":{"version":3,"file":"C:/Users/David/Desktop/project_team175/src/controller/InsightFacade.ts","sources":["C:/Users/David/Desktop/project_team175/src/controller/InsightFacade.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n\tIInsightFacade,\r\n\tInsightDataset,\r\n\tInsightDatasetKind,\r\n\tInsightError,\r\n\tInsightResult,\r\n\tNotFoundError,\r\n} from \"./IInsightFacade\";\r\nimport * as fs from \"fs-extra\";\r\nimport JSZip from \"jszip\";\r\nimport Section from \"./section\";\r\nimport Validator from \"./validator\";\r\nimport Filter from \"./filter\";\r\n\r\n// Assuming the structure of your options object based on the provided code\r\ninterface QueryOptions {\r\n\tCOLUMNS: string[];\r\n\tORDER?: string; // Optional\r\n}\r\n\r\nexport default class InsightFacade implements IInsightFacade {\r\n\tprivate fileFields: string[] = [\r\n\t\t\"id\",\r\n\t\t\"Course\",\r\n\t\t\"Title\",\r\n\t\t\"Professor\",\r\n\t\t\"Subject\",\r\n\t\t\"Year\",\r\n\t\t\"Avg\",\r\n\t\t\"Pass\",\r\n\t\t\"Fail\",\r\n\t\t\"Audit\",\r\n\t];\r\n\r\n\tprivate datasets: {[id: string]: InsightDataset} = {};\r\n\tprivate readonly dataDir = \"./data/\";\r\n\r\n\tpublic async addDataset(id: string, content: string, kind: InsightDatasetKind): Promise<string[]> {\r\n\t\tif (!id.trim() || id.includes(\"_\")) {\r\n\t\t\treturn Promise.reject(new InsightError(\"Invalid dataset ID\"));\r\n\t\t}\r\n\t\tif (this.datasets[id]) {\r\n\t\t\treturn Promise.reject(new InsightError(\"Dataset with the same ID already exists\"));\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tlet dataset: InsightDataset;\r\n\r\n\t\t\t// unzip dataset\r\n\t\t\tconst zip = new JSZip();\r\n\t\t\tconst decodedContent = Buffer.from(content, \"base64\");\r\n\t\t\tconst unzippedContent = await zip.loadAsync(decodedContent, {base64: true});\r\n\r\n\t\t\t// process dataset\r\n\t\t\tswitch (kind) {\r\n\t\t\t\tcase InsightDatasetKind.Sections:\r\n\t\t\t\t\tdataset = await this.processCoursesDataset(id, unzippedContent);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn Promise.reject(new InsightError(\"Unsupported dataset kind.\"));\r\n\t\t\t}\r\n\r\n\t\t\t// add dataset to dataset dict\r\n\t\t\tthis.datasets[id] = dataset;\r\n\r\n\t\t\t// return array of all added datasets\r\n\t\t\t// console.log(Object.keys(this.datasets));\r\n\t\t\treturn Promise.resolve(Object.keys(this.datasets));\r\n\t\t} catch (error) {\r\n\t\t\treturn Promise.reject(new InsightError(`Failed to add dataset: ${error}`));\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async processCoursesDataset(id: string, zip: JSZip): Promise<InsightDataset> {\r\n\t\tconst promises: Array<Promise<string>> = [];\r\n\r\n\t\t// for each course file, read its contents\r\n\t\t// and push it onto an array of promises\r\n\t\tzip.forEach((relativePath, file) => {\r\n\t\t\tconst jsonPromise = file.async(\"text\");\r\n\t\t\tpromises.push(jsonPromise);\r\n\t\t});\r\n\r\n\t\t// resolve all promises to get an array of course JSON strings\r\n\t\tlet jsonStrings = await Promise.all(promises);\r\n\r\n\t\t// validate Dataset\r\n\t\tif (!this.isValidDataset(jsonStrings)) {\r\n\t\t\t// console.log(\"invalid dataset\");\r\n\t\t\tthrow new InsightError(\"Invalid Dataset\");\r\n\t\t}\r\n\t\t// console.log(\"valid dataset\");\r\n\r\n\t\tlet datasetObj: any = {};\r\n\t\t// setup dataset JSON obj to write later\r\n\r\n\t\t// for each course\r\n\t\tfor (let str of jsonStrings) {\r\n\t\t\t// if string is empty then skip it\r\n\t\t\tif (!str) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tlet course: any = {};\r\n\r\n\t\t\ttry {\r\n\t\t\t\tcourse = JSON.parse(str);\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// if not a JSON file then throw error\r\n\t\t\t\tthrow new InsightError(\"unsupported file type\");\r\n\t\t\t}\r\n\r\n\t\t\t// convert all sections of a course to TS classes\r\n\t\t\tlet sections = this.createSections(course);\r\n\r\n\t\t\t// add sections to dataset JSON object to be written later\r\n\t\t\tthis.updateDatasetObj(datasetObj, sections);\r\n\t\t}\r\n\r\n\t\t// write datasetOBJ to json file in ./src/controller/data/ dir\r\n\t\tawait this.writeDataset(datasetObj, id);\r\n\r\n\t\t// create InsightDataset obj and fill in proper values\r\n\t\tconst dataset: InsightDataset = {\r\n\t\t\tid,\r\n\t\t\tkind: InsightDatasetKind.Sections,\r\n\t\t\tnumRows: Object.keys(datasetObj).length,\r\n\t\t};\r\n\r\n\t\treturn dataset;\r\n\t}\r\n\r\n\t// writes a dataset to a JSON file\r\n\tprivate async writeDataset(datasetObj: any, id: string) {\r\n\t\t// check if data directory exists\r\n\t\ttry {\r\n\t\t\t// Check if the directory exists; if not, try to create it\r\n\t\t\tawait fs.promises.stat(this.dataDir).catch(async () => {\r\n\t\t\t\tconsole.log(`Directory '${this.dataDir}' does not exist.`);\r\n\t\t\t\tawait fs.promises.mkdir(this.dataDir);\r\n\t\t\t\tconsole.log(`Directory '${this.dataDir}' created successfully.`);\r\n\t\t\t});\r\n\r\n\t\t\t// Prepare the dataset JSON string\r\n\t\t\tconst datasetJSONString = JSON.stringify(datasetObj, null, 2);\r\n\r\n\t\t\t// Write the file\r\n\t\t\tawait fs.promises.writeFile(this.dataDir + id + \".json\", datasetJSONString, \"utf-8\");\r\n\t\t\tconsole.log(\"File has been written successfully.\");\r\n\t\t} catch (e) {\r\n\t\t\tconsole.error(\"Error writing to file or creating directory:\", e);\r\n\t\t}\r\n\t}\r\n\r\n\t// adds sections to a dataset JSON obj\r\n\tprivate updateDatasetObj(datasetObj: any, sections: Section[]): void {\r\n\t\tfor (let section of sections) {\r\n\t\t\tdatasetObj[section.uuid] = section;\r\n\t\t}\r\n\t}\r\n\r\n\t// INPUT: course JSON object\r\n\t// DOES: goes through each section and turns it into a section TS class\r\n\t// \t\t then puts section into array of sections for the course\r\n\t// OUTPUT: returns the array of sections for a course\r\n\tprivate createSections(course: any): Section[] {\r\n\t\tlet sections: Section[] = [];\r\n\r\n\t\tfor (let section of course.result) {\r\n\t\t\tlet sectionObject = new Section(section);\r\n\t\t\tsections.push(sectionObject);\r\n\t\t}\r\n\r\n\t\treturn sections;\r\n\t}\r\n\r\n\t// validates dataset\r\n\tprivate isValidDataset(jsonStrings: string[]): boolean {\r\n\t\tlet validCourses: boolean[] = [];\r\n\r\n\t\t// go through each course and validate it\r\n\t\tfor (let str of jsonStrings) {\r\n\t\t\t// if string is empty then skip it\r\n\t\t\tif (!str) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tlet course = JSON.parse(str);\r\n\t\t\tlet validCourse = this.isValidCourse(course);\r\n\t\t\tvalidCourses.push(validCourse);\r\n\t\t}\r\n\r\n\t\t// if every course is invalid then dataset is invalid\r\n\t\tif (validCourses.every((course) => !course)) {\r\n\t\t\t// console.log(\"invalid dataset\");\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// INPUT: a course JSON object\r\n\t// DOES: checks the \"result\" entry of the object and for each item:\r\n\t// checks to see if it has all the keys needed to query a section\r\n\t// immediately returns false if \"result\" section is empty\r\n\t// OUTPUT: returns false if it is an invalid section\r\n\t//\t\t   returns true for a valid section\r\n\tprivate isValidCourse(course: any): boolean {\r\n\t\t// sections are contained within results\r\n\t\tlet validSections: boolean[] = [];\r\n\t\tconst results: any[] = course.result;\r\n\r\n\t\t// handle empty sections\r\n\t\tif (results.length < 1) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t// check if all sections of a course are valid or not\r\n\t\t// for each section check if it's valid\r\n\t\tresults.forEach((section: any) => {\r\n\t\t\tlet validSection = this.isValidSection(section);\r\n\t\t\tvalidSections.push(validSection);\r\n\t\t});\r\n\t\t// if all sections of a course are invalid then course is invalid\r\n\t\tif (validSections.every((valid) => !valid)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// validate a single section\r\n\t// checks to see if a section has all validFields\r\n\tprivate isValidSection(section: any): boolean {\r\n\t\tthis.fileFields.forEach((field: string) => {\r\n\t\t\tif (!(field in section)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn true;\r\n\t}\r\n\r\n\tpublic async removeDataset(id: string): Promise<string> {\r\n\t\t// Validate the dataset ID\r\n\t\tif (!id.trim() || id.includes(\"_\")) {\r\n\t\t\treturn Promise.reject(new InsightError(\"Invalid dataset ID.\"));\r\n\t\t}\r\n\t\t// Check if the dataset exists\r\n\t\tif (!this.datasets[id]) {\r\n\t\t\treturn Promise.reject(new NotFoundError(\"Dataset not found.\"));\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\t// Remove the dataset from the internal dictionary\r\n\t\t\tdelete this.datasets[id];\r\n\t\t\t// Attempt to delete the dataset file from the disk\r\n\t\t\tconst datasetPath = `${this.dataDir}/${id}.json`;\r\n\t\t\tawait fs.remove(datasetPath);\r\n\r\n\t\t\treturn Promise.resolve(id);\r\n\t\t} catch (error) {\r\n\t\t\treturn Promise.reject(new InsightError(`Failed to remove dataset ${id}: ${error}`));\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async performQuery(query: any): Promise<InsightResult[]> {\r\n\t\tconst validator: Validator = new Validator();\r\n\t\tconst filterer: Filter = new Filter();\r\n\t\tconst options: QueryOptions = query.OPTIONS;\r\n\t\tconst valid: any = validator.validateQuery(query);\r\n\t\tconst datasetId = valid.id;\r\n\t\tif (!datasetId) {\r\n\t\t\tthrow new InsightError(\"Dataset ID could not be determined from the query.\");\r\n\t\t}\r\n\t\tconst dataset = await this.loadDataset(datasetId);\r\n\t\tconst filteredResults = filterer.filterByWhereClause(dataset, query.WHERE);\r\n\t\tconst insightResults: InsightResult[] = this.applyOptions(filteredResults, options);\r\n\t\t// console.log(insightResults);\r\n\t\tif (insightResults.length > 5000) {\r\n\t\t\tthrow new InsightError(\"result has over 5000 items\");\r\n\t\t}\r\n\t\treturn insightResults;\r\n\t}\r\n\r\n\tprivate applyOptions(filteredResults: Section[], options: QueryOptions): InsightResult[] {\r\n\t\tconst projectedResults: InsightResult[] = filteredResults.map((item: any) => {\r\n\t\t\tconst projectedItem: InsightResult = {};\r\n\t\t\toptions.COLUMNS.forEach((column) => {\r\n\t\t\t\tconst parts = column.split(\"_\");\r\n\t\t\t\tconst field = parts[1];\r\n\t\t\t\t// Make sure the column is a key of Section\r\n\t\t\t\tif (field in item.value) {\r\n\t\t\t\t\tconst key = `sections_${field}` as keyof InsightResult;\r\n\t\t\t\t\t// Use type assertion for column to be treated as keyof Section\r\n\t\t\t\t\tconst itemKey = field as keyof Section;\r\n\t\t\t\t\tprojectedItem[key] = item.value[itemKey];\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn projectedItem;\r\n\t\t});\r\n\r\n\t\t// Sort results if ORDER is specified\r\n\t\tif (options.ORDER) {\r\n\t\t\tconst orderField = `sections_${options.ORDER.split(\"_\")[1]}` as keyof InsightResult;\r\n\t\t\tprojectedResults.sort((a, b) => {\r\n\t\t\t\tconst aValue = a[orderField];\r\n\t\t\t\tconst bValue = b[orderField];\r\n\t\t\t\t// Check if the values are strings for localeCompare or numbers for subtraction\r\n\t\t\t\tif (typeof aValue === \"string\" && typeof bValue === \"string\") {\r\n\t\t\t\t\treturn aValue.localeCompare(bValue);\r\n\t\t\t\t} else if (typeof aValue === \"number\" && typeof bValue === \"number\") {\r\n\t\t\t\t\treturn aValue - bValue;\r\n\t\t\t\t}\r\n\t\t\t\treturn 0; // Fallback in case of a type mismatch or undefined values\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn projectedResults;\r\n\t}\r\n\r\n\tprivate async loadDataset(datasetId: string): Promise<any> {\r\n\t\t// loads the dataset in\r\n\t\tconst datasetPath = this.dataDir + datasetId + \".json\"; // Assuming this.dataDir is './data/'\r\n\t\ttry {\r\n\t\t\tconst dataset = await fs.readJson(datasetPath);\r\n\t\t\treturn Object.entries(dataset).map(([key, value]) => ({key, value}));\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(`Failed to load dataset ${datasetId}: ${error}`);\r\n\t\t\tthrow new InsightError(`Failed to load dataset ${datasetId}: ${error}`);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async listDatasets(): Promise<InsightDataset[]> {\r\n\t\t// and an object with kind and numRows as the value\r\n\t\tconst datasetList: InsightDataset[] = Object.keys(this.datasets).map((id) => {\r\n\t\t\tconst dataset = this.datasets[id];\r\n\t\t\treturn {\r\n\t\t\t\tid: id, // Dataset ID from the dictionary key\r\n\t\t\t\tkind: dataset.kind, // Assuming the kind is directly stored in the dataset object\r\n\t\t\t\tnumRows: dataset.numRows,\r\n\t\t\t};\r\n\t\t});\r\n\t\treturn Promise.resolve(datasetList);\r\n\t}\r\n}\r\n\r\n// TODO: determine the dataset to query using ID\r\n//\t\t1. dataset JSON files in./data/ are named with their ID\r\n//\t\t\ta. can iterate through all files in ./data/ to find a JSON file with name == ID\r\n//\t\t2. load that JSON file\r\n// takes in an already parsed JSON object\r\n// makes sure that the query is valid\r\n\r\n// TODO: query through dataset to find data that matches query\r\n//\t\t1. this will be done recursively\r\n//\t\t\ta. idea is that we will recurse until a leaf clause (just a clause with no nested clauses)\r\n//\t\t\t-> then filter through all sections using just the leaf clause\r\n//\t\t\t-> then return the result of this filtering (array) to the callee\r\n//\t\t\t-> this means that we pass filtered data to the higher level clauses\r\n//\t\t\t-> then the higher level clauses will apply their own filter\r\n//\t\t\t-> essentially layering filters on top of each other\r\n//\t\t\t-> eventually we return back up to the WHERE clause which is when we finish querying\r\n//\t\t2. need a function to handle every EBNF keyword\r\n//\t\t\ta. ie: handleWhere would be the highest level function\r\n//\t\t\t\twhich calls the other filtering functions appropriately depending\r\n//\t\t\t\tdepending on what clauses are in the where (might need a switch statement to do this)\r\n//\t\t3. we have a top level function which takes in a query obj\r\n//\t\t\thandles any preprocessing needed, formatting, calling handlers, returning the final result etc\r\n//\t\t\t\twill also need to handle test queries with an expected field in the JSON file\r\n//\t\t\t\t^^^ this part might not be right and might be handled by the test suite actually\r\n//\t\t\ta. should call handleWhere, handleOptions etc\r\n// TODO: validate Query recursively.\r\n//\t\t 1. check if the query follows EBNF\r\n//\t\t\t- all queries need to have a WHERE clause\r\n//\t\t\ta. (ie: query has a WHERE clause, and looks like WHERE: {EQ: ubc.id is 1}} or something)\r\n//\t\t\t\t- as we check through where and options we must check for db references\r\n//\t\t\tb. need to check if current keyword is an EBNF keyword\r\n//\t\t\tc. need to check if current word is being used correctly\r\n//\t\t\t\t- ie: IS: {ubc.id: 1} is how you use the IS keyword\r\n//\t\t\t\t      but IS: [{ubc.id: 1}, {ubc.id: 2}] isn't.\r\n//\t\t\t\t- this part will have to be done recursively\r\n//\t\t\t\t\t-> curr word is only valid of all children are valid\r\n//\t\t\t\t\t-> need to check if chlidren are valid\r\n//\t\t\t\t\t-> keep recursing until a leaf node (a clause with no nested clauses)\r\n//\t\t\t\t\t-> return up the call stack until curr.\r\n//\t\t\t\t\t-> if curr and all its children are valid then curr is valid\r\n//\t\t 2. check if the query references 1 DB.\r\n//\t\t \ta. (ie: ubc.id is 1 is fine but ubc.id is ubc2.id isn't)\r\n//\t\t\tb. maybe we could have a dictionary with all the DBs seen so far and length should be < 2\r\n//\t\t\t\t- then as we recurse through the query we can just check the length of this each time\r\n//\t\t 3. cannot check for the 5000 result limit initially, so check it as we find results.\r\n//\t\t\ta. put results into an array and at the end of performQuery if arr.length > 5000 then return invalid\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"3646d78b1497b240d9c428e683b24c1b80d98d02","contentHash":"98ac12de6fae5d257b0bb7261a0deed68ce27b400f82e39831f30846ef4aa9a0"},"C:\\Users\\David\\Desktop\\project_team175\\src\\controller\\section.ts":{"path":"C:\\Users\\David\\Desktop\\project_team175\\src\\controller\\section.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":15,"column":8},"end":{"line":15,"column":43}},"2":{"start":{"line":16,"column":8},"end":{"line":16,"column":45}},"3":{"start":{"line":17,"column":8},"end":{"line":17,"column":47}},"4":{"start":{"line":18,"column":8},"end":{"line":18,"column":56}},"5":{"start":{"line":19,"column":8},"end":{"line":19,"column":48}},"6":{"start":{"line":20,"column":8},"end":{"line":20,"column":88}},"7":{"start":{"line":21,"column":8},"end":{"line":21,"column":43}},"8":{"start":{"line":22,"column":8},"end":{"line":22,"column":45}},"9":{"start":{"line":23,"column":8},"end":{"line":23,"column":45}},"10":{"start":{"line":24,"column":8},"end":{"line":24,"column":47}},"11":{"start":{"line":27,"column":0},"end":{"line":27,"column":26}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":14,"column":4},"end":{"line":14,"column":5}},"loc":{"start":{"line":14,"column":29},"end":{"line":25,"column":5}},"line":14}},"branchMap":{"0":{"loc":{"start":{"line":20,"column":20},"end":{"line":20,"column":87}},"type":"cond-expr","locations":[{"start":{"line":20,"column":56},"end":{"line":20,"column":60}},{"start":{"line":20,"column":63},"end":{"line":20,"column":87}}],"line":20}},"s":{"0":1,"1":452284,"2":452284,"3":452284,"4":452284,"5":452284,"6":452284,"7":452284,"8":452284,"9":452284,"10":452284,"11":1},"f":{"0":452284},"b":{"0":[172347,279937]},"inputSourceMap":{"version":3,"file":"C:/Users/David/Desktop/project_team175/src/controller/section.ts","sources":["C:/Users/David/Desktop/project_team175/src/controller/section.ts"],"names":[],"mappings":";;AAAA,MAAqB,OAAO;IACX,IAAI,CAAS;IACb,EAAE,CAAS;IACX,KAAK,CAAS;IACd,UAAU,CAAS;IACnB,IAAI,CAAS;IACb,IAAI,CAAS;IACb,GAAG,CAAS;IACZ,IAAI,CAAS;IACb,IAAI,CAAS;IACb,KAAK,CAAS;IAE9B,YAAY,WAAgB;QAC3B,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;QACnC,IAAI,CAAC,EAAE,GAAG,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QACrC,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QACvC,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QAChD,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QAExC,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAChF,IAAI,CAAC,GAAG,GAAG,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QACnC,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACrC,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACrC,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IACxC,CAAC;CACD;AAzBD,0BAyBC","sourcesContent":["export default class Section {\r\n\tpublic readonly uuid: string;\r\n\tpublic readonly id: string;\r\n\tpublic readonly title: string;\r\n\tpublic readonly instructor: string;\r\n\tpublic readonly dept: string;\r\n\tpublic readonly year: number;\r\n\tpublic readonly avg: number;\r\n\tpublic readonly pass: number;\r\n\tpublic readonly fail: number;\r\n\tpublic readonly audit: number;\r\n\r\n\tconstructor(sectionJSON: any) {\r\n\t\tthis.uuid = String(sectionJSON.id);\r\n\t\tthis.id = String(sectionJSON.Course);\r\n\t\tthis.title = String(sectionJSON.Title);\r\n\t\tthis.instructor = String(sectionJSON.Professor);\r\n\t\tthis.dept = String(sectionJSON.Subject);\r\n\t\t// Check if the section should be marked as occurring in 1900\r\n\t\tthis.year = sectionJSON.Section === \"overall\" ? 1900 : Number(sectionJSON.Year);\r\n\t\tthis.avg = Number(sectionJSON.Avg);\r\n\t\tthis.pass = Number(sectionJSON.Pass);\r\n\t\tthis.fail = Number(sectionJSON.Fail);\r\n\t\tthis.audit = Number(sectionJSON.Audit);\r\n\t}\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b20f5b83e7802ea6f823846ddc12b3d20634c3f6","contentHash":"2b06a366a13d366ea524f9d607b483e5c86bd2ed3e5a4f02a1665bbcfdd7a0e4"},"C:\\Users\\David\\Desktop\\project_team175\\src\\controller\\validator.ts":{"path":"C:\\Users\\David\\Desktop\\project_team175\\src\\controller\\validator.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":25},"end":{"line":3,"column":52}},"2":{"start":{"line":5,"column":20},"end":{"line":17,"column":5}},"3":{"start":{"line":18,"column":14},"end":{"line":18,"column":54}},"4":{"start":{"line":19,"column":14},"end":{"line":19,"column":59}},"5":{"start":{"line":21,"column":23},"end":{"line":21,"column":32}},"6":{"start":{"line":22,"column":8},"end":{"line":24,"column":9}},"7":{"start":{"line":23,"column":12},"end":{"line":23,"column":81}},"8":{"start":{"line":25,"column":8},"end":{"line":27,"column":9}},"9":{"start":{"line":26,"column":12},"end":{"line":26,"column":83}},"10":{"start":{"line":28,"column":27},"end":{"line":28,"column":68}},"11":{"start":{"line":29,"column":25},"end":{"line":29,"column":70}},"12":{"start":{"line":30,"column":8},"end":{"line":32,"column":9}},"13":{"start":{"line":31,"column":12},"end":{"line":31,"column":90}},"14":{"start":{"line":33,"column":18},"end":{"line":36,"column":9}},"15":{"start":{"line":37,"column":8},"end":{"line":37,"column":19}},"16":{"start":{"line":40,"column":20},"end":{"line":40,"column":45}},"17":{"start":{"line":41,"column":8},"end":{"line":43,"column":9}},"18":{"start":{"line":42,"column":12},"end":{"line":42,"column":71}},"19":{"start":{"line":44,"column":8},"end":{"line":46,"column":9}},"20":{"start":{"line":45,"column":12},"end":{"line":45,"column":69}},"21":{"start":{"line":47,"column":20},"end":{"line":47,"column":59}},"22":{"start":{"line":48,"column":8},"end":{"line":50,"column":9}},"23":{"start":{"line":49,"column":12},"end":{"line":49,"column":87}},"24":{"start":{"line":51,"column":8},"end":{"line":51,"column":21}},"25":{"start":{"line":54,"column":20},"end":{"line":54,"column":41}},"26":{"start":{"line":55,"column":8},"end":{"line":70,"column":9}},"27":{"start":{"line":57,"column":16},"end":{"line":57,"column":67}},"28":{"start":{"line":59,"column":16},"end":{"line":59,"column":66}},"29":{"start":{"line":61,"column":16},"end":{"line":61,"column":63}},"30":{"start":{"line":63,"column":16},"end":{"line":63,"column":59}},"31":{"start":{"line":67,"column":16},"end":{"line":67,"column":64}},"32":{"start":{"line":69,"column":16},"end":{"line":69,"column":75}},"33":{"start":{"line":73,"column":19},"end":{"line":73,"column":40}},"34":{"start":{"line":74,"column":24},"end":{"line":74,"column":35}},"35":{"start":{"line":75,"column":8},"end":{"line":75,"column":41}},"36":{"start":{"line":76,"column":25},"end":{"line":76,"column":40}},"37":{"start":{"line":77,"column":8},"end":{"line":79,"column":9}},"38":{"start":{"line":78,"column":12},"end":{"line":78,"column":73}},"39":{"start":{"line":80,"column":22},"end":{"line":80,"column":33}},"40":{"start":{"line":81,"column":23},"end":{"line":81,"column":34}},"41":{"start":{"line":82,"column":8},"end":{"line":84,"column":9}},"42":{"start":{"line":83,"column":12},"end":{"line":83,"column":69}},"43":{"start":{"line":85,"column":8},"end":{"line":87,"column":9}},"44":{"start":{"line":86,"column":12},"end":{"line":86,"column":69}},"45":{"start":{"line":88,"column":8},"end":{"line":88,"column":28}},"46":{"start":{"line":89,"column":8},"end":{"line":89,"column":20}},"47":{"start":{"line":92,"column":27},"end":{"line":92,"column":29}},"48":{"start":{"line":93,"column":8},"end":{"line":95,"column":9}},"49":{"start":{"line":94,"column":12},"end":{"line":94,"column":76}},"50":{"start":{"line":96,"column":8},"end":{"line":98,"column":9}},"51":{"start":{"line":97,"column":12},"end":{"line":97,"column":63}},"52":{"start":{"line":99,"column":8},"end":{"line":101,"column":9}},"53":{"start":{"line":99,"column":42},"end":{"line":99,"column":47}},"54":{"start":{"line":100,"column":12},"end":{"line":100,"column":24}},"55":{"start":{"line":102,"column":8},"end":{"line":102,"column":72}},"56":{"start":{"line":105,"column":21},"end":{"line":105,"column":42}},"57":{"start":{"line":106,"column":18},"end":{"line":106,"column":29}},"58":{"start":{"line":107,"column":25},"end":{"line":107,"column":40}},"59":{"start":{"line":108,"column":22},"end":{"line":108,"column":33}},"60":{"start":{"line":109,"column":23},"end":{"line":109,"column":34}},"61":{"start":{"line":110,"column":8},"end":{"line":112,"column":9}},"62":{"start":{"line":111,"column":12},"end":{"line":111,"column":73}},"63":{"start":{"line":113,"column":8},"end":{"line":115,"column":9}},"64":{"start":{"line":114,"column":12},"end":{"line":114,"column":70}},"65":{"start":{"line":116,"column":8},"end":{"line":130,"column":9}},"66":{"start":{"line":117,"column":12},"end":{"line":117,"column":76}},"67":{"start":{"line":120,"column":30},"end":{"line":120,"column":33}},"68":{"start":{"line":121,"column":12},"end":{"line":123,"column":13}},"69":{"start":{"line":122,"column":16},"end":{"line":122,"column":71}},"70":{"start":{"line":124,"column":12},"end":{"line":126,"column":13}},"71":{"start":{"line":125,"column":16},"end":{"line":125,"column":75}},"72":{"start":{"line":127,"column":12},"end":{"line":129,"column":13}},"73":{"start":{"line":128,"column":16},"end":{"line":128,"column":80}},"74":{"start":{"line":131,"column":8},"end":{"line":131,"column":28}},"75":{"start":{"line":132,"column":8},"end":{"line":132,"column":20}},"76":{"start":{"line":135,"column":8},"end":{"line":137,"column":9}},"77":{"start":{"line":136,"column":12},"end":{"line":136,"column":71}},"78":{"start":{"line":138,"column":8},"end":{"line":140,"column":9}},"79":{"start":{"line":139,"column":12},"end":{"line":139,"column":103}},"80":{"start":{"line":141,"column":8},"end":{"line":143,"column":9}},"81":{"start":{"line":142,"column":12},"end":{"line":142,"column":92}},"82":{"start":{"line":144,"column":26},"end":{"line":144,"column":59}},"83":{"start":{"line":145,"column":8},"end":{"line":156,"column":9}},"84":{"start":{"line":146,"column":29},"end":{"line":146,"column":43}},"85":{"start":{"line":147,"column":26},"end":{"line":147,"column":37}},"86":{"start":{"line":148,"column":26},"end":{"line":148,"column":37}},"87":{"start":{"line":149,"column":12},"end":{"line":151,"column":13}},"88":{"start":{"line":150,"column":16},"end":{"line":150,"column":77}},"89":{"start":{"line":152,"column":12},"end":{"line":154,"column":13}},"90":{"start":{"line":153,"column":16},"end":{"line":153,"column":73}},"91":{"start":{"line":155,"column":12},"end":{"line":155,"column":32}},"92":{"start":{"line":157,"column":8},"end":{"line":169,"column":9}},"93":{"start":{"line":158,"column":24},"end":{"line":158,"column":37}},"94":{"start":{"line":159,"column":29},"end":{"line":159,"column":43}},"95":{"start":{"line":160,"column":12},"end":{"line":162,"column":13}},"96":{"start":{"line":161,"column":16},"end":{"line":161,"column":77}},"97":{"start":{"line":163,"column":26},"end":{"line":163,"column":37}},"98":{"start":{"line":164,"column":26},"end":{"line":164,"column":37}},"99":{"start":{"line":165,"column":12},"end":{"line":167,"column":13}},"100":{"start":{"line":166,"column":16},"end":{"line":166,"column":76}},"101":{"start":{"line":168,"column":12},"end":{"line":168,"column":32}},"102":{"start":{"line":170,"column":8},"end":{"line":172,"column":9}},"103":{"start":{"line":171,"column":12},"end":{"line":171,"column":87}},"104":{"start":{"line":173,"column":8},"end":{"line":173,"column":20}},"105":{"start":{"line":176,"column":0},"end":{"line":176,"column":28}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":20,"column":4},"end":{"line":20,"column":5}},"loc":{"start":{"line":20,"column":25},"end":{"line":38,"column":5}},"line":20},"1":{"name":"(anonymous_1)","decl":{"start":{"line":39,"column":4},"end":{"line":39,"column":5}},"loc":{"start":{"line":39,"column":39},"end":{"line":52,"column":5}},"line":39},"2":{"name":"(anonymous_2)","decl":{"start":{"line":53,"column":4},"end":{"line":53,"column":5}},"loc":{"start":{"line":53,"column":35},"end":{"line":71,"column":5}},"line":53},"3":{"name":"(anonymous_3)","decl":{"start":{"line":72,"column":4},"end":{"line":72,"column":5}},"loc":{"start":{"line":72,"column":40},"end":{"line":90,"column":5}},"line":72},"4":{"name":"(anonymous_4)","decl":{"start":{"line":91,"column":4},"end":{"line":91,"column":5}},"loc":{"start":{"line":91,"column":44},"end":{"line":103,"column":5}},"line":91},"5":{"name":"(anonymous_5)","decl":{"start":{"line":99,"column":31},"end":{"line":99,"column":32}},"loc":{"start":{"line":99,"column":42},"end":{"line":99,"column":47}},"line":99},"6":{"name":"(anonymous_6)","decl":{"start":{"line":104,"column":4},"end":{"line":104,"column":5}},"loc":{"start":{"line":104,"column":32},"end":{"line":133,"column":5}},"line":104},"7":{"name":"(anonymous_7)","decl":{"start":{"line":134,"column":4},"end":{"line":134,"column":5}},"loc":{"start":{"line":134,"column":39},"end":{"line":174,"column":5}},"line":134}},"branchMap":{"0":{"loc":{"start":{"line":22,"column":8},"end":{"line":24,"column":9}},"type":"if","locations":[{"start":{"line":22,"column":8},"end":{"line":24,"column":9}},{"start":{"line":22,"column":8},"end":{"line":24,"column":9}}],"line":22},"1":{"loc":{"start":{"line":25,"column":8},"end":{"line":27,"column":9}},"type":"if","locations":[{"start":{"line":25,"column":8},"end":{"line":27,"column":9}},{"start":{"line":25,"column":8},"end":{"line":27,"column":9}}],"line":25},"2":{"loc":{"start":{"line":30,"column":8},"end":{"line":32,"column":9}},"type":"if","locations":[{"start":{"line":30,"column":8},"end":{"line":32,"column":9}},{"start":{"line":30,"column":8},"end":{"line":32,"column":9}}],"line":30},"3":{"loc":{"start":{"line":34,"column":19},"end":{"line":34,"column":41}},"type":"binary-expr","locations":[{"start":{"line":34,"column":19},"end":{"line":34,"column":29}},{"start":{"line":34,"column":33},"end":{"line":34,"column":41}}],"line":34},"4":{"loc":{"start":{"line":41,"column":8},"end":{"line":43,"column":9}},"type":"if","locations":[{"start":{"line":41,"column":8},"end":{"line":43,"column":9}},{"start":{"line":41,"column":8},"end":{"line":43,"column":9}}],"line":41},"5":{"loc":{"start":{"line":44,"column":8},"end":{"line":46,"column":9}},"type":"if","locations":[{"start":{"line":44,"column":8},"end":{"line":46,"column":9}},{"start":{"line":44,"column":8},"end":{"line":46,"column":9}}],"line":44},"6":{"loc":{"start":{"line":48,"column":8},"end":{"line":50,"column":9}},"type":"if","locations":[{"start":{"line":48,"column":8},"end":{"line":50,"column":9}},{"start":{"line":48,"column":8},"end":{"line":50,"column":9}}],"line":48},"7":{"loc":{"start":{"line":55,"column":8},"end":{"line":70,"column":9}},"type":"switch","locations":[{"start":{"line":56,"column":12},"end":{"line":57,"column":67}},{"start":{"line":58,"column":12},"end":{"line":59,"column":66}},{"start":{"line":60,"column":12},"end":{"line":61,"column":63}},{"start":{"line":62,"column":12},"end":{"line":63,"column":59}},{"start":{"line":64,"column":12},"end":{"line":64,"column":22}},{"start":{"line":65,"column":12},"end":{"line":65,"column":22}},{"start":{"line":66,"column":12},"end":{"line":67,"column":64}},{"start":{"line":68,"column":12},"end":{"line":69,"column":75}}],"line":55},"8":{"loc":{"start":{"line":77,"column":8},"end":{"line":79,"column":9}},"type":"if","locations":[{"start":{"line":77,"column":8},"end":{"line":79,"column":9}},{"start":{"line":77,"column":8},"end":{"line":79,"column":9}}],"line":77},"9":{"loc":{"start":{"line":82,"column":8},"end":{"line":84,"column":9}},"type":"if","locations":[{"start":{"line":82,"column":8},"end":{"line":84,"column":9}},{"start":{"line":82,"column":8},"end":{"line":84,"column":9}}],"line":82},"10":{"loc":{"start":{"line":85,"column":8},"end":{"line":87,"column":9}},"type":"if","locations":[{"start":{"line":85,"column":8},"end":{"line":87,"column":9}},{"start":{"line":85,"column":8},"end":{"line":87,"column":9}}],"line":85},"11":{"loc":{"start":{"line":93,"column":8},"end":{"line":95,"column":9}},"type":"if","locations":[{"start":{"line":93,"column":8},"end":{"line":95,"column":9}},{"start":{"line":93,"column":8},"end":{"line":95,"column":9}}],"line":93},"12":{"loc":{"start":{"line":99,"column":8},"end":{"line":101,"column":9}},"type":"if","locations":[{"start":{"line":99,"column":8},"end":{"line":101,"column":9}},{"start":{"line":99,"column":8},"end":{"line":101,"column":9}}],"line":99},"13":{"loc":{"start":{"line":110,"column":8},"end":{"line":112,"column":9}},"type":"if","locations":[{"start":{"line":110,"column":8},"end":{"line":112,"column":9}},{"start":{"line":110,"column":8},"end":{"line":112,"column":9}}],"line":110},"14":{"loc":{"start":{"line":113,"column":8},"end":{"line":115,"column":9}},"type":"if","locations":[{"start":{"line":113,"column":8},"end":{"line":115,"column":9}},{"start":{"line":113,"column":8},"end":{"line":115,"column":9}}],"line":113},"15":{"loc":{"start":{"line":116,"column":8},"end":{"line":130,"column":9}},"type":"if","locations":[{"start":{"line":116,"column":8},"end":{"line":130,"column":9}},{"start":{"line":116,"column":8},"end":{"line":130,"column":9}}],"line":116},"16":{"loc":{"start":{"line":121,"column":12},"end":{"line":123,"column":13}},"type":"if","locations":[{"start":{"line":121,"column":12},"end":{"line":123,"column":13}},{"start":{"line":121,"column":12},"end":{"line":123,"column":13}}],"line":121},"17":{"loc":{"start":{"line":124,"column":12},"end":{"line":126,"column":13}},"type":"if","locations":[{"start":{"line":124,"column":12},"end":{"line":126,"column":13}},{"start":{"line":124,"column":12},"end":{"line":126,"column":13}}],"line":124},"18":{"loc":{"start":{"line":127,"column":12},"end":{"line":129,"column":13}},"type":"if","locations":[{"start":{"line":127,"column":12},"end":{"line":129,"column":13}},{"start":{"line":127,"column":12},"end":{"line":129,"column":13}}],"line":127},"19":{"loc":{"start":{"line":135,"column":8},"end":{"line":137,"column":9}},"type":"if","locations":[{"start":{"line":135,"column":8},"end":{"line":137,"column":9}},{"start":{"line":135,"column":8},"end":{"line":137,"column":9}}],"line":135},"20":{"loc":{"start":{"line":135,"column":12},"end":{"line":135,"column":63}},"type":"binary-expr","locations":[{"start":{"line":135,"column":12},"end":{"line":135,"column":28}},{"start":{"line":135,"column":32},"end":{"line":135,"column":63}}],"line":135},"21":{"loc":{"start":{"line":138,"column":8},"end":{"line":140,"column":9}},"type":"if","locations":[{"start":{"line":138,"column":8},"end":{"line":140,"column":9}},{"start":{"line":138,"column":8},"end":{"line":140,"column":9}}],"line":138},"22":{"loc":{"start":{"line":138,"column":12},"end":{"line":138,"column":102}},"type":"binary-expr","locations":[{"start":{"line":138,"column":12},"end":{"line":138,"column":35}},{"start":{"line":138,"column":39},"end":{"line":138,"column":70}},{"start":{"line":138,"column":74},"end":{"line":138,"column":102}}],"line":138},"23":{"loc":{"start":{"line":141,"column":8},"end":{"line":143,"column":9}},"type":"if","locations":[{"start":{"line":141,"column":8},"end":{"line":143,"column":9}},{"start":{"line":141,"column":8},"end":{"line":143,"column":9}}],"line":141},"24":{"loc":{"start":{"line":141,"column":12},"end":{"line":141,"column":69}},"type":"binary-expr","locations":[{"start":{"line":141,"column":12},"end":{"line":141,"column":25}},{"start":{"line":141,"column":29},"end":{"line":141,"column":69}}],"line":141},"25":{"loc":{"start":{"line":149,"column":12},"end":{"line":151,"column":13}},"type":"if","locations":[{"start":{"line":149,"column":12},"end":{"line":151,"column":13}},{"start":{"line":149,"column":12},"end":{"line":151,"column":13}}],"line":149},"26":{"loc":{"start":{"line":152,"column":12},"end":{"line":154,"column":13}},"type":"if","locations":[{"start":{"line":152,"column":12},"end":{"line":154,"column":13}},{"start":{"line":152,"column":12},"end":{"line":154,"column":13}}],"line":152},"27":{"loc":{"start":{"line":157,"column":8},"end":{"line":169,"column":9}},"type":"if","locations":[{"start":{"line":157,"column":8},"end":{"line":169,"column":9}},{"start":{"line":157,"column":8},"end":{"line":169,"column":9}}],"line":157},"28":{"loc":{"start":{"line":160,"column":12},"end":{"line":162,"column":13}},"type":"if","locations":[{"start":{"line":160,"column":12},"end":{"line":162,"column":13}},{"start":{"line":160,"column":12},"end":{"line":162,"column":13}}],"line":160},"29":{"loc":{"start":{"line":165,"column":12},"end":{"line":167,"column":13}},"type":"if","locations":[{"start":{"line":165,"column":12},"end":{"line":167,"column":13}},{"start":{"line":165,"column":12},"end":{"line":167,"column":13}}],"line":165},"30":{"loc":{"start":{"line":170,"column":8},"end":{"line":172,"column":9}},"type":"if","locations":[{"start":{"line":170,"column":8},"end":{"line":172,"column":9}},{"start":{"line":170,"column":8},"end":{"line":172,"column":9}}],"line":170}},"s":{"0":1,"1":1,"2":39,"3":39,"4":39,"5":39,"6":39,"7":0,"8":39,"9":1,"10":38,"11":31,"12":29,"13":0,"14":29,"15":29,"16":38,"17":38,"18":1,"19":37,"20":0,"21":37,"22":31,"23":0,"24":31,"25":67,"26":67,"27":7,"28":4,"29":2,"30":25,"31":29,"32":0,"33":29,"34":29,"35":29,"36":29,"37":29,"38":1,"39":28,"40":28,"41":28,"42":0,"43":28,"44":1,"45":27,"46":27,"47":11,"48":11,"49":1,"50":10,"51":28,"52":10,"53":28,"54":10,"55":0,"56":25,"57":25,"58":25,"59":25,"60":25,"61":25,"62":1,"63":24,"64":1,"65":23,"66":1,"67":22,"68":22,"69":4,"70":22,"71":3,"72":22,"73":0,"74":22,"75":22,"76":31,"77":0,"78":31,"79":0,"80":31,"81":1,"82":30,"83":30,"84":50,"85":50,"86":50,"87":50,"88":0,"89":50,"90":0,"91":50,"92":30,"93":30,"94":30,"95":30,"96":0,"97":30,"98":30,"99":30,"100":0,"101":30,"102":30,"103":1,"104":29,"105":1},"f":{"0":39,"1":38,"2":67,"3":29,"4":11,"5":28,"6":25,"7":31},"b":{"0":[0,39],"1":[1,38],"2":[0,29],"3":[29,29],"4":[1,37],"5":[0,37],"6":[0,31],"7":[7,4,2,25,3,19,29,0],"8":[1,28],"9":[0,28],"10":[1,27],"11":[1,10],"12":[10,0],"13":[1,24],"14":[1,23],"15":[1,22],"16":[4,18],"17":[3,19],"18":[0,22],"19":[0,31],"20":[31,31],"21":[0,31],"22":[31,31,31],"23":[1,30],"24":[31,31],"25":[0,50],"26":[0,50],"27":[30,0],"28":[0,30],"29":[0,30],"30":[1,29]},"inputSourceMap":{"version":3,"file":"C:/Users/David/Desktop/project_team175/src/controller/validator.ts","sources":["C:/Users/David/Desktop/project_team175/src/controller/validator.ts"],"names":[],"mappings":"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","sourcesContent":["import {InsightError} from \"./IInsightFacade\";\r\nimport {isArgumentsObject} from \"node:util/types\";\r\n\r\nexport default class Validator {\r\n\tprivate validKeywords: string[] = [\r\n\t\t\"WHERE\",\r\n\t\t\"OPTIONS\",\r\n\t\t\"COLUMNS\",\r\n\t\t\"ORDER\",\r\n\t\t\"IS\",\r\n\t\t\"NOT\",\r\n\t\t\"AND\",\r\n\t\t\"OR\",\r\n\t\t\"LT\",\r\n\t\t\"GT\",\r\n\t\t\"EQ\",\r\n\t];\r\n\r\n\tprivate mFields: string[] = [\"year\", \"avg\", \"pass\", \"fail\", \"audit\"];\r\n\tprivate sFields: string[] = [\"uuid\", \"id\", \"title\", \"instructor\", \"dept\"];\r\n\r\n\tpublic validateQuery(query: any): any {\r\n\t\t// Initialize a dictionary for tracking dataset references\r\n\t\tlet dbRefSet: Set<string> = new Set<string>();\r\n\r\n\t\t// Ensure the query contains both WHERE and OPTIONS clauses\r\n\t\tif (!(\"WHERE\" in query)) {\r\n\t\t\tthrow new InsightError(\"Query must contain WHERE.\");\r\n\t\t}\r\n\r\n\t\tif (!(\"OPTIONS\" in query)) {\r\n\t\t\tthrow new InsightError(\"Query must contain OPTIONS.\");\r\n\t\t}\r\n\r\n\t\t// Validate WHERE and OPTIONS clauses\r\n\t\tconst validWhere = this.validateWhere(query.WHERE, dbRefSet);\r\n\t\tconst validOpt = this.validateOptions(query.OPTIONS, dbRefSet);\r\n\r\n\t\tif (dbRefSet.size === 0) {\r\n\t\t\tthrow new InsightError(\"No dataset specified in the query.\");\r\n\t\t}\r\n\r\n\t\tlet res = {\r\n\t\t\tvalid: validWhere && validOpt,\r\n\t\t\tid: [...dbRefSet][0],\r\n\t\t};\r\n\t\treturn res;\r\n\t}\r\n\r\n\tpublic validateWhere(currQuery: any, dbRefSet: Set<string>): boolean {\r\n\t\t// get filter key word\r\n\t\tconst key = Object.keys(currQuery)[0];\r\n\r\n\t\t// check if it's a valid keyword\r\n\t\tif (!this.validKeywords.includes(key)) {\r\n\t\t\tthrow new InsightError(\"Invalid keyword\");\r\n\t\t}\r\n\r\n\t\tif (Object.keys(currQuery).length > 1) {\r\n\t\t\tthrow new InsightError(\"invalid WHERE\");\r\n\t\t}\r\n\r\n\t\t// WHERE only has 1 nested obj\r\n\t\t// just call appropriate validator for the nested obj\r\n\t\tlet valid: boolean = this.callValidator(currQuery, dbRefSet);\r\n\t\tif (dbRefSet.size > 1) {\r\n\t\t\tthrow new InsightError(\"References to multiple Datasets\");\r\n\t\t}\r\n\t\treturn valid;\r\n\t}\r\n\r\n\tpublic callValidator(query: any, dbRefSet: Set<string>): boolean {\r\n\t\tconst key = Object.keys(query)[0];\r\n\t\tswitch (key) {\r\n\t\t\t// these 2 take lists of filters\r\n\t\t\tcase \"AND\":\r\n\t\t\t\treturn this.validateListQuery(query.AND, dbRefSet);\r\n\t\t\tcase \"OR\":\r\n\t\t\t\treturn this.validateListQuery(query.OR, dbRefSet);\r\n\r\n\t\t\t// this can have nested filters\r\n\t\t\tcase \"NOT\":\r\n\t\t\t\treturn this.callValidator(query.NOT, dbRefSet);\r\n\r\n\t\t\t// these ones can't have nested filters (base case)\r\n\t\t\tcase \"IS\":\r\n\t\t\t\treturn this.validateIs(query.IS, dbRefSet);\r\n\t\t\tcase \"LT\":\r\n\t\t\tcase \"GT\":\r\n\t\t\tcase \"EQ\":\r\n\t\t\t\treturn this.validateInequality(query, dbRefSet);\r\n\t\t\tdefault:\r\n\t\t\t\t// can't have string just on it's own in a where\r\n\t\t\t\t// must be nested inside one of the above filters\r\n\t\t\t\tthrow new InsightError(\"Invalid keyword\");\r\n\t\t}\r\n\t}\r\n\r\n\tprivate validateInequality(query: any, dbRefSet: Set<string>) {\r\n\t\tlet mKey = Object.keys(query)[0];\r\n\t\tlet nestedObj = query[mKey];\r\n\r\n\t\tmKey = Object.keys(nestedObj)[0];\r\n\r\n\t\tconst keyParts: string[] = mKey.split(\"_\");\r\n\r\n\t\t// if length > 2 then underscore must be in idStr\r\n\t\tif (keyParts.length > 2) {\r\n\t\t\tthrow new InsightError(\"Invalid ID String\");\r\n\t\t}\r\n\r\n\t\t// get mKey components\r\n\t\tconst idStr = keyParts[0];\r\n\t\tconst mField = keyParts[1];\r\n\r\n\t\t// check if mfield is valid\r\n\t\tif (!this.mFields.includes(mField)) {\r\n\t\t\tthrow new InsightError(\"invalid field\");\r\n\t\t}\r\n\r\n\t\tif (!(typeof nestedObj[mKey] === \"number\")) {\r\n\t\t\tthrow new InsightError(\"invalid input\");\r\n\t\t}\r\n\r\n\t\tdbRefSet.add(idStr);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tpublic validateListQuery(queryArray: any, dbRefSet: Set<string>): boolean {\r\n\t\t// check if value is a list\r\n\t\tlet validQueries: boolean[] = [];\r\n\t\tif (!Array.isArray(queryArray)) {\r\n\t\t\tthrow new InsightError(\"Invalid query string\");\r\n\t\t}\r\n\r\n\t\t// for each query in queryArrays\r\n\t\t// call validator\r\n\t\tfor (const q of queryArray) {\r\n\t\t\tvalidQueries.push(this.callValidator(q, dbRefSet));\r\n\t\t}\r\n\r\n\t\tif (validQueries.every((valid) => valid)) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tthrow new InsightError(\"Invalid query string\");\r\n\t}\r\n\r\n\tpublic validateIs(query: any, dbRefSet: Set<string>): boolean {\r\n\t\tconst sKey = Object.keys(query)[0];\r\n\t\tlet val = query[sKey];\r\n\r\n\t\tconst keyParts: string[] = sKey.split(\"_\");\r\n\r\n\t\t// get sKey components\r\n\t\tconst idStr = keyParts[0];\r\n\t\tconst sField = keyParts[1];\r\n\r\n\t\t// if length > 2 then underscore must be in idStr\r\n\t\tif (keyParts.length > 2) {\r\n\t\t\tthrow new InsightError(\"Invalid ID String\");\r\n\t\t}\r\n\r\n\t\t// check if sField is valid (sField is inside valid sField)\r\n\t\tif (!this.sFields.includes(sField)) {\r\n\t\t\tthrow new InsightError(\"invalid sField\");\r\n\t\t}\r\n\r\n\t\t// check if val is a string\r\n\t\t// need to check for wild cards too\r\n\t\tif (typeof val !== \"string\") {\r\n\t\t\tthrow new InsightError(\"Invalid query string\");\r\n\t\t} else {\r\n\t\t\t// check if it has wildcards\r\n\t\t\tlet inputString = val;\r\n\t\t\tif (inputString[0] === \"*\") {\r\n\t\t\t\tinputString = inputString.slice(1, inputString.length);\r\n\t\t\t}\r\n\r\n\t\t\tif (inputString[inputString.length - 1] === \"*\") {\r\n\t\t\t\tinputString = inputString.slice(0, inputString.length - 1);\r\n\t\t\t}\r\n\r\n\t\t\t// input string has * then invalid\r\n\t\t\tif (inputString.includes(\"*\")) {\r\n\t\t\t\tthrow new InsightError(\"invalid inputs tring\");\r\n\t\t\t}\r\n\t\t}\r\n\t\t// update dbRefSet with the dataset this is referencing (id string)\r\n\t\tdbRefSet.add(idStr);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tpublic validateOptions(options: any, dbRefSet: Set<string>): boolean {\r\n\t\t// Check for required components in OPTIONS\r\n\t\tif (!options.COLUMNS || !Array.isArray(options.COLUMNS)) {\r\n\t\t\tthrow new InsightError(\"Invalid COLUMNS\");\r\n\t\t}\r\n\t\tif (!(\"COLUMNS\" in options) || !Array.isArray(options.COLUMNS) || options.COLUMNS.length === 0) {\r\n\t\t\tthrow new InsightError(\"OPTIONS must contain a non-empty COLUMNS array.\");\r\n\t\t}\r\n\r\n\t\t// Optionally, validate ORDER if present\r\n\t\tif (options.ORDER && !options.COLUMNS.includes(options.ORDER)) {\r\n\t\t\tthrow new InsightError(\"references in ORDER missing in WHERE\");\r\n\t\t}\r\n\r\n\t\t// check all fields in columns\r\n\t\tlet validFields = this.sFields.concat(this.mFields);\r\n\t\tfor (let key of options.COLUMNS) {\r\n\t\t\tconst keyParts: string[] = key.split(\"_\");\r\n\r\n\t\t\t// get key components\r\n\t\t\tconst idStr = keyParts[0];\r\n\t\t\tconst field = keyParts[1];\r\n\r\n\t\t\t// if length > 2 then underscore must be in idStr\r\n\t\t\tif (keyParts.length > 2) {\r\n\t\t\t\tthrow new InsightError(\"Invalid ID String\");\r\n\t\t\t}\r\n\r\n\t\t\t// check if field is a valid field\r\n\t\t\tif (!validFields.includes(field)) {\r\n\t\t\t\tthrow new InsightError(\"Invalid field\");\r\n\t\t\t}\r\n\r\n\t\t\tdbRefSet.add(idStr);\r\n\t\t}\r\n\r\n\t\t// check key in ORDER\r\n\t\tif (options.ORDER) {\r\n\t\t\tconst key = options.ORDER;\r\n\t\t\tconst keyParts: string[] = key.split(\"_\");\r\n\r\n\t\t\t// if length > 2 then underscore must be in idStr\r\n\t\t\tif (keyParts.length > 2) {\r\n\t\t\t\tthrow new InsightError(\"Invalid ID String\");\r\n\t\t\t}\r\n\r\n\t\t\t// get sKey components\r\n\t\t\tconst idStr = keyParts[0];\r\n\t\t\tconst field = keyParts[1];\r\n\r\n\t\t\t// check if field is a valid field\r\n\t\t\tif (!validFields.includes(field)) {\r\n\t\t\t\tthrow new InsightError(\"Invalid ID field\");\r\n\t\t\t}\r\n\r\n\t\t\tdbRefSet.add(idStr);\r\n\t\t}\r\n\t\tif (dbRefSet.size > 1) {\r\n\t\t\tthrow new InsightError(\"References to multiple Datasets\");\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"72e691173873e7363379ee570494c5b518f826ea","contentHash":"124967ed2468484fb8133b7db2fe3bbd3698a79afc68d59d11f8e064d15e3d04"},"C:\\Users\\David\\Desktop\\project_team175\\src\\controller\\filter.ts":{"path":"C:\\Users\\David\\Desktop\\project_team175\\src\\controller\\filter.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":25},"end":{"line":3,"column":52}},"2":{"start":{"line":6,"column":8},"end":{"line":8,"column":9}},"3":{"start":{"line":7,"column":12},"end":{"line":7,"column":27}},"4":{"start":{"line":9,"column":20},"end":{"line":9,"column":57}},"5":{"start":{"line":10,"column":8},"end":{"line":12,"column":9}},"6":{"start":{"line":11,"column":12},"end":{"line":11,"column":81}},"7":{"start":{"line":13,"column":8},"end":{"line":13,"column":19}},"8":{"start":{"line":16,"column":20},"end":{"line":16,"column":41}},"9":{"start":{"line":17,"column":8},"end":{"line":34,"column":9}},"10":{"start":{"line":19,"column":16},"end":{"line":19,"column":71}},"11":{"start":{"line":21,"column":16},"end":{"line":21,"column":69}},"12":{"start":{"line":23,"column":43},"end":{"line":23,"column":78}},"13":{"start":{"line":24,"column":16},"end":{"line":24,"column":90}},"14":{"start":{"line":24,"column":51},"end":{"line":24,"column":88}},"15":{"start":{"line":27,"column":16},"end":{"line":27,"column":56}},"16":{"start":{"line":31,"column":16},"end":{"line":31,"column":61}},"17":{"start":{"line":33,"column":16},"end":{"line":33,"column":26}},"18":{"start":{"line":37,"column":8},"end":{"line":48,"column":9}},"19":{"start":{"line":38,"column":12},"end":{"line":40,"column":24}},"20":{"start":{"line":39,"column":16},"end":{"line":39,"column":97}},"21":{"start":{"line":39,"column":47},"end":{"line":39,"column":95}},"22":{"start":{"line":42,"column":13},"end":{"line":48,"column":9}},"23":{"start":{"line":43,"column":25},"end":{"line":43,"column":34}},"24":{"start":{"line":44,"column":12},"end":{"line":46,"column":15}},"25":{"start":{"line":45,"column":16},"end":{"line":45,"column":94}},"26":{"start":{"line":45,"column":73},"end":{"line":45,"column":92}},"27":{"start":{"line":47,"column":12},"end":{"line":47,"column":38}},"28":{"start":{"line":49,"column":8},"end":{"line":49,"column":18}},"29":{"start":{"line":52,"column":20},"end":{"line":52,"column":41}},"30":{"start":{"line":53,"column":22},"end":{"line":53,"column":32}},"31":{"start":{"line":54,"column":22},"end":{"line":54,"column":36}},"32":{"start":{"line":55,"column":22},"end":{"line":55,"column":30}},"33":{"start":{"line":56,"column":24},"end":{"line":56,"column":50}},"34":{"start":{"line":57,"column":22},"end":{"line":57,"column":53}},"35":{"start":{"line":58,"column":18},"end":{"line":61,"column":10}},"36":{"start":{"line":59,"column":33},"end":{"line":59,"column":53}},"37":{"start":{"line":60,"column":12},"end":{"line":60,"column":80}},"38":{"start":{"line":62,"column":8},"end":{"line":62,"column":19}},"39":{"start":{"line":65,"column":25},"end":{"line":65,"column":46}},"40":{"start":{"line":66,"column":26},"end":{"line":66,"column":41}},"41":{"start":{"line":67,"column":21},"end":{"line":67,"column":46}},"42":{"start":{"line":68,"column":25},"end":{"line":68,"column":40}},"43":{"start":{"line":69,"column":22},"end":{"line":69,"column":33}},"44":{"start":{"line":70,"column":22},"end":{"line":70,"column":37}},"45":{"start":{"line":71,"column":18},"end":{"line":82,"column":10}},"46":{"start":{"line":72,"column":12},"end":{"line":81,"column":13}},"47":{"start":{"line":74,"column":20},"end":{"line":74,"column":56}},"48":{"start":{"line":76,"column":20},"end":{"line":76,"column":56}},"49":{"start":{"line":78,"column":20},"end":{"line":78,"column":58}},"50":{"start":{"line":80,"column":20},"end":{"line":80,"column":33}},"51":{"start":{"line":83,"column":8},"end":{"line":83,"column":19}},"52":{"start":{"line":86,"column":22},"end":{"line":86,"column":47}},"53":{"start":{"line":87,"column":22},"end":{"line":87,"column":38}},"54":{"start":{"line":88,"column":8},"end":{"line":101,"column":11}},"55":{"start":{"line":89,"column":12},"end":{"line":100,"column":13}},"56":{"start":{"line":91,"column":20},"end":{"line":91,"column":50}},"57":{"start":{"line":93,"column":20},"end":{"line":93,"column":50}},"58":{"start":{"line":95,"column":20},"end":{"line":95,"column":52}},"59":{"start":{"line":97,"column":20},"end":{"line":97,"column":94}},"60":{"start":{"line":99,"column":20},"end":{"line":99,"column":32}},"61":{"start":{"line":104,"column":0},"end":{"line":104,"column":25}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":4},"end":{"line":5,"column":5}},"loc":{"start":{"line":5,"column":46},"end":{"line":14,"column":5}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":15,"column":4},"end":{"line":15,"column":5}},"loc":{"start":{"line":15,"column":31},"end":{"line":35,"column":5}},"line":15},"2":{"name":"(anonymous_2)","decl":{"start":{"line":24,"column":38},"end":{"line":24,"column":39}},"loc":{"start":{"line":24,"column":51},"end":{"line":24,"column":88}},"line":24},"3":{"name":"(anonymous_3)","decl":{"start":{"line":36,"column":4},"end":{"line":36,"column":5}},"loc":{"start":{"line":36,"column":51},"end":{"line":50,"column":5}},"line":36},"4":{"name":"(anonymous_4)","decl":{"start":{"line":38,"column":37},"end":{"line":38,"column":38}},"loc":{"start":{"line":38,"column":57},"end":{"line":40,"column":13}},"line":38},"5":{"name":"(anonymous_5)","decl":{"start":{"line":39,"column":34},"end":{"line":39,"column":35}},"loc":{"start":{"line":39,"column":47},"end":{"line":39,"column":95}},"line":39},"6":{"name":"(anonymous_6)","decl":{"start":{"line":44,"column":31},"end":{"line":44,"column":32}},"loc":{"start":{"line":44,"column":46},"end":{"line":46,"column":13}},"line":44},"7":{"name":"(anonymous_7)","decl":{"start":{"line":45,"column":60},"end":{"line":45,"column":61}},"loc":{"start":{"line":45,"column":73},"end":{"line":45,"column":92}},"line":45},"8":{"name":"(anonymous_8)","decl":{"start":{"line":51,"column":4},"end":{"line":51,"column":5}},"loc":{"start":{"line":51,"column":29},"end":{"line":63,"column":5}},"line":51},"9":{"name":"(anonymous_9)","decl":{"start":{"line":58,"column":33},"end":{"line":58,"column":34}},"loc":{"start":{"line":58,"column":46},"end":{"line":61,"column":9}},"line":58},"10":{"name":"(anonymous_10)","decl":{"start":{"line":64,"column":4},"end":{"line":64,"column":5}},"loc":{"start":{"line":64,"column":37},"end":{"line":84,"column":5}},"line":64},"11":{"name":"(anonymous_11)","decl":{"start":{"line":71,"column":33},"end":{"line":71,"column":34}},"loc":{"start":{"line":71,"column":46},"end":{"line":82,"column":9}},"line":71},"12":{"name":"(anonymous_12)","decl":{"start":{"line":85,"column":4},"end":{"line":85,"column":5}},"loc":{"start":{"line":85,"column":61},"end":{"line":102,"column":5}},"line":85},"13":{"name":"(anonymous_13)","decl":{"start":{"line":88,"column":30},"end":{"line":88,"column":31}},"loc":{"start":{"line":88,"column":43},"end":{"line":101,"column":9}},"line":88}},"branchMap":{"0":{"loc":{"start":{"line":6,"column":8},"end":{"line":8,"column":9}},"type":"if","locations":[{"start":{"line":6,"column":8},"end":{"line":8,"column":9}},{"start":{"line":6,"column":8},"end":{"line":8,"column":9}}],"line":6},"1":{"loc":{"start":{"line":10,"column":8},"end":{"line":12,"column":9}},"type":"if","locations":[{"start":{"line":10,"column":8},"end":{"line":12,"column":9}},{"start":{"line":10,"column":8},"end":{"line":12,"column":9}}],"line":10},"2":{"loc":{"start":{"line":17,"column":8},"end":{"line":34,"column":9}},"type":"switch","locations":[{"start":{"line":18,"column":12},"end":{"line":19,"column":71}},{"start":{"line":20,"column":12},"end":{"line":21,"column":69}},{"start":{"line":22,"column":12},"end":{"line":25,"column":13}},{"start":{"line":26,"column":12},"end":{"line":27,"column":56}},{"start":{"line":28,"column":12},"end":{"line":28,"column":22}},{"start":{"line":29,"column":12},"end":{"line":29,"column":22}},{"start":{"line":30,"column":12},"end":{"line":31,"column":61}},{"start":{"line":32,"column":12},"end":{"line":33,"column":26}}],"line":17},"3":{"loc":{"start":{"line":37,"column":8},"end":{"line":48,"column":9}},"type":"if","locations":[{"start":{"line":37,"column":8},"end":{"line":48,"column":9}},{"start":{"line":37,"column":8},"end":{"line":48,"column":9}}],"line":37},"4":{"loc":{"start":{"line":42,"column":13},"end":{"line":48,"column":9}},"type":"if","locations":[{"start":{"line":42,"column":13},"end":{"line":48,"column":9}},{"start":{"line":42,"column":13},"end":{"line":48,"column":9}}],"line":42},"5":{"loc":{"start":{"line":60,"column":19},"end":{"line":60,"column":79}},"type":"binary-expr","locations":[{"start":{"line":60,"column":19},"end":{"line":60,"column":51}},{"start":{"line":60,"column":55},"end":{"line":60,"column":79}}],"line":60},"6":{"loc":{"start":{"line":72,"column":12},"end":{"line":81,"column":13}},"type":"switch","locations":[{"start":{"line":73,"column":16},"end":{"line":74,"column":56}},{"start":{"line":75,"column":16},"end":{"line":76,"column":56}},{"start":{"line":77,"column":16},"end":{"line":78,"column":58}},{"start":{"line":79,"column":16},"end":{"line":80,"column":33}}],"line":72},"7":{"loc":{"start":{"line":89,"column":12},"end":{"line":100,"column":13}},"type":"switch","locations":[{"start":{"line":90,"column":16},"end":{"line":91,"column":50}},{"start":{"line":92,"column":16},"end":{"line":93,"column":50}},{"start":{"line":94,"column":16},"end":{"line":95,"column":52}},{"start":{"line":96,"column":16},"end":{"line":97,"column":94}},{"start":{"line":98,"column":16},"end":{"line":99,"column":32}}],"line":89}},"s":{"0":1,"1":1,"2":29,"3":0,"4":29,"5":29,"6":1,"7":28,"8":394050,"9":394050,"10":6,"11":4,"12":2,"13":2,"14":129224,"15":70953,"16":323085,"17":0,"18":10,"19":6,"20":20,"21":394011,"22":4,"23":4,"24":4,"25":8,"26":249,"27":4,"28":0,"29":70953,"30":70953,"31":70953,"32":70953,"33":70953,"34":70953,"35":70953,"36":781674,"37":781674,"38":70953,"39":323085,"40":323085,"41":323085,"42":323085,"43":323085,"44":323085,"45":323085,"46":1356861,"47":775344,"48":193836,"49":387681,"50":0,"51":323085,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":1},"f":{"0":29,"1":394050,"2":129224,"3":10,"4":20,"5":394011,"6":8,"7":249,"8":70953,"9":781674,"10":323085,"11":1356861,"12":0,"13":0},"b":{"0":[0,29],"1":[1,28],"2":[6,4,2,70953,3,323070,323085,0],"3":[6,4],"4":[4,0],"5":[781674,781674],"6":[775344,193836,387681,0],"7":[0,0,0,0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/David/Desktop/project_team175/src/controller/filter.ts","sources":["C:/Users/David/Desktop/project_team175/src/controller/filter.ts"],"names":[],"mappings":"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","sourcesContent":["import Section from \"./section\";\r\nimport {InsightError, InsightResult} from \"./IInsightFacade\";\r\n\r\nexport default class Filter {\r\n\tpublic filterByWhereClause(dataset: Section[], whereClause: any): Section[] {\r\n\t\t// Explicit typing for operator and conditions helps with code clarity and type checking\r\n\t\t// MADE ESLINT SUPRESSIONS\r\n\t\tif (Object.keys(whereClause).length === 0) {\r\n\t\t\treturn dataset;\r\n\t\t}\r\n\t\tconst res = this.callFilter(whereClause, dataset);\r\n\t\tif (res.length > 5000) {\r\n\t\t\tthrow new InsightError(\"Result too big, over 5000\");\r\n\t\t}\r\n\t\treturn res;\r\n\t\t// switch (keyWord) {\r\n\t\t// \tcase \"AND\":\r\n\t\t// \t\t// Here, TypeScript knows conditions must be an array, so we can avoid explicit 'any' typing\r\n\t\t// \t\treturn nestedQuery.reduce(\r\n\t\t// \t\t\t(result: Section[], condition: any) => this.filterByWhereClause(result, condition),\r\n\t\t// \t\t\tdataset\r\n\t\t// \t\t);\r\n\t\t// \tcase \"OR\":\r\n\t\t// \t\tnestedQuery.forEach((condition: any) => {\r\n\t\t// \t\t\tconst conditionResults: Section[] = this.filterByWhereClause(dataset, condition);\r\n\t\t// \t\t\tresults = [...results, ...conditionResults.filter((item) => !results.includes(item))];\r\n\t\t// \t\t});\r\n\t\t// \t\treturn results;\r\n\t\t// \tcase \"NOT\":\r\n\t\t// \t\treturn dataset.filter((item) => !notResults.includes(item));\r\n\t\t// \tdefault:\r\n\t\t// \t\treturn this.handleComparisonOperations(dataset, keyWord, nestedQuery);\r\n\t\t// }\r\n\t}\r\n\r\n\tprivate callFilter(query: any, dataset: Section[]): Section[] {\r\n\t\tconst key = Object.keys(query)[0];\r\n\t\tswitch (key) {\r\n\t\t\t// these 2 take lists of filters\r\n\t\t\tcase \"AND\":\r\n\t\t\t\treturn this.handleListQuery(query.AND, dataset, \"AND\");\r\n\t\t\tcase \"OR\":\r\n\t\t\t\treturn this.handleListQuery(query.OR, dataset, \"OR\");\r\n\r\n\t\t\t// this can have nested filters\r\n\t\t\tcase \"NOT\": {\r\n\t\t\t\tconst notConditionResult = this.callFilter(query.NOT, dataset);\r\n\t\t\t\t// Return the sections that are in the original dataset but not in the notConditionResult\r\n\t\t\t\treturn dataset.filter((section) => !notConditionResult.includes(section));\r\n\t\t\t}\r\n\t\t\t// return this.callFilter(query.NOT, dataset);\r\n\r\n\t\t\t// these ones can't have nested filters (base case)\r\n\t\t\tcase \"IS\":\r\n\t\t\t\treturn this.handleIs(query.IS, dataset);\r\n\t\t\tcase \"LT\":\r\n\t\t\tcase \"GT\":\r\n\t\t\tcase \"EQ\":\r\n\t\t\t\treturn this.handleInequality(query, dataset);\r\n\t\t\tdefault:\r\n\t\t\t\t// can't have string just on it's own in a where\r\n\t\t\t\t// must be nested inside one of the above filters\r\n\t\t\t\treturn [];\r\n\t\t}\r\n\t}\r\n\r\n\tprivate handleListQuery(conditions: any[], dataset: Section[], operator: string): Section[] {\r\n\t\tif (operator === \"AND\") {\r\n\t\t\t// For AND, every condition must be true for a section to be included\r\n\t\t\treturn conditions.reduce((acc: Section[], condition) => {\r\n\t\t\t\t// Ensure that acc is filtered by each condition\r\n\t\t\t\treturn acc.filter((section) => this.callFilter(condition, [section]).length > 0);\r\n\t\t\t}, dataset); // dataset is the initial value, ensuring acc starts as an array\r\n\t\t} else if (operator === \"OR\") {\r\n\t\t\t// For OR, a section must meet at least one condition to be included\r\n\t\t\tlet result = new Set<Section>(); // Use a Set to avoid duplicates\r\n\t\t\tconditions.forEach((condition) => {\r\n\t\t\t\tthis.callFilter(condition, dataset).forEach((section) => result.add(section));\r\n\t\t\t});\r\n\t\t\treturn Array.from(result); // Convert the Set back to an array\r\n\t\t}\r\n\t\treturn []; // If operator is neither AND nor OR, return an empty array\r\n\t}\r\n\r\n\tprivate handleIs(query: any, dataset: Section[]): Section[] {\r\n\t\tconst key = Object.keys(query)[0] as keyof Section; // Safely access the property key\r\n\t\tconst value: string = query[key] as string; // Ensure the value is treated as a string\r\n\r\n\t\tconst parts = key.split(\"_\");\r\n\t\tconst field = parts[1];\r\n\t\t// Convert wildcard pattern to regex for comparison\r\n\t\tconst pattern = value.replace(/\\*/g, \".*\"); // Convert wildcard (*) to regex equivalent (.*)\r\n\t\tconst regex = new RegExp(`^${pattern}$`, \"i\"); // 'i' for case-insensitive match\r\n\t\tlet res = dataset.filter((section: any) => {\r\n\t\t\tconst sectionValue = section.value[field];\r\n\t\t\t// Ensure the value being compared is a string\r\n\t\t\treturn typeof sectionValue === \"string\" && regex.test(sectionValue);\r\n\t\t});\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\tprivate handleInequality(query: any, dataset: Section[]): Section[] {\r\n\t\tconst operator = Object.keys(query)[0];\r\n\t\tconst condition = query[operator];\r\n\t\tconst mKey = Object.keys(condition)[0];\r\n\t\tconst keyParts = mKey.split(\"_\");\r\n\t\tconst field = keyParts[1];\r\n\t\tconst value = condition[mKey];\r\n\t\tlet res = dataset.filter((section: any) => {\r\n\t\t\tswitch (operator) {\r\n\t\t\t\tcase \"GT\":\r\n\t\t\t\t\treturn section.value[field] > value;\r\n\t\t\t\tcase \"LT\":\r\n\t\t\t\t\treturn section.value[field] < value;\r\n\t\t\t\tcase \"EQ\":\r\n\t\t\t\t\treturn section.value[field] === value;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\tprivate handleComparisonOperations(dataset: any[], operator: string, condition: any): any[] {\r\n\t\tconst field = Object.keys(condition)[0];\r\n\t\tconst value = condition[field];\r\n\r\n\t\treturn dataset.filter((section) => {\r\n\t\t\tswitch (operator) {\r\n\t\t\t\tcase \"GT\":\r\n\t\t\t\t\treturn section[field] > value;\r\n\t\t\t\tcase \"LT\":\r\n\t\t\t\t\treturn section[field] < value;\r\n\t\t\t\tcase \"EQ\":\r\n\t\t\t\t\treturn section[field] === value;\r\n\t\t\t\tcase \"IS\":\r\n\t\t\t\t\treturn new RegExp(`^${value.replace(/\\*/g, \".*\")}$`).test(section[field]);\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn true; // Or handle invalid operator\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"784b273a2c229b8947f3ba6cf1e03e3d2f59da0e","contentHash":"305b777afecabf9237bec3691880c5f84f86b26446b91a884e8f36be1b8c35c5"}}