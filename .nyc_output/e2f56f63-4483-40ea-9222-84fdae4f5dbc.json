{"C:\\Users\\matth\\Desktop\\310 project\\project_team175\\src\\controller\\IInsightFacade.ts":{"path":"C:\\Users\\matth\\Desktop\\310 project\\project_team175\\src\\controller\\IInsightFacade.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":113}},"2":{"start":{"line":5,"column":0},"end":{"line":8,"column":89}},"3":{"start":{"line":6,"column":4},"end":{"line":6,"column":48}},"4":{"start":{"line":7,"column":4},"end":{"line":7,"column":42}},"5":{"start":{"line":11,"column":8},"end":{"line":11,"column":23}},"6":{"start":{"line":12,"column":8},"end":{"line":12,"column":52}},"7":{"start":{"line":15,"column":0},"end":{"line":15,"column":36}},"8":{"start":{"line":18,"column":8},"end":{"line":18,"column":23}},"9":{"start":{"line":19,"column":8},"end":{"line":19,"column":53}},"10":{"start":{"line":22,"column":0},"end":{"line":22,"column":38}},"11":{"start":{"line":25,"column":8},"end":{"line":25,"column":23}},"12":{"start":{"line":26,"column":8},"end":{"line":26,"column":59}},"13":{"start":{"line":29,"column":0},"end":{"line":29,"column":50}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":1},"end":{"line":5,"column":2}},"loc":{"start":{"line":5,"column":31},"end":{"line":8,"column":1}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":4},"end":{"line":10,"column":5}},"loc":{"start":{"line":10,"column":25},"end":{"line":13,"column":5}},"line":10},"2":{"name":"(anonymous_2)","decl":{"start":{"line":17,"column":4},"end":{"line":17,"column":5}},"loc":{"start":{"line":17,"column":25},"end":{"line":20,"column":5}},"line":17},"3":{"name":"(anonymous_3)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":25},"end":{"line":27,"column":5}},"line":24}},"branchMap":{"0":{"loc":{"start":{"line":8,"column":24},"end":{"line":8,"column":87}},"type":"binary-expr","locations":[{"start":{"line":8,"column":24},"end":{"line":8,"column":50}},{"start":{"line":8,"column":55},"end":{"line":8,"column":86}}],"line":8}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":17,"6":17,"7":1,"8":1,"9":1,"10":1,"11":0,"12":0,"13":1},"f":{"0":1,"1":17,"2":1,"3":0},"b":{"0":[1,1]},"inputSourceMap":{"version":3,"file":"C:/Users/matth/Desktop/310 project/project_team175/src/controller/IInsightFacade.ts","sources":["C:/Users/matth/Desktop/310 project/project_team175/src/controller/IInsightFacade.ts"],"names":[],"mappings":";;;AAQA,IAAY,kBAGX;AAHD,WAAY,kBAAkB;IAC7B,2CAAqB,CAAA;IACrB,qCAAe,CAAA;AAChB,CAAC,EAHW,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAG7B;AAYD,MAAa,YAAa,SAAQ,KAAK;IACtC,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;IAC7C,CAAC;CACD;AALD,oCAKC;AAED,MAAa,aAAc,SAAQ,KAAK;IACvC,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;IAC9C,CAAC;CACD;AALD,sCAKC;AAED,MAAa,mBAAoB,SAAQ,KAAK;IAC7C,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC;IACpD,CAAC;CACD;AALD,kDAKC","sourcesContent":["/*\r\n * This is the primary high-level API for the project. In this folder there should be:\r\n * A class called InsightFacade, this should be in a file called InsightFacade.ts.\r\n * You should not change this interface at all or the test suite will not work.\r\n */\r\n\r\nimport JSZip from \"jszip\";\r\n\r\nexport enum InsightDatasetKind {\r\n\tSections = \"sections\",\r\n\tRooms = \"rooms\",\r\n}\r\n\r\nexport interface InsightDataset {\r\n\tid: string;\r\n\tkind: InsightDatasetKind;\r\n\tnumRows: number;\r\n}\r\n\r\nexport interface InsightResult {\r\n\t[key: string]: string | number;\r\n}\r\n\r\nexport class InsightError extends Error {\r\n\tconstructor(message?: string) {\r\n\t\tsuper(message);\r\n\t\tError.captureStackTrace(this, InsightError);\r\n\t}\r\n}\r\n\r\nexport class NotFoundError extends Error {\r\n\tconstructor(message?: string) {\r\n\t\tsuper(message);\r\n\t\tError.captureStackTrace(this, NotFoundError);\r\n\t}\r\n}\r\n\r\nexport class ResultTooLargeError extends Error {\r\n\tconstructor(message?: string) {\r\n\t\tsuper(message);\r\n\t\tError.captureStackTrace(this, ResultTooLargeError);\r\n\t}\r\n}\r\n\r\nexport interface IInsightFacade {\r\n\t/**\r\n\t * Add a dataset to insightUBC.\r\n\t *\r\n\t * @param id  The id of the dataset being added. Follows the format /^[^_]+$/\r\n\t * @param content  The base64 content of the dataset. This content should be in the form of a serialized zip file.\r\n\t * @param kind  The kind of the dataset\r\n\t *\r\n\t * @return Promise <string[]>\r\n\t *\r\n\t * The promise should fulfill on a successful add, reject for any failures.\r\n\t * The promise should fulfill with a string array,\r\n\t * containing the ids of all currently added datasets upon a successful add.\r\n\t * The promise should reject with an InsightError describing the error.\r\n\t *\r\n\t * An id is invalid if it contains an underscore, or is only whitespace characters.\r\n\t * If id is the same as the id of an already added dataset, the dataset should be rejected and not saved.\r\n\t *\r\n\t * After receiving the dataset, it should be processed into a data structure of\r\n\t * your design. The processed data structure should be persisted to disk; your\r\n\t * system should be able to load this persisted value into memory for answering\r\n\t * queries.\r\n\t *\r\n\t * Ultimately, a dataset must be added or loaded from disk before queries can\r\n\t * be successfully answered.\r\n\t */\r\n\taddDataset(id: string, content: string, kind: InsightDatasetKind): Promise<string[]>;\r\n\r\n\t/**\r\n\t * Remove a dataset from insightUBC.\r\n\t *\r\n\t * @param id  The id of the dataset to remove. Follows the format /^[^_]+$/\r\n\t *\r\n\t * @return Promise <string>\r\n\t *\r\n\t * The promise should fulfill upon a successful removal, reject on any error.\r\n\t * Attempting to remove a dataset that hasn't been added yet counts as an error.\r\n\t *\r\n\t * An id is invalid if it contains an underscore, or is only whitespace characters.\r\n\t *\r\n\t * The promise should fulfill the id of the dataset that was removed.\r\n\t * The promise should reject with a NotFoundError (if a valid id was not yet added)\r\n\t * or an InsightError (invalid id or any other source of failure) describing the error.\r\n\t *\r\n\t * This will delete both disk and memory caches for the dataset for the id meaning\r\n\t * that subsequent queries for that id should fail unless a new addDataset happens first.\r\n\t */\r\n\tremoveDataset(id: string): Promise<string>;\r\n\r\n\t/**\r\n\t * Perform a query on insightUBC.\r\n\t *\r\n\t * @param query  The query to be performed.\r\n\t *\r\n\t * If a query is incorrectly formatted, references a dataset not added (in memory or on disk),\r\n\t * or references multiple datasets, it should be rejected.\r\n\t *\r\n\t * @return Promise <InsightResult[]>\r\n\t *\r\n\t * The promise should fulfill with an array of results.\r\n\t * The promise should reject with a ResultTooLargeError (if the query returns too many results)\r\n\t * or an InsightError (for any other source of failure) describing the error.\r\n\t */\r\n\tperformQuery(query: unknown): Promise<InsightResult[]>;\r\n\r\n\t/**\r\n\t * List all currently added datasets, their types, and number of rows.\r\n\t *\r\n\t * @return Promise <InsightDataset[]>\r\n\t * The promise should fulfill an array of currently added InsightDatasets, and will only fulfill.\r\n\t */\r\n\tlistDatasets(): Promise<InsightDataset[]>;\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"a3490c80789ca0ef2be4cd4599b237cc86ec32c5","contentHash":"54e522dc342d114af29061aa72bfa946f0d14b97e6d10704ee9457e7975aa7c6"},"C:\\Users\\matth\\Desktop\\310 project\\project_team175\\src\\controller\\InsightFacade.ts":{"path":"C:\\Users\\matth\\Desktop\\310 project\\project_team175\\src\\controller\\InsightFacade.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":12,"column":3}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"2":{"start":{"line":3,"column":26},"end":{"line":3,"column":33}},"3":{"start":{"line":4,"column":15},"end":{"line":4,"column":52}},"4":{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},"5":{"start":{"line":6,"column":6},"end":{"line":6,"column":68}},"6":{"start":{"line":6,"column":51},"end":{"line":6,"column":63}},"7":{"start":{"line":8,"column":4},"end":{"line":8,"column":39}},"8":{"start":{"line":10,"column":4},"end":{"line":10,"column":33}},"9":{"start":{"line":10,"column":26},"end":{"line":10,"column":33}},"10":{"start":{"line":11,"column":4},"end":{"line":11,"column":17}},"11":{"start":{"line":13,"column":25},"end":{"line":17,"column":2}},"12":{"start":{"line":14,"column":4},"end":{"line":14,"column":72}},"13":{"start":{"line":16,"column":4},"end":{"line":16,"column":21}},"14":{"start":{"line":18,"column":19},"end":{"line":24,"column":1}},"15":{"start":{"line":19,"column":4},"end":{"line":19,"column":42}},"16":{"start":{"line":19,"column":31},"end":{"line":19,"column":42}},"17":{"start":{"line":20,"column":17},"end":{"line":20,"column":19}},"18":{"start":{"line":21,"column":4},"end":{"line":21,"column":141}},"19":{"start":{"line":21,"column":21},"end":{"line":21,"column":141}},"20":{"start":{"line":21,"column":40},"end":{"line":21,"column":141}},"21":{"start":{"line":21,"column":109},"end":{"line":21,"column":141}},"22":{"start":{"line":22,"column":4},"end":{"line":22,"column":36}},"23":{"start":{"line":23,"column":4},"end":{"line":23,"column":18}},"24":{"start":{"line":25,"column":22},"end":{"line":27,"column":1}},"25":{"start":{"line":26,"column":4},"end":{"line":26,"column":62}},"26":{"start":{"line":28,"column":0},"end":{"line":28,"column":62}},"27":{"start":{"line":29,"column":25},"end":{"line":29,"column":52}},"28":{"start":{"line":30,"column":11},"end":{"line":30,"column":44}},"29":{"start":{"line":31,"column":16},"end":{"line":31,"column":49}},"30":{"start":{"line":32,"column":18},"end":{"line":32,"column":55}},"31":{"start":{"line":34,"column":18},"end":{"line":35,"column":47}},"32":{"start":{"line":36,"column":15},"end":{"line":36,"column":17}},"33":{"start":{"line":37,"column":14},"end":{"line":37,"column":23}},"34":{"start":{"line":39,"column":8},"end":{"line":41,"column":9}},"35":{"start":{"line":40,"column":12},"end":{"line":40,"column":91}},"36":{"start":{"line":42,"column":8},"end":{"line":44,"column":9}},"37":{"start":{"line":43,"column":12},"end":{"line":43,"column":112}},"38":{"start":{"line":45,"column":8},"end":{"line":63,"column":9}},"39":{"start":{"line":47,"column":24},"end":{"line":47,"column":45}},"40":{"start":{"line":48,"column":35},"end":{"line":48,"column":65}},"41":{"start":{"line":49,"column":36},"end":{"line":49,"column":89}},"42":{"start":{"line":50,"column":12},"end":{"line":56,"column":13}},"43":{"start":{"line":52,"column":20},"end":{"line":52,"column":84}},"44":{"start":{"line":53,"column":20},"end":{"line":53,"column":26}},"45":{"start":{"line":55,"column":20},"end":{"line":55,"column":106}},"46":{"start":{"line":57,"column":12},"end":{"line":57,"column":40}},"47":{"start":{"line":58,"column":12},"end":{"line":58,"column":52}},"48":{"start":{"line":59,"column":12},"end":{"line":59,"column":63}},"49":{"start":{"line":62,"column":12},"end":{"line":62,"column":104}},"50":{"start":{"line":66,"column":25},"end":{"line":66,"column":27}},"51":{"start":{"line":67,"column":8},"end":{"line":70,"column":11}},"52":{"start":{"line":68,"column":32},"end":{"line":68,"column":50}},"53":{"start":{"line":69,"column":12},"end":{"line":69,"column":39}},"54":{"start":{"line":71,"column":26},"end":{"line":71,"column":53}},"55":{"start":{"line":72,"column":8},"end":{"line":74,"column":9}},"56":{"start":{"line":73,"column":12},"end":{"line":73,"column":71}},"57":{"start":{"line":75,"column":25},"end":{"line":75,"column":27}},"58":{"start":{"line":76,"column":8},"end":{"line":89,"column":9}},"59":{"start":{"line":77,"column":12},"end":{"line":79,"column":13}},"60":{"start":{"line":78,"column":16},"end":{"line":78,"column":25}},"61":{"start":{"line":80,"column":25},"end":{"line":80,"column":27}},"62":{"start":{"line":81,"column":12},"end":{"line":86,"column":13}},"63":{"start":{"line":82,"column":16},"end":{"line":82,"column":41}},"64":{"start":{"line":85,"column":16},"end":{"line":85,"column":81}},"65":{"start":{"line":87,"column":27},"end":{"line":87,"column":54}},"66":{"start":{"line":88,"column":12},"end":{"line":88,"column":56}},"67":{"start":{"line":90,"column":8},"end":{"line":90,"column":42}},"68":{"start":{"line":91,"column":24},"end":{"line":95,"column":9}},"69":{"start":{"line":96,"column":8},"end":{"line":96,"column":23}},"70":{"start":{"line":99,"column":8},"end":{"line":124,"column":11}},"71":{"start":{"line":101,"column":12},"end":{"line":114,"column":13}},"72":{"start":{"line":102,"column":42},"end":{"line":102,"column":77}},"73":{"start":{"line":103,"column":16},"end":{"line":110,"column":19}},"74":{"start":{"line":104,"column":20},"end":{"line":109,"column":21}},"75":{"start":{"line":105,"column":24},"end":{"line":105,"column":69}},"76":{"start":{"line":108,"column":24},"end":{"line":108,"column":75}},"77":{"start":{"line":113,"column":16},"end":{"line":113,"column":69}},"78":{"start":{"line":116,"column":12},"end":{"line":122,"column":15}},"79":{"start":{"line":118,"column":16},"end":{"line":118,"column":81}},"80":{"start":{"line":121,"column":16},"end":{"line":121,"column":62}},"81":{"start":{"line":123,"column":12},"end":{"line":123,"column":71}},"82":{"start":{"line":127,"column":8},"end":{"line":129,"column":9}},"83":{"start":{"line":128,"column":12},"end":{"line":128,"column":47}},"84":{"start":{"line":132,"column":23},"end":{"line":132,"column":25}},"85":{"start":{"line":133,"column":8},"end":{"line":136,"column":9}},"86":{"start":{"line":134,"column":32},"end":{"line":134,"column":62}},"87":{"start":{"line":135,"column":12},"end":{"line":135,"column":41}},"88":{"start":{"line":137,"column":8},"end":{"line":137,"column":24}},"89":{"start":{"line":140,"column":27},"end":{"line":140,"column":29}},"90":{"start":{"line":141,"column":8},"end":{"line":148,"column":9}},"91":{"start":{"line":142,"column":12},"end":{"line":144,"column":13}},"92":{"start":{"line":143,"column":16},"end":{"line":143,"column":25}},"93":{"start":{"line":145,"column":25},"end":{"line":145,"column":40}},"94":{"start":{"line":146,"column":30},"end":{"line":146,"column":56}},"95":{"start":{"line":147,"column":12},"end":{"line":147,"column":43}},"96":{"start":{"line":149,"column":8},"end":{"line":152,"column":9}},"97":{"start":{"line":149,"column":43},"end":{"line":149,"column":50}},"98":{"start":{"line":150,"column":12},"end":{"line":150,"column":43}},"99":{"start":{"line":151,"column":12},"end":{"line":151,"column":25}},"100":{"start":{"line":153,"column":8},"end":{"line":153,"column":20}},"101":{"start":{"line":156,"column":28},"end":{"line":156,"column":30}},"102":{"start":{"line":157,"column":24},"end":{"line":157,"column":37}},"103":{"start":{"line":158,"column":8},"end":{"line":160,"column":9}},"104":{"start":{"line":159,"column":12},"end":{"line":159,"column":25}},"105":{"start":{"line":161,"column":8},"end":{"line":164,"column":11}},"106":{"start":{"line":162,"column":31},"end":{"line":162,"column":59}},"107":{"start":{"line":163,"column":12},"end":{"line":163,"column":45}},"108":{"start":{"line":165,"column":8},"end":{"line":167,"column":9}},"109":{"start":{"line":165,"column":43},"end":{"line":165,"column":49}},"110":{"start":{"line":166,"column":12},"end":{"line":166,"column":25}},"111":{"start":{"line":168,"column":8},"end":{"line":168,"column":20}},"112":{"start":{"line":171,"column":8},"end":{"line":175,"column":11}},"113":{"start":{"line":172,"column":12},"end":{"line":174,"column":13}},"114":{"start":{"line":173,"column":16},"end":{"line":173,"column":29}},"115":{"start":{"line":176,"column":8},"end":{"line":176,"column":20}},"116":{"start":{"line":179,"column":8},"end":{"line":181,"column":9}},"117":{"start":{"line":180,"column":12},"end":{"line":180,"column":92}},"118":{"start":{"line":182,"column":8},"end":{"line":184,"column":9}},"119":{"start":{"line":183,"column":12},"end":{"line":183,"column":92}},"120":{"start":{"line":185,"column":8},"end":{"line":193,"column":9}},"121":{"start":{"line":186,"column":12},"end":{"line":186,"column":37}},"122":{"start":{"line":187,"column":32},"end":{"line":187,"column":60}},"123":{"start":{"line":188,"column":12},"end":{"line":188,"column":41}},"124":{"start":{"line":189,"column":12},"end":{"line":189,"column":39}},"125":{"start":{"line":192,"column":12},"end":{"line":192,"column":113}},"126":{"start":{"line":196,"column":8},"end":{"line":198,"column":9}},"127":{"start":{"line":197,"column":12},"end":{"line":197,"column":92}},"128":{"start":{"line":199,"column":26},"end":{"line":199,"column":54}},"129":{"start":{"line":200,"column":8},"end":{"line":202,"column":9}},"130":{"start":{"line":201,"column":12},"end":{"line":201,"column":111}},"131":{"start":{"line":203,"column":24},"end":{"line":203,"column":57}},"132":{"start":{"line":204,"column":28},"end":{"line":204,"column":50}},"133":{"start":{"line":205,"column":24},"end":{"line":205,"column":63}},"134":{"start":{"line":206,"column":8},"end":{"line":206,"column":40}},"135":{"start":{"line":209,"column":8},"end":{"line":211,"column":9}},"136":{"start":{"line":210,"column":12},"end":{"line":210,"column":25}},"137":{"start":{"line":212,"column":8},"end":{"line":212,"column":20}},"138":{"start":{"line":215,"column":8},"end":{"line":217,"column":9}},"139":{"start":{"line":216,"column":12},"end":{"line":216,"column":43}},"140":{"start":{"line":218,"column":8},"end":{"line":218,"column":20}},"141":{"start":{"line":221,"column":8},"end":{"line":227,"column":9}},"142":{"start":{"line":222,"column":32},"end":{"line":222,"column":67}},"143":{"start":{"line":223,"column":12},"end":{"line":223,"column":50}},"144":{"start":{"line":226,"column":12},"end":{"line":226,"column":101}},"145":{"start":{"line":230,"column":8},"end":{"line":230,"column":18}},"146":{"start":{"line":233,"column":8},"end":{"line":233,"column":18}},"147":{"start":{"line":236,"column":28},"end":{"line":243,"column":10}},"148":{"start":{"line":237,"column":28},"end":{"line":237,"column":45}},"149":{"start":{"line":238,"column":12},"end":{"line":242,"column":14}},"150":{"start":{"line":244,"column":8},"end":{"line":244,"column":44}},"151":{"start":{"line":247,"column":0},"end":{"line":247,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":74},"end":{"line":2,"column":75}},"loc":{"start":{"line":2,"column":96},"end":{"line":9,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":6,"column":38},"end":{"line":6,"column":39}},"loc":{"start":{"line":6,"column":49},"end":{"line":6,"column":65}},"line":6},"2":{"name":"(anonymous_2)","decl":{"start":{"line":9,"column":6},"end":{"line":9,"column":7}},"loc":{"start":{"line":9,"column":28},"end":{"line":12,"column":1}},"line":9},"3":{"name":"(anonymous_3)","decl":{"start":{"line":13,"column":80},"end":{"line":13,"column":81}},"loc":{"start":{"line":13,"column":95},"end":{"line":15,"column":1}},"line":13},"4":{"name":"(anonymous_4)","decl":{"start":{"line":15,"column":5},"end":{"line":15,"column":6}},"loc":{"start":{"line":15,"column":20},"end":{"line":17,"column":1}},"line":15},"5":{"name":"(anonymous_5)","decl":{"start":{"line":18,"column":50},"end":{"line":18,"column":51}},"loc":{"start":{"line":18,"column":65},"end":{"line":24,"column":1}},"line":18},"6":{"name":"(anonymous_6)","decl":{"start":{"line":25,"column":56},"end":{"line":25,"column":57}},"loc":{"start":{"line":25,"column":71},"end":{"line":27,"column":1}},"line":25},"7":{"name":"(anonymous_7)","decl":{"start":{"line":38,"column":4},"end":{"line":38,"column":5}},"loc":{"start":{"line":38,"column":40},"end":{"line":64,"column":5}},"line":38},"8":{"name":"(anonymous_8)","decl":{"start":{"line":65,"column":4},"end":{"line":65,"column":5}},"loc":{"start":{"line":65,"column":41},"end":{"line":97,"column":5}},"line":65},"9":{"name":"(anonymous_9)","decl":{"start":{"line":67,"column":20},"end":{"line":67,"column":21}},"loc":{"start":{"line":67,"column":44},"end":{"line":70,"column":9}},"line":67},"10":{"name":"(anonymous_10)","decl":{"start":{"line":98,"column":4},"end":{"line":98,"column":5}},"loc":{"start":{"line":98,"column":33},"end":{"line":125,"column":5}},"line":98},"11":{"name":"(anonymous_11)","decl":{"start":{"line":100,"column":18},"end":{"line":100,"column":19}},"loc":{"start":{"line":100,"column":29},"end":{"line":115,"column":9}},"line":100},"12":{"name":"(anonymous_12)","decl":{"start":{"line":103,"column":86},"end":{"line":103,"column":87}},"loc":{"start":{"line":103,"column":95},"end":{"line":110,"column":17}},"line":103},"13":{"name":"(anonymous_13)","decl":{"start":{"line":115,"column":17},"end":{"line":115,"column":18}},"loc":{"start":{"line":115,"column":26},"end":{"line":124,"column":9}},"line":115},"14":{"name":"(anonymous_14)","decl":{"start":{"line":117,"column":22},"end":{"line":117,"column":23}},"loc":{"start":{"line":117,"column":28},"end":{"line":119,"column":13}},"line":117},"15":{"name":"(anonymous_15)","decl":{"start":{"line":120,"column":23},"end":{"line":120,"column":24}},"loc":{"start":{"line":120,"column":30},"end":{"line":122,"column":13}},"line":120},"16":{"name":"(anonymous_16)","decl":{"start":{"line":126,"column":4},"end":{"line":126,"column":5}},"loc":{"start":{"line":126,"column":43},"end":{"line":130,"column":5}},"line":126},"17":{"name":"(anonymous_17)","decl":{"start":{"line":131,"column":4},"end":{"line":131,"column":5}},"loc":{"start":{"line":131,"column":27},"end":{"line":138,"column":5}},"line":131},"18":{"name":"(anonymous_18)","decl":{"start":{"line":139,"column":4},"end":{"line":139,"column":5}},"loc":{"start":{"line":139,"column":32},"end":{"line":154,"column":5}},"line":139},"19":{"name":"(anonymous_19)","decl":{"start":{"line":149,"column":31},"end":{"line":149,"column":32}},"loc":{"start":{"line":149,"column":43},"end":{"line":149,"column":50}},"line":149},"20":{"name":"(anonymous_20)","decl":{"start":{"line":155,"column":4},"end":{"line":155,"column":5}},"loc":{"start":{"line":155,"column":26},"end":{"line":169,"column":5}},"line":155},"21":{"name":"(anonymous_21)","decl":{"start":{"line":161,"column":24},"end":{"line":161,"column":25}},"loc":{"start":{"line":161,"column":37},"end":{"line":164,"column":9}},"line":161},"22":{"name":"(anonymous_22)","decl":{"start":{"line":165,"column":32},"end":{"line":165,"column":33}},"loc":{"start":{"line":165,"column":43},"end":{"line":165,"column":49}},"line":165},"23":{"name":"(anonymous_23)","decl":{"start":{"line":170,"column":4},"end":{"line":170,"column":5}},"loc":{"start":{"line":170,"column":28},"end":{"line":177,"column":5}},"line":170},"24":{"name":"(anonymous_24)","decl":{"start":{"line":171,"column":33},"end":{"line":171,"column":34}},"loc":{"start":{"line":171,"column":44},"end":{"line":175,"column":9}},"line":171},"25":{"name":"(anonymous_25)","decl":{"start":{"line":178,"column":4},"end":{"line":178,"column":5}},"loc":{"start":{"line":178,"column":28},"end":{"line":194,"column":5}},"line":178},"26":{"name":"(anonymous_26)","decl":{"start":{"line":195,"column":4},"end":{"line":195,"column":5}},"loc":{"start":{"line":195,"column":30},"end":{"line":207,"column":5}},"line":195},"27":{"name":"(anonymous_27)","decl":{"start":{"line":208,"column":4},"end":{"line":208,"column":5}},"loc":{"start":{"line":208,"column":24},"end":{"line":213,"column":5}},"line":208},"28":{"name":"(anonymous_28)","decl":{"start":{"line":214,"column":4},"end":{"line":214,"column":5}},"loc":{"start":{"line":214,"column":28},"end":{"line":219,"column":5}},"line":214},"29":{"name":"(anonymous_29)","decl":{"start":{"line":220,"column":4},"end":{"line":220,"column":5}},"loc":{"start":{"line":220,"column":33},"end":{"line":228,"column":5}},"line":220},"30":{"name":"(anonymous_30)","decl":{"start":{"line":229,"column":4},"end":{"line":229,"column":5}},"loc":{"start":{"line":229,"column":22},"end":{"line":231,"column":5}},"line":229},"31":{"name":"(anonymous_31)","decl":{"start":{"line":232,"column":4},"end":{"line":232,"column":5}},"loc":{"start":{"line":232,"column":39},"end":{"line":234,"column":5}},"line":232},"32":{"name":"(anonymous_32)","decl":{"start":{"line":235,"column":4},"end":{"line":235,"column":5}},"loc":{"start":{"line":235,"column":25},"end":{"line":245,"column":5}},"line":235},"33":{"name":"(anonymous_33)","decl":{"start":{"line":236,"column":59},"end":{"line":236,"column":60}},"loc":{"start":{"line":236,"column":67},"end":{"line":243,"column":9}},"line":236}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":12,"column":3}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":57},"end":{"line":12,"column":2}}],"line":2},"1":{"loc":{"start":{"line":2,"column":57},"end":{"line":12,"column":2}},"type":"cond-expr","locations":[{"start":{"line":2,"column":74},"end":{"line":9,"column":1}},{"start":{"line":9,"column":6},"end":{"line":12,"column":1}}],"line":2},"2":{"loc":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"type":"if","locations":[{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},{"start":{"line":3,"column":4},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},"type":"if","locations":[{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},{"start":{"line":5,"column":4},"end":{"line":7,"column":5}}],"line":5},"4":{"loc":{"start":{"line":5,"column":8},"end":{"line":5,"column":85}},"type":"binary-expr","locations":[{"start":{"line":5,"column":8},"end":{"line":5,"column":13}},{"start":{"line":5,"column":18},"end":{"line":5,"column":84}}],"line":5},"5":{"loc":{"start":{"line":5,"column":18},"end":{"line":5,"column":84}},"type":"cond-expr","locations":[{"start":{"line":5,"column":34},"end":{"line":5,"column":47}},{"start":{"line":5,"column":50},"end":{"line":5,"column":84}}],"line":5},"6":{"loc":{"start":{"line":5,"column":50},"end":{"line":5,"column":84}},"type":"binary-expr","locations":[{"start":{"line":5,"column":50},"end":{"line":5,"column":63}},{"start":{"line":5,"column":67},"end":{"line":5,"column":84}}],"line":5},"7":{"loc":{"start":{"line":10,"column":4},"end":{"line":10,"column":33}},"type":"if","locations":[{"start":{"line":10,"column":4},"end":{"line":10,"column":33}},{"start":{"line":10,"column":4},"end":{"line":10,"column":33}}],"line":10},"8":{"loc":{"start":{"line":13,"column":25},"end":{"line":17,"column":2}},"type":"binary-expr","locations":[{"start":{"line":13,"column":26},"end":{"line":13,"column":30}},{"start":{"line":13,"column":34},"end":{"line":13,"column":57}},{"start":{"line":13,"column":63},"end":{"line":17,"column":1}}],"line":13},"9":{"loc":{"start":{"line":13,"column":63},"end":{"line":17,"column":1}},"type":"cond-expr","locations":[{"start":{"line":13,"column":80},"end":{"line":15,"column":1}},{"start":{"line":15,"column":5},"end":{"line":17,"column":1}}],"line":13},"10":{"loc":{"start":{"line":18,"column":19},"end":{"line":24,"column":1}},"type":"binary-expr","locations":[{"start":{"line":18,"column":20},"end":{"line":18,"column":24}},{"start":{"line":18,"column":28},"end":{"line":18,"column":45}},{"start":{"line":18,"column":50},"end":{"line":24,"column":1}}],"line":18},"11":{"loc":{"start":{"line":19,"column":4},"end":{"line":19,"column":42}},"type":"if","locations":[{"start":{"line":19,"column":4},"end":{"line":19,"column":42}},{"start":{"line":19,"column":4},"end":{"line":19,"column":42}}],"line":19},"12":{"loc":{"start":{"line":19,"column":8},"end":{"line":19,"column":29}},"type":"binary-expr","locations":[{"start":{"line":19,"column":8},"end":{"line":19,"column":11}},{"start":{"line":19,"column":15},"end":{"line":19,"column":29}}],"line":19},"13":{"loc":{"start":{"line":21,"column":4},"end":{"line":21,"column":141}},"type":"if","locations":[{"start":{"line":21,"column":4},"end":{"line":21,"column":141}},{"start":{"line":21,"column":4},"end":{"line":21,"column":141}}],"line":21},"14":{"loc":{"start":{"line":21,"column":40},"end":{"line":21,"column":141}},"type":"if","locations":[{"start":{"line":21,"column":40},"end":{"line":21,"column":141}},{"start":{"line":21,"column":40},"end":{"line":21,"column":141}}],"line":21},"15":{"loc":{"start":{"line":21,"column":44},"end":{"line":21,"column":107}},"type":"binary-expr","locations":[{"start":{"line":21,"column":44},"end":{"line":21,"column":59}},{"start":{"line":21,"column":63},"end":{"line":21,"column":107}}],"line":21},"16":{"loc":{"start":{"line":25,"column":22},"end":{"line":27,"column":1}},"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":27}},{"start":{"line":25,"column":31},"end":{"line":25,"column":51}},{"start":{"line":25,"column":56},"end":{"line":27,"column":1}}],"line":25},"17":{"loc":{"start":{"line":26,"column":11},"end":{"line":26,"column":61}},"type":"cond-expr","locations":[{"start":{"line":26,"column":37},"end":{"line":26,"column":40}},{"start":{"line":26,"column":43},"end":{"line":26,"column":61}}],"line":26},"18":{"loc":{"start":{"line":26,"column":12},"end":{"line":26,"column":33}},"type":"binary-expr","locations":[{"start":{"line":26,"column":12},"end":{"line":26,"column":15}},{"start":{"line":26,"column":19},"end":{"line":26,"column":33}}],"line":26},"19":{"loc":{"start":{"line":39,"column":8},"end":{"line":41,"column":9}},"type":"if","locations":[{"start":{"line":39,"column":8},"end":{"line":41,"column":9}},{"start":{"line":39,"column":8},"end":{"line":41,"column":9}}],"line":39},"20":{"loc":{"start":{"line":39,"column":12},"end":{"line":39,"column":42}},"type":"binary-expr","locations":[{"start":{"line":39,"column":12},"end":{"line":39,"column":22}},{"start":{"line":39,"column":26},"end":{"line":39,"column":42}}],"line":39},"21":{"loc":{"start":{"line":42,"column":8},"end":{"line":44,"column":9}},"type":"if","locations":[{"start":{"line":42,"column":8},"end":{"line":44,"column":9}},{"start":{"line":42,"column":8},"end":{"line":44,"column":9}}],"line":42},"22":{"loc":{"start":{"line":50,"column":12},"end":{"line":56,"column":13}},"type":"switch","locations":[{"start":{"line":51,"column":16},"end":{"line":53,"column":26}},{"start":{"line":54,"column":16},"end":{"line":55,"column":106}}],"line":50},"23":{"loc":{"start":{"line":72,"column":8},"end":{"line":74,"column":9}},"type":"if","locations":[{"start":{"line":72,"column":8},"end":{"line":74,"column":9}},{"start":{"line":72,"column":8},"end":{"line":74,"column":9}}],"line":72},"24":{"loc":{"start":{"line":77,"column":12},"end":{"line":79,"column":13}},"type":"if","locations":[{"start":{"line":77,"column":12},"end":{"line":79,"column":13}},{"start":{"line":77,"column":12},"end":{"line":79,"column":13}}],"line":77},"25":{"loc":{"start":{"line":101,"column":12},"end":{"line":114,"column":13}},"type":"if","locations":[{"start":{"line":101,"column":12},"end":{"line":114,"column":13}},{"start":{"line":101,"column":12},"end":{"line":114,"column":13}}],"line":101},"26":{"loc":{"start":{"line":104,"column":20},"end":{"line":109,"column":21}},"type":"if","locations":[{"start":{"line":104,"column":20},"end":{"line":109,"column":21}},{"start":{"line":104,"column":20},"end":{"line":109,"column":21}}],"line":104},"27":{"loc":{"start":{"line":142,"column":12},"end":{"line":144,"column":13}},"type":"if","locations":[{"start":{"line":142,"column":12},"end":{"line":144,"column":13}},{"start":{"line":142,"column":12},"end":{"line":144,"column":13}}],"line":142},"28":{"loc":{"start":{"line":149,"column":8},"end":{"line":152,"column":9}},"type":"if","locations":[{"start":{"line":149,"column":8},"end":{"line":152,"column":9}},{"start":{"line":149,"column":8},"end":{"line":152,"column":9}}],"line":149},"29":{"loc":{"start":{"line":158,"column":8},"end":{"line":160,"column":9}},"type":"if","locations":[{"start":{"line":158,"column":8},"end":{"line":160,"column":9}},{"start":{"line":158,"column":8},"end":{"line":160,"column":9}}],"line":158},"30":{"loc":{"start":{"line":165,"column":8},"end":{"line":167,"column":9}},"type":"if","locations":[{"start":{"line":165,"column":8},"end":{"line":167,"column":9}},{"start":{"line":165,"column":8},"end":{"line":167,"column":9}}],"line":165},"31":{"loc":{"start":{"line":172,"column":12},"end":{"line":174,"column":13}},"type":"if","locations":[{"start":{"line":172,"column":12},"end":{"line":174,"column":13}},{"start":{"line":172,"column":12},"end":{"line":174,"column":13}}],"line":172},"32":{"loc":{"start":{"line":179,"column":8},"end":{"line":181,"column":9}},"type":"if","locations":[{"start":{"line":179,"column":8},"end":{"line":181,"column":9}},{"start":{"line":179,"column":8},"end":{"line":181,"column":9}}],"line":179},"33":{"loc":{"start":{"line":179,"column":12},"end":{"line":179,"column":42}},"type":"binary-expr","locations":[{"start":{"line":179,"column":12},"end":{"line":179,"column":22}},{"start":{"line":179,"column":26},"end":{"line":179,"column":42}}],"line":179},"34":{"loc":{"start":{"line":182,"column":8},"end":{"line":184,"column":9}},"type":"if","locations":[{"start":{"line":182,"column":8},"end":{"line":184,"column":9}},{"start":{"line":182,"column":8},"end":{"line":184,"column":9}}],"line":182},"35":{"loc":{"start":{"line":196,"column":8},"end":{"line":198,"column":9}},"type":"if","locations":[{"start":{"line":196,"column":8},"end":{"line":198,"column":9}},{"start":{"line":196,"column":8},"end":{"line":198,"column":9}}],"line":196},"36":{"loc":{"start":{"line":200,"column":8},"end":{"line":202,"column":9}},"type":"if","locations":[{"start":{"line":200,"column":8},"end":{"line":202,"column":9}},{"start":{"line":200,"column":8},"end":{"line":202,"column":9}}],"line":200},"37":{"loc":{"start":{"line":200,"column":12},"end":{"line":200,"column":51}},"type":"binary-expr","locations":[{"start":{"line":200,"column":12},"end":{"line":200,"column":22}},{"start":{"line":200,"column":26},"end":{"line":200,"column":51}}],"line":200},"38":{"loc":{"start":{"line":209,"column":8},"end":{"line":211,"column":9}},"type":"if","locations":[{"start":{"line":209,"column":8},"end":{"line":211,"column":9}},{"start":{"line":209,"column":8},"end":{"line":211,"column":9}}],"line":209},"39":{"loc":{"start":{"line":209,"column":12},"end":{"line":209,"column":52}},"type":"binary-expr","locations":[{"start":{"line":209,"column":12},"end":{"line":209,"column":18}},{"start":{"line":209,"column":22},"end":{"line":209,"column":34}},{"start":{"line":209,"column":38},"end":{"line":209,"column":52}}],"line":209},"40":{"loc":{"start":{"line":215,"column":8},"end":{"line":217,"column":9}},"type":"if","locations":[{"start":{"line":215,"column":8},"end":{"line":217,"column":9}},{"start":{"line":215,"column":8},"end":{"line":217,"column":9}}],"line":215},"41":{"loc":{"start":{"line":215,"column":12},"end":{"line":215,"column":61}},"type":"binary-expr","locations":[{"start":{"line":215,"column":12},"end":{"line":215,"column":17}},{"start":{"line":215,"column":21},"end":{"line":215,"column":34}},{"start":{"line":215,"column":38},"end":{"line":215,"column":61}}],"line":215}},"s":{"0":1,"1":148,"2":148,"3":148,"4":148,"5":148,"6":16,"7":148,"8":0,"9":0,"10":0,"11":1,"12":1,"13":0,"14":1,"15":1,"16":0,"17":1,"18":1,"19":1,"20":148,"21":148,"22":1,"23":1,"24":1,"25":2,"26":1,"27":1,"28":1,"29":1,"30":1,"31":18,"32":18,"33":18,"34":15,"35":4,"36":11,"37":0,"38":11,"39":11,"40":11,"41":11,"42":11,"43":10,"44":7,"45":1,"46":7,"47":7,"48":7,"49":3,"50":10,"51":10,"52":41624,"53":41624,"54":10,"55":10,"56":3,"57":7,"58":7,"59":41615,"60":7,"61":41608,"62":41608,"63":41608,"64":0,"65":41608,"66":41608,"67":7,"68":7,"69":7,"70":7,"71":2,"72":2,"73":2,"74":2,"75":0,"76":2,"77":0,"78":5,"79":5,"80":0,"81":5,"82":41608,"83":452284,"84":41608,"85":41608,"86":452284,"87":452284,"88":41608,"89":10,"90":10,"91":41624,"92":7,"93":41617,"94":41617,"95":41617,"96":10,"97":23,"98":3,"99":3,"100":7,"101":41617,"102":41617,"103":41617,"104":16494,"105":25123,"106":452284,"107":452284,"108":25123,"109":25123,"110":0,"111":25123,"112":452284,"113":4522840,"114":0,"115":452284,"116":6,"117":3,"118":3,"119":1,"120":2,"121":2,"122":2,"123":2,"124":2,"125":0,"126":3,"127":1,"128":2,"129":2,"130":2,"131":0,"132":0,"133":0,"134":0,"135":3,"136":1,"137":2,"138":2,"139":0,"140":2,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":4,"148":4,"149":4,"150":4,"151":1},"f":{"0":148,"1":16,"2":0,"3":1,"4":0,"5":1,"6":2,"7":15,"8":10,"9":41624,"10":7,"11":2,"12":2,"13":5,"14":5,"15":0,"16":41608,"17":41608,"18":10,"19":23,"20":41617,"21":452284,"22":25123,"23":452284,"24":4522840,"25":6,"26":3,"27":3,"28":2,"29":0,"30":0,"31":0,"32":4,"33":4},"b":{"0":[1,1,1],"1":[1,0],"2":[148,0],"3":[148,0],"4":[148,148],"5":[0,148],"6":[148,0],"7":[0,0],"8":[1,1,1],"9":[1,0],"10":[1,1,1],"11":[0,1],"12":[1,1],"13":[1,0],"14":[148,0],"15":[148,148],"16":[1,1,1],"17":[1,1],"18":[2,2],"19":[4,11],"20":[15,11],"21":[0,11],"22":[10,1],"23":[3,7],"24":[7,41608],"25":[2,0],"26":[0,2],"27":[7,41617],"28":[3,7],"29":[16494,25123],"30":[0,25123],"31":[0,4522840],"32":[3,3],"33":[6,4],"34":[1,2],"35":[1,2],"36":[2,0],"37":[2,0],"38":[1,2],"39":[3,3,2],"40":[0,2],"41":[2,2,2]},"inputSourceMap":{"version":3,"file":"C:/Users/matth/Desktop/310 project/project_team175/src/controller/InsightFacade.ts","sources":["C:/Users/matth/Desktop/310 project/project_team175/src/controller/InsightFacade.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n\tIInsightFacade,\r\n\tInsightDataset,\r\n\tInsightDatasetKind,\r\n\tInsightError,\r\n\tInsightResult,\r\n\tNotFoundError\r\n} from \"./IInsightFacade\";\r\nimport * as fs from \"fs-extra\";\r\nimport JSZip from \"jszip\";\r\nimport Section from \"./section\";\r\n\r\nexport default class InsightFacade implements IInsightFacade {\r\n\tprivate validFields: string[] = [\"id\", \"Course\", \"Title\", \"Professor\", \"Subject\",\r\n\t\t\"Year\", \"Avg\", \"Pass\", \"Fail\", \"Audit\"];\r\n\r\n\r\n\tprivate datasets: {[id: string]: InsightDataset} = {};\r\n\tprivate readonly dataDir = \"./data/\";\r\n\r\n\tpublic async addDataset(id: string, content: string, kind: InsightDatasetKind): Promise<string[]> {\r\n\t\tif (!id.trim() || id.includes(\"_\")) {\r\n\t\t\treturn Promise.reject(new InsightError(\"Invalid dataset ID\"));\r\n\t\t}\r\n\t\tif (this.datasets[id]) {\r\n\t\t\treturn Promise.reject(new InsightError(\"Dataset with the same ID already exists\"));\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tlet dataset: InsightDataset;\r\n\r\n\t\t\t// unzip dataset\r\n\t\t\tconst zip = new JSZip();\r\n\t\t\tconst decodedContent = Buffer.from(content, \"base64\");\r\n\t\t\tconst unzippedContent = await zip.loadAsync(decodedContent, {base64: true});\r\n\r\n\t\t\t// process dataset\r\n\t\t\tswitch (kind) {\r\n\t\t\t\tcase InsightDatasetKind.Sections:\r\n\t\t\t\t\tdataset = await this.processCoursesDataset(id, unzippedContent);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn Promise.reject(new InsightError(\"Unsupported dataset kind.\"));\r\n\t\t\t}\r\n\r\n\t\t\t// add dataset to dataset dict\r\n\t\t\tthis.datasets[id] = dataset;\r\n\r\n\t\t\t// return array of all added datasets\r\n\t\t\tconsole.log(Object.keys(this.datasets));\r\n\t\t\treturn Promise.resolve(Object.keys(this.datasets));\r\n\t\t} catch (error) {\r\n\t\t\treturn Promise.reject(new InsightError(`Failed to add dataset: ${error}`));\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async processCoursesDataset(id: string, zip: JSZip): Promise<InsightDataset> {\r\n\t\tconst promises: Array<Promise<string>> = [];\r\n\r\n\t\t// for each course file, read its contents\r\n\t\t// and push it onto an array of promises\r\n\t\tzip.forEach((relativePath, file) => {\r\n\t\t\tconst jsonPromise = file.async(\"text\");\r\n\t\t\tpromises.push(jsonPromise);\r\n\t\t});\r\n\r\n\t\t// resolve all promises to get an array of course JSON strings\r\n\t\tlet jsonStrings = await Promise.all(promises);\r\n\r\n\t\t// validate Dataset\r\n\t\tif (!this.isValidDataset(jsonStrings)) {\r\n\t\t\t// console.log(\"invalid dataset\");\r\n\t\t\tthrow new InsightError(\"Invalid Dataset\");\r\n\t\t}\r\n\t\t// console.log(\"valid dataset\");\r\n\r\n\t\tlet datasetObj: any = {};\r\n\t\t// setup dataset JSON obj to write later\r\n\r\n\t\t// for each course\r\n\t\tfor (let str of jsonStrings) {\r\n\t\t\t// parse course into JSON object\r\n\r\n\t\t\t// if string is empty then skip it\r\n\t\t\tif(!str) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tlet course: any = {};\r\n\r\n\t\t\ttry {\r\n\t\t\t\tcourse = JSON.parse(str);\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// if not a JSON file then throw error\r\n\t\t\t\tthrow new InsightError(\"unsupported file type\");\r\n\t\t\t}\r\n\r\n\t\t\t// convert all sections of a course to TS classes\r\n\t\t\tlet sections = this.createSections(course);\r\n\r\n\t\t\t// add sections to dataset JSON object to be written later\r\n\t\t\tthis.updateDatasetObj(datasetObj, sections);\r\n\t\t}\r\n\r\n\t\t// write datasetOBJ to json file in ./src/controller/data/ dir\r\n\t\tthis.writeDataset(datasetObj, id);\r\n\r\n\t\t// create InsightDataset obj and fill in proper values\r\n\t\tconst dataset: InsightDataset = {\r\n\t\t\tid,\r\n\t\t\tkind: InsightDatasetKind.Sections,\r\n\t\t\tnumRows: Object.keys(datasetObj).length\r\n\t\t};\r\n\r\n\t\treturn dataset;\r\n\t}\r\n\r\n\t// writes a dataset to a JSON file\r\n\tprivate writeDataset(datasetObj: any, id: string) {\r\n\t\t// check if data directory exists\r\n\t\tfs.promises.stat(this.dataDir)\r\n\t\t\t.then((stats) => {\r\n\t\t\t\t// if the data directory exists then write to it\r\n\t\t\t\tif (stats.isDirectory()) {\r\n\t\t\t\t\tconst datasetJSONString = JSON.stringify(datasetObj, null, 2);\r\n\t\t\t\t\tfs.writeFile(this.dataDir + id + \".json\", datasetJSONString, \"utf-8\", (err) => {\r\n\t\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\t\tconsole.error(\"Error writing to file:\", err);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tconsole.log(\"File has been written successfully.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.log(`'${this.dataDir}' is not a directory.`);\r\n\t\t\t\t}\r\n\t\t\t}).catch((err) => {\r\n\t\t\t// make data dir if it doesn't exist\r\n\t\t\t\tfs.promises.mkdir(this.dataDir)\r\n\t\t\t\t\t.then(() => {\r\n\t\t\t\t\t\tconsole.log(`Directory '${this.dataDir}' created successfully.`);\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.catch((e) => {\r\n\t\t\t\t\t\tconsole.error(\"Error creating directory:\", e);\r\n\t\t\t\t\t});\r\n\t\t\t\tconsole.log(`Directory '${this.dataDir}' does not exist.`);\r\n\t\t\t});\r\n\t}\r\n\r\n// adds sections to a dataset JSON obj\r\n\tprivate updateDatasetObj(datasetObj: any, sections: Section[]): void {\r\n\t\tfor (let section of sections) {\r\n\t\t\tdatasetObj[section.uuid] = section;\r\n\t\t}\r\n\t}\r\n\r\n\t// INPUT: course JSON object\r\n\t// DOES: goes through each section and turns it into a section TS class\r\n\t// \t\t then puts section into array of sections for the course\r\n\t// OUTPUT: returns the array of sections for a course\r\n\tprivate createSections(course: any): Section[] {\r\n\t\tlet sections: Section[] = [];\r\n\r\n\t\tfor (let section of course.result) {\r\n\t\t\tlet sectionObject = new Section(section);\r\n\t\t\tsections.push(sectionObject);\r\n\t\t}\r\n\r\n\t\treturn sections;\r\n\t}\r\n\r\n\t// validates dataset\r\n\tprivate isValidDataset(jsonStrings: string[]): boolean {\r\n\t\tlet validCourses: boolean[] = [];\r\n\r\n\t\t// go through each course and validate it\r\n\t\tfor (let str of jsonStrings) {\r\n\r\n\t\t\t// if string is empty then skip it\r\n\t\t\tif(!str) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tlet course = JSON.parse(str);\r\n\t\t\tlet validCourse = this.isValidCourse(course);\r\n\t\t\tvalidCourses.push(validCourse);\r\n\t\t}\r\n\r\n\t\t// if every course is invalid then dataset is invalid\r\n\t\tif (validCourses.every((course) => !course)) {\r\n\t\t\tconsole.log(\"invalid dataset\");\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// INPUT: a course JSON object\r\n\t// DOES: checks the \"result\" entry of the object and for each item:\r\n\t// checks to see if it has all the keys needed to query a section\r\n\t// immediately returns false if \"result\" section is empty\r\n\t// OUTPUT: returns false if it is an invalid section\r\n\t//\t\t   returns true for a valid section\r\n\tprivate isValidCourse(course: any): boolean {\r\n\t\t// sections are contained within results\r\n\t\tlet validSections: boolean[] = [];\r\n\t\tconst results: any[] = course.result;\r\n\r\n\t\t// handle empty sections\r\n\t\tif (results.length < 1) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// check if all sections of a course are valid or not\r\n\t\t// for each section check if it's valid\r\n\t\tresults.forEach((section: any) => {\r\n\t\t\tlet validSection = this.isValidSection(section);\r\n\t\t\tvalidSections.push(validSection);\r\n\t\t});\r\n\r\n\t\t// if all sections of a course are invalid then course is invalid\r\n\t\tif (validSections.every((valid) => !valid)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\t// validate a single section\r\n\t// checks to see if a section has all validFields\r\n\tprivate isValidSection(section: any): boolean {\r\n\t\tthis.validFields.forEach((field: string) => {\r\n\t\t\tif (!(field in section)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\tpublic async removeDataset(id: string): Promise<string> {\r\n\t\t// Validate the dataset ID\r\n\t\tif (!id.trim() || id.includes(\"_\")) {\r\n\t\t\treturn Promise.reject(new InsightError(\"Invalid dataset ID.\"));\r\n\t\t}\r\n\r\n\t\t// Check if the dataset exists\r\n\t\tif (!this.datasets[id]) {\r\n\t\t\treturn Promise.reject(new NotFoundError(\"Dataset not found.\"));\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\t// Remove the dataset from the internal dictionary\r\n\t\t\tdelete this.datasets[id];\r\n\t\t\t// Attempt to delete the dataset file from the disk\r\n\t\t\tconst datasetPath = `${this.dataDir}/${id}.json`;\r\n\t\t\tawait fs.remove(datasetPath);\r\n\r\n\t\t\treturn Promise.resolve(id);\r\n\t\t} catch (error) {\r\n\t\t\treturn Promise.reject(new InsightError(`Failed to remove dataset ${id}: ${error}`));\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async performQuery(query: any): Promise<InsightResult[]> {\r\n\t\t// Step 1: Validate the query\r\n\t\tif (!this.isValidQuery(query)) {\r\n\t\t\treturn Promise.reject(new InsightError(\"Query is not valid.\"));\r\n\t\t}\r\n\t\t// Step 2: Determine the dataset ID to query\r\n\t\tconst datasetId = this.extractDatasetId(query);\r\n\t\tif (!datasetId || !this.datasets[datasetId]) {\r\n\t\t\treturn Promise.reject(new InsightError(\"Dataset ID is not found or not loaded.\"));\r\n\t\t}\r\n\t\t// Load the dataset from disk or memory as needed\r\n\t\tconst dataset = await this.loadDataset(datasetId);\r\n\t\t// Step 3: Parse the query to an intermediate representation (e.g., AST)\r\n\t\tconst parsedQuery = this.parseQuery(query);\r\n\t\t// Step 4: Execute the query against the dataset\r\n\t\tconst results = this.executeQuery(dataset, parsedQuery);\r\n\t\t// Step 5: Return the results\r\n\t\treturn Promise.resolve(results);\r\n\t}\r\n\r\n\tprivate isValidQuery(query: any): boolean {\r\n\t\t// Example: Check if the query has WHERE and OPTIONS sections\r\n\t\tif (!query || !query.WHERE || !query.OPTIONS) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t// Add more specific validations based on your query format\r\n\t\treturn true;\r\n\t}\r\n\r\n\tprivate extractDatasetId(query: any): string | null {\r\n\t\t// Example: Assuming dataset ID is specified in the OPTIONS section\r\n\t\tif (query && query.OPTIONS && query.OPTIONS.datasetId) {\r\n\t\t\treturn query.OPTIONS.datasetId;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tprivate async loadDataset(datasetId: string): Promise<any> {\r\n\t\t// Load and return the dataset from disk or memory\r\n\t\t// This assumes datasets are stored as JSON files in a `dataDir` directory\r\n\t\ttry {\r\n\t\t\tconst datasetPath = `${this.dataDir}/${datasetId}.json`;\r\n\t\t\treturn await fs.readJson(datasetPath);\r\n\t\t} catch (error) {\r\n\t\t\tthrow new InsightError(`Failed to load dataset ${datasetId}: ${error}`);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate parseQuery(query: any): any {\r\n\t\t// Convert the query to an intermediate form, such as an Abstract Syntax Tree (AST)\r\n\t\t// This is highly dependent on your query format and requirements\r\n\t\treturn {}; // Placeholder\r\n\t}\r\n\r\n\tprivate executeQuery(dataset: any, parsedQuery: any): InsightResult[] {\r\n\t\t// Execute the parsed query against the dataset\r\n\t\t// You'll need to implement the logic for filtering data based on the query\r\n\t\treturn []; // Placeholder\r\n\t}\r\n\r\n\tpublic async listDatasets(): Promise<InsightDataset[]> {\r\n\t\t// made with chatgpt\r\n\t\t// and an object with kind and numRows as the value\r\n\t\tconst datasetList: InsightDataset[] = Object.keys(this.datasets).map((id) => {\r\n\t\t\tconst dataset = this.datasets[id];\r\n\t\t\treturn {\r\n\t\t\t\tid: id, // Dataset ID from the dictionary key\r\n\t\t\t\tkind: dataset.kind, // Assuming the kind is directly stored in the dataset object\r\n\t\t\t\tnumRows: dataset.numRows\r\n\t\t\t};\r\n\t\t});\r\n\t\treturn Promise.resolve(datasetList);\r\n\t}\r\n\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"ba672bffab07f97a66878f7d43bd933b7680f31b","contentHash":"7dccf88dc37d015aa49c7865fc9eaf05c702f4a13b575d0cdebb6c2f2288ea4e"},"C:\\Users\\matth\\Desktop\\310 project\\project_team175\\src\\controller\\section.ts":{"path":"C:\\Users\\matth\\Desktop\\310 project\\project_team175\\src\\controller\\section.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":15,"column":8},"end":{"line":15,"column":35}},"2":{"start":{"line":16,"column":8},"end":{"line":16,"column":37}},"3":{"start":{"line":17,"column":8},"end":{"line":17,"column":39}},"4":{"start":{"line":18,"column":8},"end":{"line":18,"column":48}},"5":{"start":{"line":19,"column":8},"end":{"line":19,"column":46}},"6":{"start":{"line":20,"column":8},"end":{"line":20,"column":37}},"7":{"start":{"line":21,"column":8},"end":{"line":21,"column":35}},"8":{"start":{"line":22,"column":8},"end":{"line":22,"column":37}},"9":{"start":{"line":23,"column":8},"end":{"line":23,"column":37}},"10":{"start":{"line":24,"column":8},"end":{"line":24,"column":39}},"11":{"start":{"line":27,"column":0},"end":{"line":27,"column":26}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":14,"column":4},"end":{"line":14,"column":5}},"loc":{"start":{"line":14,"column":29},"end":{"line":25,"column":5}},"line":14}},"branchMap":{},"s":{"0":1,"1":452284,"2":452284,"3":452284,"4":452284,"5":452284,"6":452284,"7":452284,"8":452284,"9":452284,"10":452284,"11":1},"f":{"0":452284},"b":{},"inputSourceMap":{"version":3,"file":"C:/Users/matth/Desktop/310 project/project_team175/src/controller/section.ts","sources":["C:/Users/matth/Desktop/310 project/project_team175/src/controller/section.ts"],"names":[],"mappings":";;AACA,MAAqB,OAAO;IACX,IAAI,CAAS;IACb,EAAE,CAAU;IACZ,KAAK,CAAS;IACd,UAAU,CAAS;IACnB,UAAU,CAAS;IACnB,IAAI,CAAS;IACb,GAAG,CAAS;IACZ,IAAI,CAAS;IACb,IAAI,CAAS;IACb,KAAK,CAAS;IAE9B,YAAY,WAAgB;QAC3B,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC,EAAE,CAAC;QAC3B,IAAI,CAAC,EAAE,GAAG,WAAW,CAAC,MAAM,CAAC;QAC7B,IAAI,CAAC,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC;QAC/B,IAAI,CAAC,UAAU,GAAG,WAAW,CAAC,SAAS,CAAC;QACxC,IAAI,CAAC,UAAU,GAAG,WAAW,CAAC,OAAO,CAAC;QACtC,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC;QAC7B,IAAI,CAAC,GAAG,GAAG,WAAW,CAAC,GAAG,CAAC;QAC3B,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC;QAC7B,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC;QAC7B,IAAI,CAAC,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC;IAChC,CAAC;CACD;AAxBD,0BAwBC","sourcesContent":["\r\nexport default class Section {\r\n\tpublic readonly uuid: string;\r\n\tpublic readonly id: string ;\r\n\tpublic readonly title: string;\r\n\tpublic readonly instructor: string;\r\n\tpublic readonly department: string;\r\n\tpublic readonly year: number;\r\n\tpublic readonly avg: number;\r\n\tpublic readonly pass: number;\r\n\tpublic readonly fail: number;\r\n\tpublic readonly audit: number;\r\n\r\n\tconstructor(sectionJSON: any) {\r\n\t\tthis.uuid = sectionJSON.id;\r\n\t\tthis.id = sectionJSON.Course;\r\n\t\tthis.title = sectionJSON.Title;\r\n\t\tthis.instructor = sectionJSON.Professor;\r\n\t\tthis.department = sectionJSON.Subject;\r\n\t\tthis.year = sectionJSON.Year;\r\n\t\tthis.avg = sectionJSON.Avg;\r\n\t\tthis.pass = sectionJSON.Pass;\r\n\t\tthis.fail = sectionJSON.Fail;\r\n\t\tthis.audit = sectionJSON.Audit;\r\n\t}\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"5377ff8c7676f2fa96da83276c59fea1a8ecf1d0","contentHash":"ea3a1bd10b04d8a3d764bcca5cd36dc0b1d88eb51ba854600cc3241e7b06b039"}}