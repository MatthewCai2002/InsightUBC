{"C:\\Users\\David\\Desktop\\project_team175\\src\\controller\\IInsightFacade.ts":{"path":"C:\\Users\\David\\Desktop\\project_team175\\src\\controller\\IInsightFacade.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":113}},"2":{"start":{"line":5,"column":0},"end":{"line":8,"column":89}},"3":{"start":{"line":6,"column":4},"end":{"line":6,"column":48}},"4":{"start":{"line":7,"column":4},"end":{"line":7,"column":42}},"5":{"start":{"line":11,"column":8},"end":{"line":11,"column":23}},"6":{"start":{"line":12,"column":8},"end":{"line":12,"column":52}},"7":{"start":{"line":15,"column":0},"end":{"line":15,"column":36}},"8":{"start":{"line":18,"column":8},"end":{"line":18,"column":23}},"9":{"start":{"line":19,"column":8},"end":{"line":19,"column":53}},"10":{"start":{"line":22,"column":0},"end":{"line":22,"column":38}},"11":{"start":{"line":25,"column":8},"end":{"line":25,"column":23}},"12":{"start":{"line":26,"column":8},"end":{"line":26,"column":59}},"13":{"start":{"line":29,"column":0},"end":{"line":29,"column":50}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":1},"end":{"line":5,"column":2}},"loc":{"start":{"line":5,"column":31},"end":{"line":8,"column":1}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":4},"end":{"line":10,"column":5}},"loc":{"start":{"line":10,"column":25},"end":{"line":13,"column":5}},"line":10},"2":{"name":"(anonymous_2)","decl":{"start":{"line":17,"column":4},"end":{"line":17,"column":5}},"loc":{"start":{"line":17,"column":25},"end":{"line":20,"column":5}},"line":17},"3":{"name":"(anonymous_3)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":25},"end":{"line":27,"column":5}},"line":24}},"branchMap":{"0":{"loc":{"start":{"line":8,"column":24},"end":{"line":8,"column":87}},"type":"binary-expr","locations":[{"start":{"line":8,"column":24},"end":{"line":8,"column":50}},{"start":{"line":8,"column":55},"end":{"line":8,"column":86}}],"line":8}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":40,"6":40,"7":1,"8":1,"9":1,"10":1,"11":0,"12":0,"13":1},"f":{"0":1,"1":40,"2":1,"3":0},"b":{"0":[1,1]},"inputSourceMap":{"version":3,"file":"C:/Users/David/Desktop/project_team175/src/controller/IInsightFacade.ts","sources":["C:/Users/David/Desktop/project_team175/src/controller/IInsightFacade.ts"],"names":[],"mappings":";;;AAQA,IAAY,kBAGX;AAHD,WAAY,kBAAkB;IAC7B,2CAAqB,CAAA;IACrB,qCAAe,CAAA;AAChB,CAAC,EAHW,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAG7B;AAYD,MAAa,YAAa,SAAQ,KAAK;IACtC,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;IAC7C,CAAC;CACD;AALD,oCAKC;AAED,MAAa,aAAc,SAAQ,KAAK;IACvC,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;IAC9C,CAAC;CACD;AALD,sCAKC;AAED,MAAa,mBAAoB,SAAQ,KAAK;IAC7C,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC;IACpD,CAAC;CACD;AALD,kDAKC","sourcesContent":["/*\n * This is the primary high-level API for the project. In this folder there should be:\n * A class called InsightFacade, this should be in a file called InsightFacade.ts.\n * You should not change this interface at all or the test suite will not work.\n */\n\nimport JSZip from \"jszip\";\n\nexport enum InsightDatasetKind {\n\tSections = \"sections\",\n\tRooms = \"rooms\",\n}\n\nexport interface InsightDataset {\n\tid: string;\n\tkind: InsightDatasetKind;\n\tnumRows: number;\n}\n\nexport interface InsightResult {\n\t[key: string]: string | number;\n}\n\nexport class InsightError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, InsightError);\n\t}\n}\n\nexport class NotFoundError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, NotFoundError);\n\t}\n}\n\nexport class ResultTooLargeError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, ResultTooLargeError);\n\t}\n}\n\nexport interface IInsightFacade {\n\t/**\n\t * Add a dataset to insightUBC.\n\t *\n\t * @param id  The id of the dataset being added. Follows the format /^[^_]+$/\n\t * @param content  The base64 content of the dataset. This content should be in the form of a serialized zip file.\n\t * @param kind  The kind of the dataset\n\t *\n\t * @return Promise <string[]>\n\t *\n\t * The promise should fulfill on a successful add, reject for any failures.\n\t * The promise should fulfill with a string array,\n\t * containing the ids of all currently added datasets upon a successful add.\n\t * The promise should reject with an InsightError describing the error.\n\t *\n\t * An id is invalid if it contains an underscore, or is only whitespace characters.\n\t * If id is the same as the id of an already added dataset, the dataset should be rejected and not saved.\n\t *\n\t * After receiving the dataset, it should be processed into a data structure of\n\t * your design. The processed data structure should be persisted to disk; your\n\t * system should be able to load this persisted value into memory for answering\n\t * queries.\n\t *\n\t * Ultimately, a dataset must be added or loaded from disk before queries can\n\t * be successfully answered.\n\t */\n\taddDataset(id: string, content: string, kind: InsightDatasetKind): Promise<string[]>;\n\n\t/**\n\t * Remove a dataset from insightUBC.\n\t *\n\t * @param id  The id of the dataset to remove. Follows the format /^[^_]+$/\n\t *\n\t * @return Promise <string>\n\t *\n\t * The promise should fulfill upon a successful removal, reject on any error.\n\t * Attempting to remove a dataset that hasn't been added yet counts as an error.\n\t *\n\t * An id is invalid if it contains an underscore, or is only whitespace characters.\n\t *\n\t * The promise should fulfill the id of the dataset that was removed.\n\t * The promise should reject with a NotFoundError (if a valid id was not yet added)\n\t * or an InsightError (invalid id or any other source of failure) describing the error.\n\t *\n\t * This will delete both disk and memory caches for the dataset for the id meaning\n\t * that subsequent queries for that id should fail unless a new addDataset happens first.\n\t */\n\tremoveDataset(id: string): Promise<string>;\n\n\t/**\n\t * Perform a query on insightUBC.\n\t *\n\t * @param query  The query to be performed.\n\t *\n\t * If a query is incorrectly formatted, references a dataset not added (in memory or on disk),\n\t * or references multiple datasets, it should be rejected.\n\t *\n\t * @return Promise <InsightResult[]>\n\t *\n\t * The promise should fulfill with an array of results.\n\t * The promise should reject with a ResultTooLargeError (if the query returns too many results)\n\t * or an InsightError (for any other source of failure) describing the error.\n\t */\n\tperformQuery(query: unknown): Promise<InsightResult[]>;\n\n\t/**\n\t * List all currently added datasets, their types, and number of rows.\n\t *\n\t * @return Promise <InsightDataset[]>\n\t * The promise should fulfill an array of currently added InsightDatasets, and will only fulfill.\n\t */\n\tlistDatasets(): Promise<InsightDataset[]>;\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"ebbf8a14fa8488efc7954d7fa53a0d35e5c5e124","contentHash":"eb577d9b0a6051121f1f2089d07806658df16d205b7385231bd2c019d1d6eafa"},"C:\\Users\\David\\Desktop\\project_team175\\src\\controller\\InsightFacade.ts":{"path":"C:\\Users\\David\\Desktop\\project_team175\\src\\controller\\InsightFacade.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":12,"column":3}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"2":{"start":{"line":3,"column":26},"end":{"line":3,"column":33}},"3":{"start":{"line":4,"column":15},"end":{"line":4,"column":52}},"4":{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},"5":{"start":{"line":6,"column":6},"end":{"line":6,"column":68}},"6":{"start":{"line":6,"column":51},"end":{"line":6,"column":63}},"7":{"start":{"line":8,"column":4},"end":{"line":8,"column":39}},"8":{"start":{"line":10,"column":4},"end":{"line":10,"column":33}},"9":{"start":{"line":10,"column":26},"end":{"line":10,"column":33}},"10":{"start":{"line":11,"column":4},"end":{"line":11,"column":17}},"11":{"start":{"line":13,"column":25},"end":{"line":17,"column":2}},"12":{"start":{"line":14,"column":4},"end":{"line":14,"column":72}},"13":{"start":{"line":16,"column":4},"end":{"line":16,"column":21}},"14":{"start":{"line":18,"column":19},"end":{"line":24,"column":1}},"15":{"start":{"line":19,"column":4},"end":{"line":19,"column":42}},"16":{"start":{"line":19,"column":31},"end":{"line":19,"column":42}},"17":{"start":{"line":20,"column":17},"end":{"line":20,"column":19}},"18":{"start":{"line":21,"column":4},"end":{"line":21,"column":141}},"19":{"start":{"line":21,"column":21},"end":{"line":21,"column":141}},"20":{"start":{"line":21,"column":40},"end":{"line":21,"column":141}},"21":{"start":{"line":21,"column":109},"end":{"line":21,"column":141}},"22":{"start":{"line":22,"column":4},"end":{"line":22,"column":36}},"23":{"start":{"line":23,"column":4},"end":{"line":23,"column":18}},"24":{"start":{"line":25,"column":22},"end":{"line":27,"column":1}},"25":{"start":{"line":26,"column":4},"end":{"line":26,"column":62}},"26":{"start":{"line":28,"column":0},"end":{"line":28,"column":62}},"27":{"start":{"line":29,"column":25},"end":{"line":29,"column":52}},"28":{"start":{"line":30,"column":11},"end":{"line":30,"column":44}},"29":{"start":{"line":31,"column":16},"end":{"line":31,"column":49}},"30":{"start":{"line":32,"column":18},"end":{"line":32,"column":55}},"31":{"start":{"line":33,"column":20},"end":{"line":33,"column":59}},"32":{"start":{"line":34,"column":17},"end":{"line":34,"column":53}},"33":{"start":{"line":36,"column":17},"end":{"line":47,"column":5}},"34":{"start":{"line":48,"column":15},"end":{"line":48,"column":17}},"35":{"start":{"line":49,"column":14},"end":{"line":49,"column":23}},"36":{"start":{"line":51,"column":8},"end":{"line":53,"column":9}},"37":{"start":{"line":52,"column":12},"end":{"line":52,"column":91}},"38":{"start":{"line":54,"column":8},"end":{"line":56,"column":9}},"39":{"start":{"line":55,"column":12},"end":{"line":55,"column":112}},"40":{"start":{"line":57,"column":8},"end":{"line":75,"column":9}},"41":{"start":{"line":59,"column":24},"end":{"line":59,"column":45}},"42":{"start":{"line":60,"column":35},"end":{"line":60,"column":65}},"43":{"start":{"line":61,"column":36},"end":{"line":61,"column":89}},"44":{"start":{"line":62,"column":12},"end":{"line":68,"column":13}},"45":{"start":{"line":64,"column":20},"end":{"line":64,"column":84}},"46":{"start":{"line":65,"column":20},"end":{"line":65,"column":26}},"47":{"start":{"line":67,"column":20},"end":{"line":67,"column":106}},"48":{"start":{"line":69,"column":12},"end":{"line":69,"column":40}},"49":{"start":{"line":70,"column":12},"end":{"line":70,"column":52}},"50":{"start":{"line":71,"column":12},"end":{"line":71,"column":63}},"51":{"start":{"line":74,"column":12},"end":{"line":74,"column":104}},"52":{"start":{"line":78,"column":25},"end":{"line":78,"column":27}},"53":{"start":{"line":79,"column":8},"end":{"line":82,"column":11}},"54":{"start":{"line":80,"column":32},"end":{"line":80,"column":50}},"55":{"start":{"line":81,"column":12},"end":{"line":81,"column":39}},"56":{"start":{"line":83,"column":26},"end":{"line":83,"column":53}},"57":{"start":{"line":84,"column":8},"end":{"line":86,"column":9}},"58":{"start":{"line":85,"column":12},"end":{"line":85,"column":71}},"59":{"start":{"line":87,"column":25},"end":{"line":87,"column":27}},"60":{"start":{"line":88,"column":8},"end":{"line":101,"column":9}},"61":{"start":{"line":89,"column":12},"end":{"line":91,"column":13}},"62":{"start":{"line":90,"column":16},"end":{"line":90,"column":25}},"63":{"start":{"line":92,"column":25},"end":{"line":92,"column":27}},"64":{"start":{"line":93,"column":12},"end":{"line":98,"column":13}},"65":{"start":{"line":94,"column":16},"end":{"line":94,"column":41}},"66":{"start":{"line":97,"column":16},"end":{"line":97,"column":81}},"67":{"start":{"line":99,"column":27},"end":{"line":99,"column":54}},"68":{"start":{"line":100,"column":12},"end":{"line":100,"column":56}},"69":{"start":{"line":102,"column":8},"end":{"line":102,"column":48}},"70":{"start":{"line":103,"column":24},"end":{"line":107,"column":9}},"71":{"start":{"line":108,"column":8},"end":{"line":108,"column":23}},"72":{"start":{"line":111,"column":8},"end":{"line":123,"column":9}},"73":{"start":{"line":112,"column":12},"end":{"line":116,"column":15}},"74":{"start":{"line":113,"column":16},"end":{"line":113,"column":75}},"75":{"start":{"line":114,"column":16},"end":{"line":114,"column":54}},"76":{"start":{"line":115,"column":16},"end":{"line":115,"column":81}},"77":{"start":{"line":117,"column":38},"end":{"line":117,"column":73}},"78":{"start":{"line":118,"column":12},"end":{"line":118,"column":97}},"79":{"start":{"line":119,"column":12},"end":{"line":119,"column":63}},"80":{"start":{"line":122,"column":12},"end":{"line":122,"column":77}},"81":{"start":{"line":126,"column":8},"end":{"line":128,"column":9}},"82":{"start":{"line":127,"column":12},"end":{"line":127,"column":47}},"83":{"start":{"line":131,"column":23},"end":{"line":131,"column":25}},"84":{"start":{"line":132,"column":8},"end":{"line":135,"column":9}},"85":{"start":{"line":133,"column":32},"end":{"line":133,"column":62}},"86":{"start":{"line":134,"column":12},"end":{"line":134,"column":41}},"87":{"start":{"line":136,"column":8},"end":{"line":136,"column":24}},"88":{"start":{"line":139,"column":27},"end":{"line":139,"column":29}},"89":{"start":{"line":140,"column":8},"end":{"line":147,"column":9}},"90":{"start":{"line":141,"column":12},"end":{"line":143,"column":13}},"91":{"start":{"line":142,"column":16},"end":{"line":142,"column":25}},"92":{"start":{"line":144,"column":25},"end":{"line":144,"column":40}},"93":{"start":{"line":145,"column":30},"end":{"line":145,"column":56}},"94":{"start":{"line":146,"column":12},"end":{"line":146,"column":43}},"95":{"start":{"line":148,"column":8},"end":{"line":151,"column":9}},"96":{"start":{"line":148,"column":43},"end":{"line":148,"column":50}},"97":{"start":{"line":149,"column":12},"end":{"line":149,"column":43}},"98":{"start":{"line":150,"column":12},"end":{"line":150,"column":25}},"99":{"start":{"line":152,"column":8},"end":{"line":152,"column":20}},"100":{"start":{"line":155,"column":28},"end":{"line":155,"column":30}},"101":{"start":{"line":156,"column":24},"end":{"line":156,"column":37}},"102":{"start":{"line":157,"column":8},"end":{"line":159,"column":9}},"103":{"start":{"line":158,"column":12},"end":{"line":158,"column":25}},"104":{"start":{"line":160,"column":8},"end":{"line":163,"column":11}},"105":{"start":{"line":161,"column":31},"end":{"line":161,"column":59}},"106":{"start":{"line":162,"column":12},"end":{"line":162,"column":45}},"107":{"start":{"line":164,"column":8},"end":{"line":166,"column":9}},"108":{"start":{"line":164,"column":43},"end":{"line":164,"column":49}},"109":{"start":{"line":165,"column":12},"end":{"line":165,"column":25}},"110":{"start":{"line":167,"column":8},"end":{"line":167,"column":20}},"111":{"start":{"line":170,"column":8},"end":{"line":174,"column":11}},"112":{"start":{"line":171,"column":12},"end":{"line":173,"column":13}},"113":{"start":{"line":172,"column":16},"end":{"line":172,"column":29}},"114":{"start":{"line":175,"column":8},"end":{"line":175,"column":20}},"115":{"start":{"line":178,"column":8},"end":{"line":180,"column":9}},"116":{"start":{"line":179,"column":12},"end":{"line":179,"column":92}},"117":{"start":{"line":181,"column":8},"end":{"line":183,"column":9}},"118":{"start":{"line":182,"column":12},"end":{"line":182,"column":92}},"119":{"start":{"line":184,"column":8},"end":{"line":192,"column":9}},"120":{"start":{"line":185,"column":12},"end":{"line":185,"column":37}},"121":{"start":{"line":186,"column":32},"end":{"line":186,"column":60}},"122":{"start":{"line":187,"column":12},"end":{"line":187,"column":41}},"123":{"start":{"line":188,"column":12},"end":{"line":188,"column":39}},"124":{"start":{"line":191,"column":12},"end":{"line":191,"column":113}},"125":{"start":{"line":195,"column":26},"end":{"line":195,"column":51}},"126":{"start":{"line":196,"column":25},"end":{"line":196,"column":47}},"127":{"start":{"line":197,"column":22},"end":{"line":197,"column":52}},"128":{"start":{"line":198,"column":8},"end":{"line":200,"column":9}},"129":{"start":{"line":199,"column":12},"end":{"line":199,"column":97}},"130":{"start":{"line":201,"column":26},"end":{"line":201,"column":34}},"131":{"start":{"line":202,"column":8},"end":{"line":204,"column":9}},"132":{"start":{"line":203,"column":12},"end":{"line":203,"column":106}},"133":{"start":{"line":205,"column":24},"end":{"line":205,"column":57}},"134":{"start":{"line":206,"column":32},"end":{"line":206,"column":82}},"135":{"start":{"line":207,"column":8},"end":{"line":207,"column":18}},"136":{"start":{"line":210,"column":28},"end":{"line":210,"column":62}},"137":{"start":{"line":211,"column":8},"end":{"line":218,"column":9}},"138":{"start":{"line":212,"column":28},"end":{"line":212,"column":58}},"139":{"start":{"line":213,"column":12},"end":{"line":213,"column":83}},"140":{"start":{"line":213,"column":66},"end":{"line":213,"column":80}},"141":{"start":{"line":216,"column":12},"end":{"line":216,"column":75}},"142":{"start":{"line":217,"column":12},"end":{"line":217,"column":101}},"143":{"start":{"line":221,"column":28},"end":{"line":228,"column":10}},"144":{"start":{"line":222,"column":28},"end":{"line":222,"column":45}},"145":{"start":{"line":223,"column":12},"end":{"line":227,"column":14}},"146":{"start":{"line":229,"column":8},"end":{"line":229,"column":44}},"147":{"start":{"line":232,"column":0},"end":{"line":232,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":74},"end":{"line":2,"column":75}},"loc":{"start":{"line":2,"column":96},"end":{"line":9,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":6,"column":38},"end":{"line":6,"column":39}},"loc":{"start":{"line":6,"column":49},"end":{"line":6,"column":65}},"line":6},"2":{"name":"(anonymous_2)","decl":{"start":{"line":9,"column":6},"end":{"line":9,"column":7}},"loc":{"start":{"line":9,"column":28},"end":{"line":12,"column":1}},"line":9},"3":{"name":"(anonymous_3)","decl":{"start":{"line":13,"column":80},"end":{"line":13,"column":81}},"loc":{"start":{"line":13,"column":95},"end":{"line":15,"column":1}},"line":13},"4":{"name":"(anonymous_4)","decl":{"start":{"line":15,"column":5},"end":{"line":15,"column":6}},"loc":{"start":{"line":15,"column":20},"end":{"line":17,"column":1}},"line":15},"5":{"name":"(anonymous_5)","decl":{"start":{"line":18,"column":50},"end":{"line":18,"column":51}},"loc":{"start":{"line":18,"column":65},"end":{"line":24,"column":1}},"line":18},"6":{"name":"(anonymous_6)","decl":{"start":{"line":25,"column":56},"end":{"line":25,"column":57}},"loc":{"start":{"line":25,"column":71},"end":{"line":27,"column":1}},"line":25},"7":{"name":"(anonymous_7)","decl":{"start":{"line":50,"column":4},"end":{"line":50,"column":5}},"loc":{"start":{"line":50,"column":40},"end":{"line":76,"column":5}},"line":50},"8":{"name":"(anonymous_8)","decl":{"start":{"line":77,"column":4},"end":{"line":77,"column":5}},"loc":{"start":{"line":77,"column":41},"end":{"line":109,"column":5}},"line":77},"9":{"name":"(anonymous_9)","decl":{"start":{"line":79,"column":20},"end":{"line":79,"column":21}},"loc":{"start":{"line":79,"column":44},"end":{"line":82,"column":9}},"line":79},"10":{"name":"(anonymous_10)","decl":{"start":{"line":110,"column":4},"end":{"line":110,"column":5}},"loc":{"start":{"line":110,"column":39},"end":{"line":124,"column":5}},"line":110},"11":{"name":"(anonymous_11)","decl":{"start":{"line":112,"column":55},"end":{"line":112,"column":56}},"loc":{"start":{"line":112,"column":67},"end":{"line":116,"column":13}},"line":112},"12":{"name":"(anonymous_12)","decl":{"start":{"line":125,"column":4},"end":{"line":125,"column":5}},"loc":{"start":{"line":125,"column":43},"end":{"line":129,"column":5}},"line":125},"13":{"name":"(anonymous_13)","decl":{"start":{"line":130,"column":4},"end":{"line":130,"column":5}},"loc":{"start":{"line":130,"column":27},"end":{"line":137,"column":5}},"line":130},"14":{"name":"(anonymous_14)","decl":{"start":{"line":138,"column":4},"end":{"line":138,"column":5}},"loc":{"start":{"line":138,"column":32},"end":{"line":153,"column":5}},"line":138},"15":{"name":"(anonymous_15)","decl":{"start":{"line":148,"column":31},"end":{"line":148,"column":32}},"loc":{"start":{"line":148,"column":43},"end":{"line":148,"column":50}},"line":148},"16":{"name":"(anonymous_16)","decl":{"start":{"line":154,"column":4},"end":{"line":154,"column":5}},"loc":{"start":{"line":154,"column":26},"end":{"line":168,"column":5}},"line":154},"17":{"name":"(anonymous_17)","decl":{"start":{"line":160,"column":24},"end":{"line":160,"column":25}},"loc":{"start":{"line":160,"column":37},"end":{"line":163,"column":9}},"line":160},"18":{"name":"(anonymous_18)","decl":{"start":{"line":164,"column":32},"end":{"line":164,"column":33}},"loc":{"start":{"line":164,"column":43},"end":{"line":164,"column":49}},"line":164},"19":{"name":"(anonymous_19)","decl":{"start":{"line":169,"column":4},"end":{"line":169,"column":5}},"loc":{"start":{"line":169,"column":28},"end":{"line":176,"column":5}},"line":169},"20":{"name":"(anonymous_20)","decl":{"start":{"line":170,"column":32},"end":{"line":170,"column":33}},"loc":{"start":{"line":170,"column":43},"end":{"line":174,"column":9}},"line":170},"21":{"name":"(anonymous_21)","decl":{"start":{"line":177,"column":4},"end":{"line":177,"column":5}},"loc":{"start":{"line":177,"column":28},"end":{"line":193,"column":5}},"line":177},"22":{"name":"(anonymous_22)","decl":{"start":{"line":194,"column":4},"end":{"line":194,"column":5}},"loc":{"start":{"line":194,"column":30},"end":{"line":208,"column":5}},"line":194},"23":{"name":"(anonymous_23)","decl":{"start":{"line":209,"column":4},"end":{"line":209,"column":5}},"loc":{"start":{"line":209,"column":33},"end":{"line":219,"column":5}},"line":209},"24":{"name":"(anonymous_24)","decl":{"start":{"line":213,"column":47},"end":{"line":213,"column":48}},"loc":{"start":{"line":213,"column":66},"end":{"line":213,"column":80}},"line":213},"25":{"name":"(anonymous_25)","decl":{"start":{"line":220,"column":4},"end":{"line":220,"column":5}},"loc":{"start":{"line":220,"column":25},"end":{"line":230,"column":5}},"line":220},"26":{"name":"(anonymous_26)","decl":{"start":{"line":221,"column":59},"end":{"line":221,"column":60}},"loc":{"start":{"line":221,"column":67},"end":{"line":228,"column":9}},"line":221}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":12,"column":3}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":57},"end":{"line":12,"column":2}}],"line":2},"1":{"loc":{"start":{"line":2,"column":57},"end":{"line":12,"column":2}},"type":"cond-expr","locations":[{"start":{"line":2,"column":74},"end":{"line":9,"column":1}},{"start":{"line":9,"column":6},"end":{"line":12,"column":1}}],"line":2},"2":{"loc":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"type":"if","locations":[{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},{"start":{"line":3,"column":4},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},"type":"if","locations":[{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},{"start":{"line":5,"column":4},"end":{"line":7,"column":5}}],"line":5},"4":{"loc":{"start":{"line":5,"column":8},"end":{"line":5,"column":85}},"type":"binary-expr","locations":[{"start":{"line":5,"column":8},"end":{"line":5,"column":13}},{"start":{"line":5,"column":18},"end":{"line":5,"column":84}}],"line":5},"5":{"loc":{"start":{"line":5,"column":18},"end":{"line":5,"column":84}},"type":"cond-expr","locations":[{"start":{"line":5,"column":34},"end":{"line":5,"column":47}},{"start":{"line":5,"column":50},"end":{"line":5,"column":84}}],"line":5},"6":{"loc":{"start":{"line":5,"column":50},"end":{"line":5,"column":84}},"type":"binary-expr","locations":[{"start":{"line":5,"column":50},"end":{"line":5,"column":63}},{"start":{"line":5,"column":67},"end":{"line":5,"column":84}}],"line":5},"7":{"loc":{"start":{"line":10,"column":4},"end":{"line":10,"column":33}},"type":"if","locations":[{"start":{"line":10,"column":4},"end":{"line":10,"column":33}},{"start":{"line":10,"column":4},"end":{"line":10,"column":33}}],"line":10},"8":{"loc":{"start":{"line":13,"column":25},"end":{"line":17,"column":2}},"type":"binary-expr","locations":[{"start":{"line":13,"column":26},"end":{"line":13,"column":30}},{"start":{"line":13,"column":34},"end":{"line":13,"column":57}},{"start":{"line":13,"column":63},"end":{"line":17,"column":1}}],"line":13},"9":{"loc":{"start":{"line":13,"column":63},"end":{"line":17,"column":1}},"type":"cond-expr","locations":[{"start":{"line":13,"column":80},"end":{"line":15,"column":1}},{"start":{"line":15,"column":5},"end":{"line":17,"column":1}}],"line":13},"10":{"loc":{"start":{"line":18,"column":19},"end":{"line":24,"column":1}},"type":"binary-expr","locations":[{"start":{"line":18,"column":20},"end":{"line":18,"column":24}},{"start":{"line":18,"column":28},"end":{"line":18,"column":45}},{"start":{"line":18,"column":50},"end":{"line":24,"column":1}}],"line":18},"11":{"loc":{"start":{"line":19,"column":4},"end":{"line":19,"column":42}},"type":"if","locations":[{"start":{"line":19,"column":4},"end":{"line":19,"column":42}},{"start":{"line":19,"column":4},"end":{"line":19,"column":42}}],"line":19},"12":{"loc":{"start":{"line":19,"column":8},"end":{"line":19,"column":29}},"type":"binary-expr","locations":[{"start":{"line":19,"column":8},"end":{"line":19,"column":11}},{"start":{"line":19,"column":15},"end":{"line":19,"column":29}}],"line":19},"13":{"loc":{"start":{"line":21,"column":4},"end":{"line":21,"column":141}},"type":"if","locations":[{"start":{"line":21,"column":4},"end":{"line":21,"column":141}},{"start":{"line":21,"column":4},"end":{"line":21,"column":141}}],"line":21},"14":{"loc":{"start":{"line":21,"column":40},"end":{"line":21,"column":141}},"type":"if","locations":[{"start":{"line":21,"column":40},"end":{"line":21,"column":141}},{"start":{"line":21,"column":40},"end":{"line":21,"column":141}}],"line":21},"15":{"loc":{"start":{"line":21,"column":44},"end":{"line":21,"column":107}},"type":"binary-expr","locations":[{"start":{"line":21,"column":44},"end":{"line":21,"column":59}},{"start":{"line":21,"column":63},"end":{"line":21,"column":107}}],"line":21},"16":{"loc":{"start":{"line":25,"column":22},"end":{"line":27,"column":1}},"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":27}},{"start":{"line":25,"column":31},"end":{"line":25,"column":51}},{"start":{"line":25,"column":56},"end":{"line":27,"column":1}}],"line":25},"17":{"loc":{"start":{"line":26,"column":11},"end":{"line":26,"column":61}},"type":"cond-expr","locations":[{"start":{"line":26,"column":37},"end":{"line":26,"column":40}},{"start":{"line":26,"column":43},"end":{"line":26,"column":61}}],"line":26},"18":{"loc":{"start":{"line":26,"column":12},"end":{"line":26,"column":33}},"type":"binary-expr","locations":[{"start":{"line":26,"column":12},"end":{"line":26,"column":15}},{"start":{"line":26,"column":19},"end":{"line":26,"column":33}}],"line":26},"19":{"loc":{"start":{"line":51,"column":8},"end":{"line":53,"column":9}},"type":"if","locations":[{"start":{"line":51,"column":8},"end":{"line":53,"column":9}},{"start":{"line":51,"column":8},"end":{"line":53,"column":9}}],"line":51},"20":{"loc":{"start":{"line":51,"column":12},"end":{"line":51,"column":42}},"type":"binary-expr","locations":[{"start":{"line":51,"column":12},"end":{"line":51,"column":22}},{"start":{"line":51,"column":26},"end":{"line":51,"column":42}}],"line":51},"21":{"loc":{"start":{"line":54,"column":8},"end":{"line":56,"column":9}},"type":"if","locations":[{"start":{"line":54,"column":8},"end":{"line":56,"column":9}},{"start":{"line":54,"column":8},"end":{"line":56,"column":9}}],"line":54},"22":{"loc":{"start":{"line":62,"column":12},"end":{"line":68,"column":13}},"type":"switch","locations":[{"start":{"line":63,"column":16},"end":{"line":65,"column":26}},{"start":{"line":66,"column":16},"end":{"line":67,"column":106}}],"line":62},"23":{"loc":{"start":{"line":84,"column":8},"end":{"line":86,"column":9}},"type":"if","locations":[{"start":{"line":84,"column":8},"end":{"line":86,"column":9}},{"start":{"line":84,"column":8},"end":{"line":86,"column":9}}],"line":84},"24":{"loc":{"start":{"line":89,"column":12},"end":{"line":91,"column":13}},"type":"if","locations":[{"start":{"line":89,"column":12},"end":{"line":91,"column":13}},{"start":{"line":89,"column":12},"end":{"line":91,"column":13}}],"line":89},"25":{"loc":{"start":{"line":141,"column":12},"end":{"line":143,"column":13}},"type":"if","locations":[{"start":{"line":141,"column":12},"end":{"line":143,"column":13}},{"start":{"line":141,"column":12},"end":{"line":143,"column":13}}],"line":141},"26":{"loc":{"start":{"line":148,"column":8},"end":{"line":151,"column":9}},"type":"if","locations":[{"start":{"line":148,"column":8},"end":{"line":151,"column":9}},{"start":{"line":148,"column":8},"end":{"line":151,"column":9}}],"line":148},"27":{"loc":{"start":{"line":157,"column":8},"end":{"line":159,"column":9}},"type":"if","locations":[{"start":{"line":157,"column":8},"end":{"line":159,"column":9}},{"start":{"line":157,"column":8},"end":{"line":159,"column":9}}],"line":157},"28":{"loc":{"start":{"line":164,"column":8},"end":{"line":166,"column":9}},"type":"if","locations":[{"start":{"line":164,"column":8},"end":{"line":166,"column":9}},{"start":{"line":164,"column":8},"end":{"line":166,"column":9}}],"line":164},"29":{"loc":{"start":{"line":171,"column":12},"end":{"line":173,"column":13}},"type":"if","locations":[{"start":{"line":171,"column":12},"end":{"line":173,"column":13}},{"start":{"line":171,"column":12},"end":{"line":173,"column":13}}],"line":171},"30":{"loc":{"start":{"line":178,"column":8},"end":{"line":180,"column":9}},"type":"if","locations":[{"start":{"line":178,"column":8},"end":{"line":180,"column":9}},{"start":{"line":178,"column":8},"end":{"line":180,"column":9}}],"line":178},"31":{"loc":{"start":{"line":178,"column":12},"end":{"line":178,"column":42}},"type":"binary-expr","locations":[{"start":{"line":178,"column":12},"end":{"line":178,"column":22}},{"start":{"line":178,"column":26},"end":{"line":178,"column":42}}],"line":178},"32":{"loc":{"start":{"line":181,"column":8},"end":{"line":183,"column":9}},"type":"if","locations":[{"start":{"line":181,"column":8},"end":{"line":183,"column":9}},{"start":{"line":181,"column":8},"end":{"line":183,"column":9}}],"line":181},"33":{"loc":{"start":{"line":198,"column":8},"end":{"line":200,"column":9}},"type":"if","locations":[{"start":{"line":198,"column":8},"end":{"line":200,"column":9}},{"start":{"line":198,"column":8},"end":{"line":200,"column":9}}],"line":198},"34":{"loc":{"start":{"line":202,"column":8},"end":{"line":204,"column":9}},"type":"if","locations":[{"start":{"line":202,"column":8},"end":{"line":204,"column":9}},{"start":{"line":202,"column":8},"end":{"line":204,"column":9}}],"line":202}},"s":{"0":1,"1":148,"2":148,"3":148,"4":148,"5":148,"6":34,"7":148,"8":0,"9":0,"10":0,"11":1,"12":1,"13":0,"14":1,"15":1,"16":0,"17":1,"18":1,"19":1,"20":148,"21":148,"22":1,"23":1,"24":1,"25":4,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":17,"34":17,"35":17,"36":14,"37":4,"38":10,"39":0,"40":10,"41":10,"42":10,"43":10,"44":10,"45":9,"46":8,"47":1,"48":8,"49":8,"50":8,"51":1,"52":9,"53":9,"54":47563,"55":47563,"56":9,"57":9,"58":1,"59":8,"60":8,"61":47560,"62":8,"63":47552,"64":47552,"65":47552,"66":0,"67":47552,"68":47552,"69":8,"70":8,"71":8,"72":8,"73":8,"74":6,"75":6,"76":6,"77":8,"78":8,"79":8,"80":0,"81":47552,"82":516896,"83":47552,"84":47552,"85":516896,"86":516896,"87":47552,"88":9,"89":9,"90":47563,"91":8,"92":47555,"93":47555,"94":47555,"95":9,"96":19,"97":1,"98":1,"99":8,"100":47555,"101":47555,"102":47555,"103":18843,"104":28712,"105":516896,"106":516896,"107":28712,"108":28712,"109":0,"110":28712,"111":516896,"112":5168960,"113":0,"114":516896,"115":6,"116":3,"117":3,"118":1,"119":2,"120":2,"121":2,"122":2,"123":2,"124":0,"125":25,"126":25,"127":25,"128":10,"129":0,"130":10,"131":10,"132":0,"133":10,"134":10,"135":10,"136":10,"137":10,"138":10,"139":10,"140":646120,"141":0,"142":0,"143":4,"144":4,"145":4,"146":4,"147":1},"f":{"0":148,"1":34,"2":0,"3":1,"4":0,"5":1,"6":4,"7":14,"8":9,"9":47563,"10":8,"11":6,"12":47552,"13":47552,"14":9,"15":19,"16":47555,"17":516896,"18":28712,"19":516896,"20":5168960,"21":6,"22":25,"23":10,"24":646120,"25":4,"26":4},"b":{"0":[1,1,1],"1":[1,0],"2":[148,0],"3":[148,0],"4":[148,148],"5":[0,148],"6":[148,0],"7":[0,0],"8":[1,1,1],"9":[1,0],"10":[1,1,1],"11":[0,1],"12":[1,1],"13":[1,0],"14":[148,0],"15":[148,148],"16":[1,1,1],"17":[3,1],"18":[4,4],"19":[4,10],"20":[14,10],"21":[0,10],"22":[9,1],"23":[1,8],"24":[8,47552],"25":[8,47555],"26":[1,8],"27":[18843,28712],"28":[0,28712],"29":[0,5168960],"30":[3,3],"31":[6,4],"32":[1,2],"33":[0,10],"34":[0,10]},"inputSourceMap":{"version":3,"file":"C:/Users/David/Desktop/project_team175/src/controller/InsightFacade.ts","sources":["C:/Users/David/Desktop/project_team175/src/controller/InsightFacade.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n\tIInsightFacade,\r\n\tInsightDataset,\r\n\tInsightDatasetKind,\r\n\tInsightError,\r\n\tInsightResult,\r\n\tNotFoundError,\r\n} from \"./IInsightFacade\";\r\nimport * as fs from \"fs-extra\";\r\nimport JSZip from \"jszip\";\r\nimport Section from \"./section\";\r\nimport Validator from \"./validator\";\r\nimport Filter from \"./filter\";\r\n\r\n// Assuming the structure of your options object based on the provided code\r\ninterface QueryOptions {\r\n\tCOLUMNS: string[];\r\n\tORDER?: string; // Optional\r\n}\r\n\r\nexport default class InsightFacade implements IInsightFacade {\r\n\tprivate fileFields: string[] = [\r\n\t\t\"id\",\r\n\t\t\"Course\",\r\n\t\t\"Title\",\r\n\t\t\"Professor\",\r\n\t\t\"Subject\",\r\n\t\t\"Year\",\r\n\t\t\"Avg\",\r\n\t\t\"Pass\",\r\n\t\t\"Fail\",\r\n\t\t\"Audit\",\r\n\t];\r\n\r\n\tprivate datasets: {[id: string]: InsightDataset} = {};\r\n\tprivate readonly dataDir = \"./data/\";\r\n\r\n\tpublic async addDataset(id: string, content: string, kind: InsightDatasetKind): Promise<string[]> {\r\n\t\tif (!id.trim() || id.includes(\"_\")) {\r\n\t\t\treturn Promise.reject(new InsightError(\"Invalid dataset ID\"));\r\n\t\t}\r\n\t\tif (this.datasets[id]) {\r\n\t\t\treturn Promise.reject(new InsightError(\"Dataset with the same ID already exists\"));\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tlet dataset: InsightDataset;\r\n\r\n\t\t\t// unzip dataset\r\n\t\t\tconst zip = new JSZip();\r\n\t\t\tconst decodedContent = Buffer.from(content, \"base64\");\r\n\t\t\tconst unzippedContent = await zip.loadAsync(decodedContent, {base64: true});\r\n\r\n\t\t\t// process dataset\r\n\t\t\tswitch (kind) {\r\n\t\t\t\tcase InsightDatasetKind.Sections:\r\n\t\t\t\t\tdataset = await this.processCoursesDataset(id, unzippedContent);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn Promise.reject(new InsightError(\"Unsupported dataset kind.\"));\r\n\t\t\t}\r\n\r\n\t\t\t// add dataset to dataset dict\r\n\t\t\tthis.datasets[id] = dataset;\r\n\r\n\t\t\t// return array of all added datasets\r\n\t\t\tconsole.log(Object.keys(this.datasets));\r\n\t\t\treturn Promise.resolve(Object.keys(this.datasets));\r\n\t\t} catch (error) {\r\n\t\t\treturn Promise.reject(new InsightError(`Failed to add dataset: ${error}`));\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async processCoursesDataset(id: string, zip: JSZip): Promise<InsightDataset> {\r\n\t\tconst promises: Array<Promise<string>> = [];\r\n\r\n\t\t// for each course file, read its contents\r\n\t\t// and push it onto an array of promises\r\n\t\tzip.forEach((relativePath, file) => {\r\n\t\t\tconst jsonPromise = file.async(\"text\");\r\n\t\t\tpromises.push(jsonPromise);\r\n\t\t});\r\n\r\n\t\t// resolve all promises to get an array of course JSON strings\r\n\t\tlet jsonStrings = await Promise.all(promises);\r\n\r\n\t\t// validate Dataset\r\n\t\tif (!this.isValidDataset(jsonStrings)) {\r\n\t\t\t// console.log(\"invalid dataset\");\r\n\t\t\tthrow new InsightError(\"Invalid Dataset\");\r\n\t\t}\r\n\t\t// console.log(\"valid dataset\");\r\n\r\n\t\tlet datasetObj: any = {};\r\n\t\t// setup dataset JSON obj to write later\r\n\r\n\t\t// for each course\r\n\t\tfor (let str of jsonStrings) {\r\n\t\t\t// parse course into JSON object\r\n\r\n\t\t\t// if string is empty then skip it\r\n\t\t\tif (!str) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tlet course: any = {};\r\n\r\n\t\t\ttry {\r\n\t\t\t\tcourse = JSON.parse(str);\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// if not a JSON file then throw error\r\n\t\t\t\tthrow new InsightError(\"unsupported file type\");\r\n\t\t\t}\r\n\r\n\t\t\t// convert all sections of a course to TS classes\r\n\t\t\tlet sections = this.createSections(course);\r\n\r\n\t\t\t// add sections to dataset JSON object to be written later\r\n\t\t\tthis.updateDatasetObj(datasetObj, sections);\r\n\t\t}\r\n\r\n\t\t// write datasetOBJ to json file in ./src/controller/data/ dir\r\n\t\tawait this.writeDataset(datasetObj, id);\r\n\r\n\t\t// create InsightDataset obj and fill in proper values\r\n\t\tconst dataset: InsightDataset = {\r\n\t\t\tid,\r\n\t\t\tkind: InsightDatasetKind.Sections,\r\n\t\t\tnumRows: Object.keys(datasetObj).length,\r\n\t\t};\r\n\r\n\t\treturn dataset;\r\n\t}\r\n\r\n\t// writes a dataset to a JSON file\r\n\tprivate async writeDataset(datasetObj: any, id: string) {\r\n\t\t// check if data directory exists\r\n\t\ttry {\r\n\t\t\t// Check if the directory exists; if not, try to create it\r\n\t\t\tawait fs.promises.stat(this.dataDir).catch(async () => {\r\n\t\t\t\tconsole.log(`Directory '${this.dataDir}' does not exist.`);\r\n\t\t\t\tawait fs.promises.mkdir(this.dataDir);\r\n\t\t\t\tconsole.log(`Directory '${this.dataDir}' created successfully.`);\r\n\t\t\t});\r\n\r\n\t\t\t// Prepare the dataset JSON string\r\n\t\t\tconst datasetJSONString = JSON.stringify(datasetObj, null, 2);\r\n\r\n\t\t\t// Write the file\r\n\t\t\tawait fs.promises.writeFile(this.dataDir + id + \".json\", datasetJSONString, \"utf-8\");\r\n\t\t\tconsole.log(\"File has been written successfully.\");\r\n\t\t} catch (e) {\r\n\t\t\tconsole.error(\"Error writing to file or creating directory:\", e);\r\n\t\t}\r\n\t}\r\n\r\n\t// adds sections to a dataset JSON obj\r\n\tprivate updateDatasetObj(datasetObj: any, sections: Section[]): void {\r\n\t\tfor (let section of sections) {\r\n\t\t\tdatasetObj[section.uuid] = section;\r\n\t\t}\r\n\t}\r\n\r\n\t// INPUT: course JSON object\r\n\t// DOES: goes through each section and turns it into a section TS class\r\n\t// \t\t then puts section into array of sections for the course\r\n\t// OUTPUT: returns the array of sections for a course\r\n\tprivate createSections(course: any): Section[] {\r\n\t\tlet sections: Section[] = [];\r\n\r\n\t\tfor (let section of course.result) {\r\n\t\t\tlet sectionObject = new Section(section);\r\n\t\t\tsections.push(sectionObject);\r\n\t\t}\r\n\r\n\t\treturn sections;\r\n\t}\r\n\r\n\t// validates dataset\r\n\tprivate isValidDataset(jsonStrings: string[]): boolean {\r\n\t\tlet validCourses: boolean[] = [];\r\n\r\n\t\t// go through each course and validate it\r\n\t\tfor (let str of jsonStrings) {\r\n\t\t\t// if string is empty then skip it\r\n\t\t\tif (!str) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tlet course = JSON.parse(str);\r\n\t\t\tlet validCourse = this.isValidCourse(course);\r\n\t\t\tvalidCourses.push(validCourse);\r\n\t\t}\r\n\r\n\t\t// if every course is invalid then dataset is invalid\r\n\t\tif (validCourses.every((course) => !course)) {\r\n\t\t\tconsole.log(\"invalid dataset\");\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// INPUT: a course JSON object\r\n\t// DOES: checks the \"result\" entry of the object and for each item:\r\n\t// checks to see if it has all the keys needed to query a section\r\n\t// immediately returns false if \"result\" section is empty\r\n\t// OUTPUT: returns false if it is an invalid section\r\n\t//\t\t   returns true for a valid section\r\n\tprivate isValidCourse(course: any): boolean {\r\n\t\t// sections are contained within results\r\n\t\tlet validSections: boolean[] = [];\r\n\t\tconst results: any[] = course.result;\r\n\r\n\t\t// handle empty sections\r\n\t\tif (results.length < 1) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t// check if all sections of a course are valid or not\r\n\t\t// for each section check if it's valid\r\n\t\tresults.forEach((section: any) => {\r\n\t\t\tlet validSection = this.isValidSection(section);\r\n\t\t\tvalidSections.push(validSection);\r\n\t\t});\r\n\t\t// if all sections of a course are invalid then course is invalid\r\n\t\tif (validSections.every((valid) => !valid)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// validate a single section\r\n\t// checks to see if a section has all validFields\r\n\tprivate isValidSection(section: any): boolean {\r\n\t\tthis.fileFields.forEach((field: string) => {\r\n\t\t\tif (!(field in section)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn true;\r\n\t}\r\n\r\n\tpublic async removeDataset(id: string): Promise<string> {\r\n\t\t// Validate the dataset ID\r\n\t\tif (!id.trim() || id.includes(\"_\")) {\r\n\t\t\treturn Promise.reject(new InsightError(\"Invalid dataset ID.\"));\r\n\t\t}\r\n\t\t// Check if the dataset exists\r\n\t\tif (!this.datasets[id]) {\r\n\t\t\treturn Promise.reject(new NotFoundError(\"Dataset not found.\"));\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\t// Remove the dataset from the internal dictionary\r\n\t\t\tdelete this.datasets[id];\r\n\t\t\t// Attempt to delete the dataset file from the disk\r\n\t\t\tconst datasetPath = `${this.dataDir}/${id}.json`;\r\n\t\t\tawait fs.remove(datasetPath);\r\n\r\n\t\t\treturn Promise.resolve(id);\r\n\t\t} catch (error) {\r\n\t\t\treturn Promise.reject(new InsightError(`Failed to remove dataset ${id}: ${error}`));\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async performQuery(query: any): Promise<InsightResult[]> {\r\n\t\tconst validator: Validator = new Validator();\r\n\t\tconst filterer: Filter = new Filter();\r\n\r\n\t\tconst valid: any = validator.validateQuery(query);\r\n\t\tif (!valid.valid) {\r\n\t\t\treturn Promise.reject(new InsightError(\"Query validation failed.\"));\r\n\t\t}\r\n\t\tconst datasetId = valid.id;\r\n\t\tif (!datasetId) {\r\n\t\t\tthrow new InsightError(\"Dataset ID could not be determined from the query.\");\r\n\t\t}\r\n\t\tconst dataset = await this.loadDataset(datasetId);\r\n\t\tconst filteredResults = filterer.filterByWhereClause(dataset, query.WHERE);\r\n\t\t// Apply transformations (if any) and options to the filtered results\r\n\t\t// Continue with query processing on the loaded dataset...\r\n\t\t// This would involve filtering the dataset based on the WHERE clause,\r\n\t\t// applying any transformations, and then selecting/sorting based on OPTIONS.\r\n\t\treturn [];\r\n\t}\r\n\r\n\tprivate async loadDataset(datasetId: string): Promise<any> {\r\n\t\t// loads the dataset in\r\n\t\tconst datasetPath = this.dataDir + datasetId + \".json\"; // Assuming this.dataDir is './data/'\r\n\t\ttry {\r\n\t\t\tconst dataset = await fs.readJson(datasetPath);\r\n\t\t\treturn Object.entries(dataset).map(([key, value]) => ({key, value}));\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(`Failed to load dataset ${datasetId}: ${error}`);\r\n\t\t\tthrow new InsightError(`Failed to load dataset ${datasetId}: ${error}`);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async listDatasets(): Promise<InsightDataset[]> {\r\n\t\t// and an object with kind and numRows as the value\r\n\t\tconst datasetList: InsightDataset[] = Object.keys(this.datasets).map((id) => {\r\n\t\t\tconst dataset = this.datasets[id];\r\n\t\t\treturn {\r\n\t\t\t\tid: id, // Dataset ID from the dictionary key\r\n\t\t\t\tkind: dataset.kind, // Assuming the kind is directly stored in the dataset object\r\n\t\t\t\tnumRows: dataset.numRows,\r\n\t\t\t};\r\n\t\t});\r\n\t\treturn Promise.resolve(datasetList);\r\n\t}\r\n}\r\n\r\n// TODO: determine the dataset to query using ID\r\n//\t\t1. dataset JSON files in./data/ are named with their ID\r\n//\t\t\ta. can iterate through all files in ./data/ to find a JSON file with name == ID\r\n//\t\t2. load that JSON file\r\n// takes in an already parsed JSON object\r\n// makes sure that the query is valid\r\n\r\n// TODO: query through dataset to find data that matches query\r\n//\t\t1. this will be done recursively\r\n//\t\t\ta. idea is that we will recurse until a leaf clause (just a clause with no nested clauses)\r\n//\t\t\t-> then filter through all sections using just the leaf clause\r\n//\t\t\t-> then return the result of this filtering (array) to the callee\r\n//\t\t\t-> this means that we pass filtered data to the higher level clauses\r\n//\t\t\t-> then the higher level clauses will apply their own filter\r\n//\t\t\t-> essentially layering filters on top of each other\r\n//\t\t\t-> eventually we return back up to the WHERE clause which is when we finish querying\r\n//\t\t2. need a function to handle every EBNF keyword\r\n//\t\t\ta. ie: handleWhere would be the highest level function\r\n//\t\t\t\twhich calls the other filtering functions appropriately depending\r\n//\t\t\t\tdepending on what clauses are in the where (might need a switch statement to do this)\r\n//\t\t3. we have a top level function which takes in a query obj\r\n//\t\t\thandles any preprocessing needed, formatting, calling handlers, returning the final result etc\r\n//\t\t\t\twill also need to handle test queries with an expected field in the JSON file\r\n//\t\t\t\t^^^ this part might not be right and might be handled by the test suite actually\r\n//\t\t\ta. should call handleWhere, handleOptions etc\r\n// TODO: validate Query recursively.\r\n//\t\t 1. check if the query follows EBNF\r\n//\t\t\t- all queries need to have a WHERE clause\r\n//\t\t\ta. (ie: query has a WHERE clause, and looks like WHERE: {EQ: ubc.id is 1}} or something)\r\n//\t\t\t\t- as we check through where and options we must check for db references\r\n//\t\t\tb. need to check if current keyword is an EBNF keyword\r\n//\t\t\tc. need to check if current word is being used correctly\r\n//\t\t\t\t- ie: IS: {ubc.id: 1} is how you use the IS keyword\r\n//\t\t\t\t      but IS: [{ubc.id: 1}, {ubc.id: 2}] isn't.\r\n//\t\t\t\t- this part will have to be done recursively\r\n//\t\t\t\t\t-> curr word is only valid of all children are valid\r\n//\t\t\t\t\t-> need to check if chlidren are valid\r\n//\t\t\t\t\t-> keep recursing until a leaf node (a clause with no nested clauses)\r\n//\t\t\t\t\t-> return up the call stack until curr.\r\n//\t\t\t\t\t-> if curr and all its children are valid then curr is valid\r\n//\t\t 2. check if the query references 1 DB.\r\n//\t\t \ta. (ie: ubc.id is 1 is fine but ubc.id is ubc2.id isn't)\r\n//\t\t\tb. maybe we could have a dictionary with all the DBs seen so far and length should be < 2\r\n//\t\t\t\t- then as we recurse through the query we can just check the length of this each time\r\n//\t\t 3. cannot check for the 5000 result limit initially, so check it as we find results.\r\n//\t\t\ta. put results into an array and at the end of performQuery if arr.length > 5000 then return invalid\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"cd667e1801c51574c6b59508c75a605f06100778","contentHash":"7b61feda247138ff4dc13dd90f3389fcf8b3be28c7d1599a5f4fc68b691bf967"},"C:\\Users\\David\\Desktop\\project_team175\\src\\controller\\section.ts":{"path":"C:\\Users\\David\\Desktop\\project_team175\\src\\controller\\section.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":15,"column":8},"end":{"line":15,"column":35}},"2":{"start":{"line":16,"column":8},"end":{"line":16,"column":37}},"3":{"start":{"line":17,"column":8},"end":{"line":17,"column":39}},"4":{"start":{"line":18,"column":8},"end":{"line":18,"column":48}},"5":{"start":{"line":19,"column":8},"end":{"line":19,"column":46}},"6":{"start":{"line":20,"column":8},"end":{"line":20,"column":37}},"7":{"start":{"line":21,"column":8},"end":{"line":21,"column":35}},"8":{"start":{"line":22,"column":8},"end":{"line":22,"column":37}},"9":{"start":{"line":23,"column":8},"end":{"line":23,"column":37}},"10":{"start":{"line":24,"column":8},"end":{"line":24,"column":39}},"11":{"start":{"line":27,"column":0},"end":{"line":27,"column":26}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":14,"column":4},"end":{"line":14,"column":5}},"loc":{"start":{"line":14,"column":29},"end":{"line":25,"column":5}},"line":14}},"branchMap":{},"s":{"0":1,"1":516896,"2":516896,"3":516896,"4":516896,"5":516896,"6":516896,"7":516896,"8":516896,"9":516896,"10":516896,"11":1},"f":{"0":516896},"b":{},"inputSourceMap":{"version":3,"file":"C:/Users/David/Desktop/project_team175/src/controller/section.ts","sources":["C:/Users/David/Desktop/project_team175/src/controller/section.ts"],"names":[],"mappings":";;AAAA,MAAqB,OAAO;IACX,IAAI,CAAS;IACb,EAAE,CAAS;IACX,KAAK,CAAS;IACd,UAAU,CAAS;IACnB,UAAU,CAAS;IACnB,IAAI,CAAS;IACb,GAAG,CAAS;IACZ,IAAI,CAAS;IACb,IAAI,CAAS;IACb,KAAK,CAAS;IAE9B,YAAY,WAAgB;QAC3B,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC,EAAE,CAAC;QAC3B,IAAI,CAAC,EAAE,GAAG,WAAW,CAAC,MAAM,CAAC;QAC7B,IAAI,CAAC,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC;QAC/B,IAAI,CAAC,UAAU,GAAG,WAAW,CAAC,SAAS,CAAC;QACxC,IAAI,CAAC,UAAU,GAAG,WAAW,CAAC,OAAO,CAAC;QACtC,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC;QAC7B,IAAI,CAAC,GAAG,GAAG,WAAW,CAAC,GAAG,CAAC;QAC3B,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC;QAC7B,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC;QAC7B,IAAI,CAAC,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC;IAChC,CAAC;CACD;AAxBD,0BAwBC","sourcesContent":["export default class Section {\r\n\tpublic readonly uuid: string;\r\n\tpublic readonly id: string;\r\n\tpublic readonly title: string;\r\n\tpublic readonly instructor: string;\r\n\tpublic readonly department: string;\r\n\tpublic readonly year: number;\r\n\tpublic readonly avg: number;\r\n\tpublic readonly pass: number;\r\n\tpublic readonly fail: number;\r\n\tpublic readonly audit: number;\r\n\r\n\tconstructor(sectionJSON: any) {\r\n\t\tthis.uuid = sectionJSON.id;\r\n\t\tthis.id = sectionJSON.Course;\r\n\t\tthis.title = sectionJSON.Title;\r\n\t\tthis.instructor = sectionJSON.Professor;\r\n\t\tthis.department = sectionJSON.Subject;\r\n\t\tthis.year = sectionJSON.Year;\r\n\t\tthis.avg = sectionJSON.Avg;\r\n\t\tthis.pass = sectionJSON.Pass;\r\n\t\tthis.fail = sectionJSON.Fail;\r\n\t\tthis.audit = sectionJSON.Audit;\r\n\t}\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"02ea2497864994cae94348911aa4d880c6d8029a","contentHash":"3b2c7426c20b56b6be98b988a091406f45c660ea8f3ef7dca05168064242c001"},"C:\\Users\\David\\Desktop\\project_team175\\src\\controller\\validator.ts":{"path":"C:\\Users\\David\\Desktop\\project_team175\\src\\controller\\validator.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":25},"end":{"line":3,"column":52}},"2":{"start":{"line":5,"column":20},"end":{"line":17,"column":5}},"3":{"start":{"line":18,"column":14},"end":{"line":18,"column":54}},"4":{"start":{"line":19,"column":14},"end":{"line":19,"column":59}},"5":{"start":{"line":21,"column":23},"end":{"line":21,"column":32}},"6":{"start":{"line":22,"column":8},"end":{"line":24,"column":9}},"7":{"start":{"line":23,"column":12},"end":{"line":23,"column":81}},"8":{"start":{"line":25,"column":8},"end":{"line":27,"column":9}},"9":{"start":{"line":26,"column":12},"end":{"line":26,"column":83}},"10":{"start":{"line":28,"column":27},"end":{"line":28,"column":68}},"11":{"start":{"line":29,"column":25},"end":{"line":29,"column":70}},"12":{"start":{"line":30,"column":18},"end":{"line":33,"column":9}},"13":{"start":{"line":34,"column":8},"end":{"line":34,"column":19}},"14":{"start":{"line":37,"column":20},"end":{"line":37,"column":45}},"15":{"start":{"line":38,"column":8},"end":{"line":40,"column":9}},"16":{"start":{"line":39,"column":12},"end":{"line":39,"column":71}},"17":{"start":{"line":41,"column":8},"end":{"line":43,"column":9}},"18":{"start":{"line":42,"column":12},"end":{"line":42,"column":69}},"19":{"start":{"line":44,"column":20},"end":{"line":44,"column":59}},"20":{"start":{"line":45,"column":8},"end":{"line":47,"column":9}},"21":{"start":{"line":46,"column":12},"end":{"line":46,"column":87}},"22":{"start":{"line":48,"column":8},"end":{"line":48,"column":21}},"23":{"start":{"line":51,"column":20},"end":{"line":51,"column":41}},"24":{"start":{"line":52,"column":8},"end":{"line":67,"column":9}},"25":{"start":{"line":54,"column":16},"end":{"line":54,"column":67}},"26":{"start":{"line":56,"column":16},"end":{"line":56,"column":66}},"27":{"start":{"line":58,"column":16},"end":{"line":58,"column":63}},"28":{"start":{"line":60,"column":16},"end":{"line":60,"column":59}},"29":{"start":{"line":64,"column":16},"end":{"line":64,"column":64}},"30":{"start":{"line":66,"column":16},"end":{"line":66,"column":75}},"31":{"start":{"line":70,"column":8},"end":{"line":70,"column":27}},"32":{"start":{"line":71,"column":19},"end":{"line":71,"column":40}},"33":{"start":{"line":72,"column":24},"end":{"line":72,"column":35}},"34":{"start":{"line":73,"column":8},"end":{"line":73,"column":41}},"35":{"start":{"line":74,"column":25},"end":{"line":74,"column":40}},"36":{"start":{"line":75,"column":8},"end":{"line":77,"column":9}},"37":{"start":{"line":76,"column":12},"end":{"line":76,"column":73}},"38":{"start":{"line":78,"column":22},"end":{"line":78,"column":33}},"39":{"start":{"line":79,"column":23},"end":{"line":79,"column":34}},"40":{"start":{"line":80,"column":8},"end":{"line":82,"column":9}},"41":{"start":{"line":81,"column":12},"end":{"line":81,"column":69}},"42":{"start":{"line":83,"column":8},"end":{"line":85,"column":9}},"43":{"start":{"line":84,"column":12},"end":{"line":84,"column":69}},"44":{"start":{"line":86,"column":8},"end":{"line":86,"column":28}},"45":{"start":{"line":87,"column":8},"end":{"line":87,"column":20}},"46":{"start":{"line":90,"column":27},"end":{"line":90,"column":29}},"47":{"start":{"line":91,"column":8},"end":{"line":93,"column":9}},"48":{"start":{"line":92,"column":12},"end":{"line":92,"column":76}},"49":{"start":{"line":94,"column":8},"end":{"line":96,"column":9}},"50":{"start":{"line":95,"column":12},"end":{"line":95,"column":63}},"51":{"start":{"line":97,"column":8},"end":{"line":99,"column":9}},"52":{"start":{"line":97,"column":42},"end":{"line":97,"column":47}},"53":{"start":{"line":98,"column":12},"end":{"line":98,"column":24}},"54":{"start":{"line":100,"column":8},"end":{"line":100,"column":72}},"55":{"start":{"line":103,"column":21},"end":{"line":103,"column":42}},"56":{"start":{"line":104,"column":18},"end":{"line":104,"column":29}},"57":{"start":{"line":105,"column":25},"end":{"line":105,"column":40}},"58":{"start":{"line":106,"column":22},"end":{"line":106,"column":33}},"59":{"start":{"line":107,"column":23},"end":{"line":107,"column":34}},"60":{"start":{"line":108,"column":8},"end":{"line":110,"column":9}},"61":{"start":{"line":109,"column":12},"end":{"line":109,"column":73}},"62":{"start":{"line":111,"column":8},"end":{"line":113,"column":9}},"63":{"start":{"line":112,"column":12},"end":{"line":112,"column":70}},"64":{"start":{"line":114,"column":8},"end":{"line":128,"column":9}},"65":{"start":{"line":115,"column":12},"end":{"line":115,"column":76}},"66":{"start":{"line":118,"column":30},"end":{"line":118,"column":33}},"67":{"start":{"line":119,"column":12},"end":{"line":121,"column":13}},"68":{"start":{"line":120,"column":16},"end":{"line":120,"column":71}},"69":{"start":{"line":122,"column":12},"end":{"line":124,"column":13}},"70":{"start":{"line":123,"column":16},"end":{"line":123,"column":75}},"71":{"start":{"line":125,"column":12},"end":{"line":127,"column":13}},"72":{"start":{"line":126,"column":16},"end":{"line":126,"column":80}},"73":{"start":{"line":129,"column":8},"end":{"line":129,"column":28}},"74":{"start":{"line":130,"column":8},"end":{"line":130,"column":20}},"75":{"start":{"line":133,"column":8},"end":{"line":135,"column":9}},"76":{"start":{"line":134,"column":12},"end":{"line":134,"column":71}},"77":{"start":{"line":136,"column":8},"end":{"line":138,"column":9}},"78":{"start":{"line":137,"column":12},"end":{"line":137,"column":92}},"79":{"start":{"line":139,"column":26},"end":{"line":139,"column":59}},"80":{"start":{"line":140,"column":8},"end":{"line":151,"column":9}},"81":{"start":{"line":141,"column":29},"end":{"line":141,"column":43}},"82":{"start":{"line":142,"column":26},"end":{"line":142,"column":37}},"83":{"start":{"line":143,"column":26},"end":{"line":143,"column":37}},"84":{"start":{"line":144,"column":12},"end":{"line":146,"column":13}},"85":{"start":{"line":145,"column":16},"end":{"line":145,"column":77}},"86":{"start":{"line":147,"column":12},"end":{"line":149,"column":13}},"87":{"start":{"line":148,"column":16},"end":{"line":148,"column":73}},"88":{"start":{"line":150,"column":12},"end":{"line":150,"column":32}},"89":{"start":{"line":152,"column":8},"end":{"line":164,"column":9}},"90":{"start":{"line":153,"column":24},"end":{"line":153,"column":37}},"91":{"start":{"line":154,"column":29},"end":{"line":154,"column":43}},"92":{"start":{"line":155,"column":12},"end":{"line":157,"column":13}},"93":{"start":{"line":156,"column":16},"end":{"line":156,"column":77}},"94":{"start":{"line":158,"column":26},"end":{"line":158,"column":37}},"95":{"start":{"line":159,"column":26},"end":{"line":159,"column":37}},"96":{"start":{"line":160,"column":12},"end":{"line":162,"column":13}},"97":{"start":{"line":161,"column":16},"end":{"line":161,"column":76}},"98":{"start":{"line":163,"column":12},"end":{"line":163,"column":32}},"99":{"start":{"line":165,"column":8},"end":{"line":167,"column":9}},"100":{"start":{"line":166,"column":12},"end":{"line":166,"column":87}},"101":{"start":{"line":168,"column":8},"end":{"line":168,"column":20}},"102":{"start":{"line":171,"column":0},"end":{"line":171,"column":28}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":20,"column":4},"end":{"line":20,"column":5}},"loc":{"start":{"line":20,"column":25},"end":{"line":35,"column":5}},"line":20},"1":{"name":"(anonymous_1)","decl":{"start":{"line":36,"column":4},"end":{"line":36,"column":5}},"loc":{"start":{"line":36,"column":39},"end":{"line":49,"column":5}},"line":36},"2":{"name":"(anonymous_2)","decl":{"start":{"line":50,"column":4},"end":{"line":50,"column":5}},"loc":{"start":{"line":50,"column":35},"end":{"line":68,"column":5}},"line":50},"3":{"name":"(anonymous_3)","decl":{"start":{"line":69,"column":4},"end":{"line":69,"column":5}},"loc":{"start":{"line":69,"column":40},"end":{"line":88,"column":5}},"line":69},"4":{"name":"(anonymous_4)","decl":{"start":{"line":89,"column":4},"end":{"line":89,"column":5}},"loc":{"start":{"line":89,"column":44},"end":{"line":101,"column":5}},"line":89},"5":{"name":"(anonymous_5)","decl":{"start":{"line":97,"column":31},"end":{"line":97,"column":32}},"loc":{"start":{"line":97,"column":42},"end":{"line":97,"column":47}},"line":97},"6":{"name":"(anonymous_6)","decl":{"start":{"line":102,"column":4},"end":{"line":102,"column":5}},"loc":{"start":{"line":102,"column":32},"end":{"line":131,"column":5}},"line":102},"7":{"name":"(anonymous_7)","decl":{"start":{"line":132,"column":4},"end":{"line":132,"column":5}},"loc":{"start":{"line":132,"column":39},"end":{"line":169,"column":5}},"line":132}},"branchMap":{"0":{"loc":{"start":{"line":22,"column":8},"end":{"line":24,"column":9}},"type":"if","locations":[{"start":{"line":22,"column":8},"end":{"line":24,"column":9}},{"start":{"line":22,"column":8},"end":{"line":24,"column":9}}],"line":22},"1":{"loc":{"start":{"line":25,"column":8},"end":{"line":27,"column":9}},"type":"if","locations":[{"start":{"line":25,"column":8},"end":{"line":27,"column":9}},{"start":{"line":25,"column":8},"end":{"line":27,"column":9}}],"line":25},"2":{"loc":{"start":{"line":31,"column":19},"end":{"line":31,"column":41}},"type":"binary-expr","locations":[{"start":{"line":31,"column":19},"end":{"line":31,"column":29}},{"start":{"line":31,"column":33},"end":{"line":31,"column":41}}],"line":31},"3":{"loc":{"start":{"line":38,"column":8},"end":{"line":40,"column":9}},"type":"if","locations":[{"start":{"line":38,"column":8},"end":{"line":40,"column":9}},{"start":{"line":38,"column":8},"end":{"line":40,"column":9}}],"line":38},"4":{"loc":{"start":{"line":41,"column":8},"end":{"line":43,"column":9}},"type":"if","locations":[{"start":{"line":41,"column":8},"end":{"line":43,"column":9}},{"start":{"line":41,"column":8},"end":{"line":43,"column":9}}],"line":41},"5":{"loc":{"start":{"line":45,"column":8},"end":{"line":47,"column":9}},"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":47,"column":9}},{"start":{"line":45,"column":8},"end":{"line":47,"column":9}}],"line":45},"6":{"loc":{"start":{"line":52,"column":8},"end":{"line":67,"column":9}},"type":"switch","locations":[{"start":{"line":53,"column":12},"end":{"line":54,"column":67}},{"start":{"line":55,"column":12},"end":{"line":56,"column":66}},{"start":{"line":57,"column":12},"end":{"line":58,"column":63}},{"start":{"line":59,"column":12},"end":{"line":60,"column":59}},{"start":{"line":61,"column":12},"end":{"line":61,"column":22}},{"start":{"line":62,"column":12},"end":{"line":62,"column":22}},{"start":{"line":63,"column":12},"end":{"line":64,"column":64}},{"start":{"line":65,"column":12},"end":{"line":66,"column":75}}],"line":52},"7":{"loc":{"start":{"line":75,"column":8},"end":{"line":77,"column":9}},"type":"if","locations":[{"start":{"line":75,"column":8},"end":{"line":77,"column":9}},{"start":{"line":75,"column":8},"end":{"line":77,"column":9}}],"line":75},"8":{"loc":{"start":{"line":80,"column":8},"end":{"line":82,"column":9}},"type":"if","locations":[{"start":{"line":80,"column":8},"end":{"line":82,"column":9}},{"start":{"line":80,"column":8},"end":{"line":82,"column":9}}],"line":80},"9":{"loc":{"start":{"line":83,"column":8},"end":{"line":85,"column":9}},"type":"if","locations":[{"start":{"line":83,"column":8},"end":{"line":85,"column":9}},{"start":{"line":83,"column":8},"end":{"line":85,"column":9}}],"line":83},"10":{"loc":{"start":{"line":91,"column":8},"end":{"line":93,"column":9}},"type":"if","locations":[{"start":{"line":91,"column":8},"end":{"line":93,"column":9}},{"start":{"line":91,"column":8},"end":{"line":93,"column":9}}],"line":91},"11":{"loc":{"start":{"line":97,"column":8},"end":{"line":99,"column":9}},"type":"if","locations":[{"start":{"line":97,"column":8},"end":{"line":99,"column":9}},{"start":{"line":97,"column":8},"end":{"line":99,"column":9}}],"line":97},"12":{"loc":{"start":{"line":108,"column":8},"end":{"line":110,"column":9}},"type":"if","locations":[{"start":{"line":108,"column":8},"end":{"line":110,"column":9}},{"start":{"line":108,"column":8},"end":{"line":110,"column":9}}],"line":108},"13":{"loc":{"start":{"line":111,"column":8},"end":{"line":113,"column":9}},"type":"if","locations":[{"start":{"line":111,"column":8},"end":{"line":113,"column":9}},{"start":{"line":111,"column":8},"end":{"line":113,"column":9}}],"line":111},"14":{"loc":{"start":{"line":114,"column":8},"end":{"line":128,"column":9}},"type":"if","locations":[{"start":{"line":114,"column":8},"end":{"line":128,"column":9}},{"start":{"line":114,"column":8},"end":{"line":128,"column":9}}],"line":114},"15":{"loc":{"start":{"line":119,"column":12},"end":{"line":121,"column":13}},"type":"if","locations":[{"start":{"line":119,"column":12},"end":{"line":121,"column":13}},{"start":{"line":119,"column":12},"end":{"line":121,"column":13}}],"line":119},"16":{"loc":{"start":{"line":122,"column":12},"end":{"line":124,"column":13}},"type":"if","locations":[{"start":{"line":122,"column":12},"end":{"line":124,"column":13}},{"start":{"line":122,"column":12},"end":{"line":124,"column":13}}],"line":122},"17":{"loc":{"start":{"line":125,"column":12},"end":{"line":127,"column":13}},"type":"if","locations":[{"start":{"line":125,"column":12},"end":{"line":127,"column":13}},{"start":{"line":125,"column":12},"end":{"line":127,"column":13}}],"line":125},"18":{"loc":{"start":{"line":133,"column":8},"end":{"line":135,"column":9}},"type":"if","locations":[{"start":{"line":133,"column":8},"end":{"line":135,"column":9}},{"start":{"line":133,"column":8},"end":{"line":135,"column":9}}],"line":133},"19":{"loc":{"start":{"line":133,"column":12},"end":{"line":133,"column":63}},"type":"binary-expr","locations":[{"start":{"line":133,"column":12},"end":{"line":133,"column":28}},{"start":{"line":133,"column":32},"end":{"line":133,"column":63}}],"line":133},"20":{"loc":{"start":{"line":136,"column":8},"end":{"line":138,"column":9}},"type":"if","locations":[{"start":{"line":136,"column":8},"end":{"line":138,"column":9}},{"start":{"line":136,"column":8},"end":{"line":138,"column":9}}],"line":136},"21":{"loc":{"start":{"line":136,"column":12},"end":{"line":136,"column":69}},"type":"binary-expr","locations":[{"start":{"line":136,"column":12},"end":{"line":136,"column":25}},{"start":{"line":136,"column":29},"end":{"line":136,"column":69}}],"line":136},"22":{"loc":{"start":{"line":144,"column":12},"end":{"line":146,"column":13}},"type":"if","locations":[{"start":{"line":144,"column":12},"end":{"line":146,"column":13}},{"start":{"line":144,"column":12},"end":{"line":146,"column":13}}],"line":144},"23":{"loc":{"start":{"line":147,"column":12},"end":{"line":149,"column":13}},"type":"if","locations":[{"start":{"line":147,"column":12},"end":{"line":149,"column":13}},{"start":{"line":147,"column":12},"end":{"line":149,"column":13}}],"line":147},"24":{"loc":{"start":{"line":152,"column":8},"end":{"line":164,"column":9}},"type":"if","locations":[{"start":{"line":152,"column":8},"end":{"line":164,"column":9}},{"start":{"line":152,"column":8},"end":{"line":164,"column":9}}],"line":152},"25":{"loc":{"start":{"line":155,"column":12},"end":{"line":157,"column":13}},"type":"if","locations":[{"start":{"line":155,"column":12},"end":{"line":157,"column":13}},{"start":{"line":155,"column":12},"end":{"line":157,"column":13}}],"line":155},"26":{"loc":{"start":{"line":160,"column":12},"end":{"line":162,"column":13}},"type":"if","locations":[{"start":{"line":160,"column":12},"end":{"line":162,"column":13}},{"start":{"line":160,"column":12},"end":{"line":162,"column":13}}],"line":160},"27":{"loc":{"start":{"line":165,"column":8},"end":{"line":167,"column":9}},"type":"if","locations":[{"start":{"line":165,"column":8},"end":{"line":167,"column":9}},{"start":{"line":165,"column":8},"end":{"line":167,"column":9}}],"line":165}},"s":{"0":1,"1":1,"2":26,"3":26,"4":26,"5":60,"6":60,"7":2,"8":58,"9":2,"10":56,"11":36,"12":30,"13":30,"14":56,"15":56,"16":4,"17":52,"18":2,"19":50,"20":38,"21":2,"22":36,"23":65,"24":65,"25":6,"26":2,"27":3,"28":29,"29":25,"30":0,"31":25,"32":25,"33":25,"34":25,"35":25,"36":25,"37":2,"38":23,"39":23,"40":23,"41":0,"42":23,"43":2,"44":21,"45":21,"46":8,"47":8,"48":2,"49":6,"50":12,"51":6,"52":12,"53":6,"54":0,"55":29,"56":29,"57":29,"58":29,"59":29,"60":29,"61":2,"62":27,"63":2,"64":25,"65":2,"66":23,"67":23,"68":2,"69":23,"70":2,"71":23,"72":0,"73":23,"74":23,"75":36,"76":2,"77":34,"78":2,"79":32,"80":32,"81":39,"82":39,"83":39,"84":39,"85":0,"86":39,"87":0,"88":39,"89":32,"90":32,"91":32,"92":32,"93":0,"94":32,"95":32,"96":32,"97":0,"98":32,"99":32,"100":2,"101":30,"102":1},"f":{"0":60,"1":56,"2":65,"3":25,"4":8,"5":12,"6":29,"7":36},"b":{"0":[2,58],"1":[2,56],"2":[30,30],"3":[4,52],"4":[2,50],"5":[2,36],"6":[6,2,3,29,1,16,25,0],"7":[2,23],"8":[0,23],"9":[2,21],"10":[2,6],"11":[6,0],"12":[2,27],"13":[2,25],"14":[2,23],"15":[2,21],"16":[2,21],"17":[0,23],"18":[2,34],"19":[36,34],"20":[2,32],"21":[34,34],"22":[0,39],"23":[0,39],"24":[32,0],"25":[0,32],"26":[0,32],"27":[2,30]},"inputSourceMap":{"version":3,"file":"C:/Users/David/Desktop/project_team175/src/controller/validator.ts","sources":["C:/Users/David/Desktop/project_team175/src/controller/validator.ts"],"names":[],"mappings":"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","sourcesContent":["import {InsightError} from \"./IInsightFacade\";\r\nimport {isArgumentsObject} from \"node:util/types\";\r\n\r\nexport default class Validator {\r\n\tprivate validKeywords: string[] = [\r\n\t\t\"WHERE\",\r\n\t\t\"OPTIONS\",\r\n\t\t\"COLUMNS\",\r\n\t\t\"ORDER\",\r\n\t\t\"IS\",\r\n\t\t\"NOT\",\r\n\t\t\"AND\",\r\n\t\t\"OR\",\r\n\t\t\"LT\",\r\n\t\t\"GT\",\r\n\t\t\"EQ\",\r\n\t];\r\n\r\n\tprivate mFields: string[] = [\"year\", \"avg\", \"pass\", \"fail\", \"audit\"];\r\n\tprivate sFields: string[] = [\"uuid\", \"id\", \"title\", \"instructor\", \"dept\"];\r\n\r\n\tpublic validateQuery(query: any): any {\r\n\t\t// Initialize a dictionary for tracking dataset references\r\n\t\tlet dbRefSet: Set<string> = new Set<string>();\r\n\r\n\t\t// Ensure the query contains both WHERE and OPTIONS clauses\r\n\t\tif (!(\"WHERE\" in query)) {\r\n\t\t\tthrow new InsightError(\"Query must contain WHERE.\");\r\n\t\t}\r\n\r\n\t\tif (!(\"OPTIONS\" in query)) {\r\n\t\t\tthrow new InsightError(\"Query must contain OPTIONS.\");\r\n\t\t}\r\n\r\n\t\t// Validate WHERE and OPTIONS clauses\r\n\t\tconst validWhere = this.validateWhere(query.WHERE, dbRefSet);\r\n\t\tconst validOpt = this.validateOptions(query.OPTIONS, dbRefSet);\r\n\r\n\t\tlet res = {\r\n\t\t\tvalid: validWhere && validOpt,\r\n\t\t\tid: [...dbRefSet][0],\r\n\t\t};\r\n\t\treturn res;\r\n\t}\r\n\r\n\tpublic validateWhere(currQuery: any, dbRefSet: Set<string>): boolean {\r\n\t\t// get filter key word\r\n\t\tconst key = Object.keys(currQuery)[0];\r\n\r\n\t\t// check if it's a valid keyword\r\n\t\tif (!this.validKeywords.includes(key)) {\r\n\t\t\tthrow new InsightError(\"Invalid keyword\");\r\n\t\t}\r\n\r\n\t\tif (Object.keys(currQuery).length > 1) {\r\n\t\t\tthrow new InsightError(\"invalid WHERE\");\r\n\t\t}\r\n\r\n\t\t// WHERE only has 1 nested obj\r\n\t\t// just call appropriate validator for the nested obj\r\n\t\tlet valid: boolean = this.callValidator(currQuery, dbRefSet);\r\n\t\tif (dbRefSet.size > 1) {\r\n\t\t\tthrow new InsightError(\"References to multiple Datasets\");\r\n\t\t}\r\n\t\treturn valid;\r\n\t}\r\n\r\n\tpublic callValidator(query: any, dbRefSet: Set<string>): boolean {\r\n\t\tconst key = Object.keys(query)[0];\r\n\t\tswitch (key) {\r\n\t\t\t// these 2 take lists of filters\r\n\t\t\tcase \"AND\":\r\n\t\t\t\treturn this.validateListQuery(query.AND, dbRefSet);\r\n\t\t\tcase \"OR\":\r\n\t\t\t\treturn this.validateListQuery(query.OR, dbRefSet);\r\n\r\n\t\t\t// this can have nested filters\r\n\t\t\tcase \"NOT\":\r\n\t\t\t\treturn this.callValidator(query.NOT, dbRefSet);\r\n\r\n\t\t\t// these ones can't have nested filters (base case)\r\n\t\t\tcase \"IS\":\r\n\t\t\t\treturn this.validateIs(query.IS, dbRefSet);\r\n\t\t\tcase \"LT\":\r\n\t\t\tcase \"GT\":\r\n\t\t\tcase \"EQ\":\r\n\t\t\t\treturn this.validateInequality(query, dbRefSet);\r\n\t\t\tdefault:\r\n\t\t\t\t// can't have string just on it's own in a where\r\n\t\t\t\t// must be nested inside one of the above filters\r\n\t\t\t\tthrow new InsightError(\"Invalid keyword\");\r\n\t\t}\r\n\t}\r\n\r\n\tprivate validateInequality(query: any, dbRefSet: Set<string>) {\r\n\t\tconsole.log(query);\r\n\t\tlet mKey = Object.keys(query)[0];\r\n\t\tlet nestedObj = query[mKey];\r\n\r\n\t\tmKey = Object.keys(nestedObj)[0];\r\n\r\n\t\tconst keyParts: string[] = mKey.split(\"_\");\r\n\r\n\t\t// if length > 2 then underscore must be in idStr\r\n\t\tif (keyParts.length > 2) {\r\n\t\t\tthrow new InsightError(\"Invalid ID String\");\r\n\t\t}\r\n\r\n\t\t// get mKey components\r\n\t\tconst idStr = keyParts[0];\r\n\t\tconst mField = keyParts[1];\r\n\r\n\t\t// check if mfield is valid\r\n\t\tif (!this.mFields.includes(mField)) {\r\n\t\t\tthrow new InsightError(\"invalid field\");\r\n\t\t}\r\n\r\n\t\tif (!(typeof nestedObj[mKey] === \"number\")) {\r\n\t\t\tthrow new InsightError(\"invalid input\");\r\n\t\t}\r\n\r\n\t\tdbRefSet.add(idStr);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tpublic validateListQuery(queryArray: any, dbRefSet: Set<string>): boolean {\r\n\t\t// check if value is a list\r\n\t\tlet validQueries: boolean[] = [];\r\n\t\tif (!Array.isArray(queryArray)) {\r\n\t\t\tthrow new InsightError(\"Invalid query string\");\r\n\t\t}\r\n\r\n\t\t// for each query in queryArrays\r\n\t\t// call validator\r\n\t\tfor (const q of queryArray) {\r\n\t\t\tvalidQueries.push(this.callValidator(q, dbRefSet));\r\n\t\t}\r\n\r\n\t\tif (validQueries.every((valid) => valid)) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tthrow new InsightError(\"Invalid query string\");\r\n\t}\r\n\r\n\tpublic validateIs(query: any, dbRefSet: Set<string>): boolean {\r\n\t\tconst sKey = Object.keys(query)[0];\r\n\t\tlet val = query[sKey];\r\n\r\n\t\tconst keyParts: string[] = sKey.split(\"_\");\r\n\r\n\t\t// get sKey components\r\n\t\tconst idStr = keyParts[0];\r\n\t\tconst sField = keyParts[1];\r\n\r\n\t\t// if length > 2 then underscore must be in idStr\r\n\t\tif (keyParts.length > 2) {\r\n\t\t\tthrow new InsightError(\"Invalid ID String\");\r\n\t\t}\r\n\r\n\t\t// check if sField is valid (sField is inside valid sField)\r\n\t\tif (!this.sFields.includes(sField)) {\r\n\t\t\tthrow new InsightError(\"invalid sField\");\r\n\t\t}\r\n\r\n\t\t// check if val is a string\r\n\t\t// need to check for wild cards too\r\n\t\tif (typeof val !== \"string\") {\r\n\t\t\tthrow new InsightError(\"Invalid query string\");\r\n\t\t} else {\r\n\t\t\t// check if it has wildcards\r\n\t\t\tlet inputString = val;\r\n\t\t\tif (inputString[0] === \"*\") {\r\n\t\t\t\tinputString = inputString.slice(1, inputString.length);\r\n\t\t\t}\r\n\r\n\t\t\tif (inputString[inputString.length - 1] === \"*\") {\r\n\t\t\t\tinputString = inputString.slice(0, inputString.length - 1);\r\n\t\t\t}\r\n\r\n\t\t\t// input string has * then invalid\r\n\t\t\tif (inputString.includes(\"*\")) {\r\n\t\t\t\tthrow new InsightError(\"invalid inputs tring\");\r\n\t\t\t}\r\n\t\t}\r\n\t\t// update dbRefSet with the dataset this is referencing (id string)\r\n\t\tdbRefSet.add(idStr);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tpublic validateOptions(options: any, dbRefSet: Set<string>): boolean {\r\n\t\t// Check for required components in OPTIONS\r\n\t\tif (!options.COLUMNS || !Array.isArray(options.COLUMNS)) {\r\n\t\t\tthrow new InsightError(\"Invalid COLUMNS\");\r\n\t\t}\r\n\r\n\t\t// Optionally, validate ORDER if present\r\n\t\tif (options.ORDER && !options.COLUMNS.includes(options.ORDER)) {\r\n\t\t\tthrow new InsightError(\"references in ORDER missing in WHERE\");\r\n\t\t}\r\n\r\n\t\t// check all fields in columns\r\n\t\tlet validFields = this.sFields.concat(this.mFields);\r\n\t\tfor (let key of options.COLUMNS) {\r\n\t\t\tconst keyParts: string[] = key.split(\"_\");\r\n\r\n\t\t\t// get key components\r\n\t\t\tconst idStr = keyParts[0];\r\n\t\t\tconst field = keyParts[1];\r\n\r\n\t\t\t// if length > 2 then underscore must be in idStr\r\n\t\t\tif (keyParts.length > 2) {\r\n\t\t\t\tthrow new InsightError(\"Invalid ID String\");\r\n\t\t\t}\r\n\r\n\t\t\t// check if field is a valid field\r\n\t\t\tif (!validFields.includes(field)) {\r\n\t\t\t\tthrow new InsightError(\"Invalid field\");\r\n\t\t\t}\r\n\r\n\t\t\tdbRefSet.add(idStr);\r\n\t\t}\r\n\r\n\t\t// check key in ORDER\r\n\t\tif (options.ORDER) {\r\n\t\t\tconst key = options.ORDER;\r\n\t\t\tconst keyParts: string[] = key.split(\"_\");\r\n\r\n\t\t\t// if length > 2 then underscore must be in idStr\r\n\t\t\tif (keyParts.length > 2) {\r\n\t\t\t\tthrow new InsightError(\"Invalid ID String\");\r\n\t\t\t}\r\n\r\n\t\t\t// get sKey components\r\n\t\t\tconst idStr = keyParts[0];\r\n\t\t\tconst field = keyParts[1];\r\n\r\n\t\t\t// check if field is a valid field\r\n\t\t\tif (!validFields.includes(field)) {\r\n\t\t\t\tthrow new InsightError(\"Invalid ID field\");\r\n\t\t\t}\r\n\r\n\t\t\tdbRefSet.add(idStr);\r\n\t\t}\r\n\t\tif (dbRefSet.size > 1) {\r\n\t\t\tthrow new InsightError(\"References to multiple Datasets\");\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"6ba1dcca6cc2eee854ee919379127c1ad4f2ead4","contentHash":"57aa2854178fe9d0f2c16aef1ac5a06819395828aa95b6ee7075c560b94e4ac1"},"C:\\Users\\David\\Desktop\\project_team175\\src\\controller\\filter.ts":{"path":"C:\\Users\\David\\Desktop\\project_team175\\src\\controller\\filter.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":5,"column":8},"end":{"line":7,"column":9}},"2":{"start":{"line":6,"column":12},"end":{"line":6,"column":27}},"3":{"start":{"line":8,"column":8},"end":{"line":8,"column":53}},"4":{"start":{"line":11,"column":20},"end":{"line":11,"column":41}},"5":{"start":{"line":12,"column":8},"end":{"line":27,"column":9}},"6":{"start":{"line":14,"column":16},"end":{"line":14,"column":71}},"7":{"start":{"line":16,"column":16},"end":{"line":16,"column":69}},"8":{"start":{"line":18,"column":16},"end":{"line":18,"column":59}},"9":{"start":{"line":20,"column":16},"end":{"line":20,"column":56}},"10":{"start":{"line":24,"column":16},"end":{"line":24,"column":61}},"11":{"start":{"line":26,"column":16},"end":{"line":26,"column":26}},"12":{"start":{"line":30,"column":8},"end":{"line":41,"column":9}},"13":{"start":{"line":31,"column":12},"end":{"line":33,"column":24}},"14":{"start":{"line":32,"column":16},"end":{"line":32,"column":97}},"15":{"start":{"line":32,"column":47},"end":{"line":32,"column":95}},"16":{"start":{"line":35,"column":13},"end":{"line":41,"column":9}},"17":{"start":{"line":36,"column":25},"end":{"line":36,"column":34}},"18":{"start":{"line":37,"column":12},"end":{"line":39,"column":15}},"19":{"start":{"line":38,"column":16},"end":{"line":38,"column":94}},"20":{"start":{"line":38,"column":73},"end":{"line":38,"column":92}},"21":{"start":{"line":40,"column":12},"end":{"line":40,"column":38}},"22":{"start":{"line":42,"column":8},"end":{"line":42,"column":18}},"23":{"start":{"line":45,"column":22},"end":{"line":45,"column":43}},"24":{"start":{"line":46,"column":22},"end":{"line":46,"column":34}},"25":{"start":{"line":47,"column":24},"end":{"line":47,"column":50}},"26":{"start":{"line":48,"column":22},"end":{"line":48,"column":53}},"27":{"start":{"line":49,"column":8},"end":{"line":52,"column":11}},"28":{"start":{"line":50,"column":33},"end":{"line":50,"column":47}},"29":{"start":{"line":51,"column":12},"end":{"line":51,"column":80}},"30":{"start":{"line":55,"column":25},"end":{"line":55,"column":46}},"31":{"start":{"line":56,"column":26},"end":{"line":56,"column":41}},"32":{"start":{"line":57,"column":22},"end":{"line":57,"column":47}},"33":{"start":{"line":58,"column":22},"end":{"line":58,"column":38}},"34":{"start":{"line":59,"column":8},"end":{"line":70,"column":11}},"35":{"start":{"line":60,"column":12},"end":{"line":69,"column":13}},"36":{"start":{"line":62,"column":20},"end":{"line":62,"column":50}},"37":{"start":{"line":64,"column":20},"end":{"line":64,"column":50}},"38":{"start":{"line":66,"column":20},"end":{"line":66,"column":52}},"39":{"start":{"line":68,"column":20},"end":{"line":68,"column":33}},"40":{"start":{"line":73,"column":22},"end":{"line":73,"column":47}},"41":{"start":{"line":74,"column":22},"end":{"line":74,"column":38}},"42":{"start":{"line":75,"column":8},"end":{"line":88,"column":11}},"43":{"start":{"line":76,"column":12},"end":{"line":87,"column":13}},"44":{"start":{"line":78,"column":20},"end":{"line":78,"column":50}},"45":{"start":{"line":80,"column":20},"end":{"line":80,"column":50}},"46":{"start":{"line":82,"column":20},"end":{"line":82,"column":52}},"47":{"start":{"line":84,"column":20},"end":{"line":84,"column":94}},"48":{"start":{"line":86,"column":20},"end":{"line":86,"column":32}},"49":{"start":{"line":91,"column":8},"end":{"line":91,"column":18}},"50":{"start":{"line":94,"column":0},"end":{"line":94,"column":25}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":4,"column":4},"end":{"line":4,"column":5}},"loc":{"start":{"line":4,"column":46},"end":{"line":9,"column":5}},"line":4},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":4},"end":{"line":10,"column":5}},"loc":{"start":{"line":10,"column":31},"end":{"line":28,"column":5}},"line":10},"2":{"name":"(anonymous_2)","decl":{"start":{"line":29,"column":4},"end":{"line":29,"column":5}},"loc":{"start":{"line":29,"column":51},"end":{"line":43,"column":5}},"line":29},"3":{"name":"(anonymous_3)","decl":{"start":{"line":31,"column":37},"end":{"line":31,"column":38}},"loc":{"start":{"line":31,"column":57},"end":{"line":33,"column":13}},"line":31},"4":{"name":"(anonymous_4)","decl":{"start":{"line":32,"column":34},"end":{"line":32,"column":35}},"loc":{"start":{"line":32,"column":47},"end":{"line":32,"column":95}},"line":32},"5":{"name":"(anonymous_5)","decl":{"start":{"line":37,"column":31},"end":{"line":37,"column":32}},"loc":{"start":{"line":37,"column":46},"end":{"line":39,"column":13}},"line":37},"6":{"name":"(anonymous_6)","decl":{"start":{"line":38,"column":60},"end":{"line":38,"column":61}},"loc":{"start":{"line":38,"column":73},"end":{"line":38,"column":92}},"line":38},"7":{"name":"(anonymous_7)","decl":{"start":{"line":44,"column":4},"end":{"line":44,"column":5}},"loc":{"start":{"line":44,"column":29},"end":{"line":53,"column":5}},"line":44},"8":{"name":"(anonymous_8)","decl":{"start":{"line":49,"column":30},"end":{"line":49,"column":31}},"loc":{"start":{"line":49,"column":43},"end":{"line":52,"column":9}},"line":49},"9":{"name":"(anonymous_9)","decl":{"start":{"line":54,"column":4},"end":{"line":54,"column":5}},"loc":{"start":{"line":54,"column":37},"end":{"line":71,"column":5}},"line":54},"10":{"name":"(anonymous_10)","decl":{"start":{"line":59,"column":30},"end":{"line":59,"column":31}},"loc":{"start":{"line":59,"column":43},"end":{"line":70,"column":9}},"line":59},"11":{"name":"(anonymous_11)","decl":{"start":{"line":72,"column":4},"end":{"line":72,"column":5}},"loc":{"start":{"line":72,"column":61},"end":{"line":89,"column":5}},"line":72},"12":{"name":"(anonymous_12)","decl":{"start":{"line":75,"column":30},"end":{"line":75,"column":31}},"loc":{"start":{"line":75,"column":43},"end":{"line":88,"column":9}},"line":75},"13":{"name":"(anonymous_13)","decl":{"start":{"line":90,"column":4},"end":{"line":90,"column":5}},"loc":{"start":{"line":90,"column":43},"end":{"line":92,"column":5}},"line":90}},"branchMap":{"0":{"loc":{"start":{"line":5,"column":8},"end":{"line":7,"column":9}},"type":"if","locations":[{"start":{"line":5,"column":8},"end":{"line":7,"column":9}},{"start":{"line":5,"column":8},"end":{"line":7,"column":9}}],"line":5},"1":{"loc":{"start":{"line":12,"column":8},"end":{"line":27,"column":9}},"type":"switch","locations":[{"start":{"line":13,"column":12},"end":{"line":14,"column":71}},{"start":{"line":15,"column":12},"end":{"line":16,"column":69}},{"start":{"line":17,"column":12},"end":{"line":18,"column":59}},{"start":{"line":19,"column":12},"end":{"line":20,"column":56}},{"start":{"line":21,"column":12},"end":{"line":21,"column":22}},{"start":{"line":22,"column":12},"end":{"line":22,"column":22}},{"start":{"line":23,"column":12},"end":{"line":24,"column":61}},{"start":{"line":25,"column":12},"end":{"line":26,"column":26}}],"line":12},"2":{"loc":{"start":{"line":30,"column":8},"end":{"line":41,"column":9}},"type":"if","locations":[{"start":{"line":30,"column":8},"end":{"line":41,"column":9}},{"start":{"line":30,"column":8},"end":{"line":41,"column":9}}],"line":30},"3":{"loc":{"start":{"line":35,"column":13},"end":{"line":41,"column":9}},"type":"if","locations":[{"start":{"line":35,"column":13},"end":{"line":41,"column":9}},{"start":{"line":35,"column":13},"end":{"line":41,"column":9}}],"line":35},"4":{"loc":{"start":{"line":51,"column":19},"end":{"line":51,"column":79}},"type":"binary-expr","locations":[{"start":{"line":51,"column":19},"end":{"line":51,"column":51}},{"start":{"line":51,"column":55},"end":{"line":51,"column":79}}],"line":51},"5":{"loc":{"start":{"line":60,"column":12},"end":{"line":69,"column":13}},"type":"switch","locations":[{"start":{"line":61,"column":16},"end":{"line":62,"column":50}},{"start":{"line":63,"column":16},"end":{"line":64,"column":50}},{"start":{"line":65,"column":16},"end":{"line":66,"column":52}},{"start":{"line":67,"column":16},"end":{"line":68,"column":33}}],"line":60},"6":{"loc":{"start":{"line":76,"column":12},"end":{"line":87,"column":13}},"type":"switch","locations":[{"start":{"line":77,"column":16},"end":{"line":78,"column":50}},{"start":{"line":79,"column":16},"end":{"line":80,"column":50}},{"start":{"line":81,"column":16},"end":{"line":82,"column":52}},{"start":{"line":83,"column":16},"end":{"line":84,"column":94}},{"start":{"line":85,"column":16},"end":{"line":86,"column":32}}],"line":76}},"s":{"0":1,"1":10,"2":0,"3":10,"4":11,"5":11,"6":0,"7":0,"8":1,"9":5,"10":5,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":5,"24":5,"25":5,"26":5,"27":5,"28":323060,"29":323060,"30":5,"31":5,"32":5,"33":5,"34":5,"35":323060,"36":64612,"37":0,"38":258448,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":1},"f":{"0":10,"1":11,"2":0,"3":0,"4":0,"5":0,"6":0,"7":5,"8":323060,"9":5,"10":323060,"11":0,"12":0,"13":0},"b":{"0":[0,10],"1":[0,0,1,5,0,1,5,0],"2":[0,0],"3":[0,0],"4":[323060,0],"5":[64612,0,258448,0],"6":[0,0,0,0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/David/Desktop/project_team175/src/controller/filter.ts","sources":["C:/Users/David/Desktop/project_team175/src/controller/filter.ts"],"names":[],"mappings":"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","sourcesContent":["import Section from \"./section\";\r\nimport {InsightResult} from \"./IInsightFacade\";\r\n\r\nexport default class Filter {\r\n\tpublic filterByWhereClause(dataset: Section[], whereClause: any): Section[] {\r\n\t\t// Explicit typing for operator and conditions helps with code clarity and type checking\r\n\t\t// MADE ESLINT SUPRESSIONS\r\n\t\tif (Object.keys(whereClause).length === 0) {\r\n\t\t\treturn dataset;\r\n\t\t}\r\n\t\t// const keyWord: string = Object.keys(whereClause)[0];\r\n\t\t// const nestedQuery: any = whereClause[keyWord]; // Consider defining a type for conditions\r\n\t\t// let results: Section[] = [];\r\n\t\t// const notResults: Section[] = [];\r\n\t\treturn this.callFilter(whereClause, dataset);\r\n\t\t// switch (keyWord) {\r\n\t\t// \tcase \"AND\":\r\n\t\t// \t\t// Here, TypeScript knows conditions must be an array, so we can avoid explicit 'any' typing\r\n\t\t// \t\treturn nestedQuery.reduce(\r\n\t\t// \t\t\t(result: Section[], condition: any) => this.filterByWhereClause(result, condition),\r\n\t\t// \t\t\tdataset\r\n\t\t// \t\t);\r\n\t\t// \tcase \"OR\":\r\n\t\t// \t\tnestedQuery.forEach((condition: any) => {\r\n\t\t// \t\t\tconst conditionResults: Section[] = this.filterByWhereClause(dataset, condition);\r\n\t\t// \t\t\tresults = [...results, ...conditionResults.filter((item) => !results.includes(item))];\r\n\t\t// \t\t});\r\n\t\t// \t\treturn results;\r\n\t\t// \tcase \"NOT\":\r\n\t\t// \t\treturn dataset.filter((item) => !notResults.includes(item));\r\n\t\t// \tdefault:\r\n\t\t// \t\treturn this.handleComparisonOperations(dataset, keyWord, nestedQuery);\r\n\t\t// }\r\n\t}\r\n\r\n\tprivate callFilter(query: any, dataset: Section[]): Section[] {\r\n\t\tconst key = Object.keys(query)[0];\r\n\t\tswitch (key) {\r\n\t\t\t// these 2 take lists of filters\r\n\t\t\tcase \"AND\":\r\n\t\t\t\treturn this.handleListQuery(query.AND, dataset, \"AND\");\r\n\t\t\tcase \"OR\":\r\n\t\t\t\treturn this.handleListQuery(query.OR, dataset, \"OR\");\r\n\r\n\t\t\t// this can have nested filters\r\n\t\t\tcase \"NOT\":\r\n\t\t\t\treturn this.callFilter(query.NOT, dataset);\r\n\r\n\t\t\t// these ones can't have nested filters (base case)\r\n\t\t\tcase \"IS\":\r\n\t\t\t\treturn this.handleIs(query.IS, dataset);\r\n\t\t\tcase \"LT\":\r\n\t\t\tcase \"GT\":\r\n\t\t\tcase \"EQ\":\r\n\t\t\t\treturn this.handleInequality(query, dataset);\r\n\t\t\tdefault:\r\n\t\t\t\t// can't have string just on it's own in a where\r\n\t\t\t\t// must be nested inside one of the above filters\r\n\t\t\t\treturn [];\r\n\t\t}\r\n\t}\r\n\r\n\tprivate handleListQuery(conditions: any[], dataset: Section[], operator: string): Section[] {\r\n\t\tif (operator === \"AND\") {\r\n\t\t\t// For AND, every condition must be true for a section to be included\r\n\t\t\treturn conditions.reduce((acc: Section[], condition) => {\r\n\t\t\t\t// Ensure that acc is filtered by each condition\r\n\t\t\t\treturn acc.filter((section) => this.callFilter(condition, [section]).length > 0);\r\n\t\t\t}, dataset); // dataset is the initial value, ensuring acc starts as an array\r\n\t\t} else if (operator === \"OR\") {\r\n\t\t\t// For OR, a section must meet at least one condition to be included\r\n\t\t\tlet result = new Set<Section>(); // Use a Set to avoid duplicates\r\n\t\t\tconditions.forEach((condition) => {\r\n\t\t\t\tthis.callFilter(condition, dataset).forEach((section) => result.add(section));\r\n\t\t\t});\r\n\t\t\treturn Array.from(result); // Convert the Set back to an array\r\n\t\t}\r\n\t\treturn []; // If operator is neither AND nor OR, return an empty array\r\n\t}\r\n\r\n\tprivate handleIs(query: any, dataset: Section[]): Section[] {\r\n\t\tconst field = Object.keys(query)[0] as keyof Section; // Safely access the property key\r\n\t\tconst value: string = query[field] as string; // Ensure the value is treated as a string\r\n\r\n\t\t// Convert wildcard pattern to regex for comparison\r\n\t\tconst pattern = value.replace(/\\*/g, \".*\"); // Convert wildcard (*) to regex equivalent (.*)\r\n\t\tconst regex = new RegExp(`^${pattern}$`, \"i\"); // 'i' for case-insensitive match\r\n\r\n\t\treturn dataset.filter((section) => {\r\n\t\t\tconst sectionValue = section[field];\r\n\t\t\t// Ensure the value being compared is a string\r\n\t\t\treturn typeof sectionValue === \"string\" && regex.test(sectionValue);\r\n\t\t});\r\n\t}\r\n\r\n\tprivate handleInequality(query: any, dataset: Section[]): Section[] {\r\n\t\tconst operator = Object.keys(query)[0];\r\n\t\tconst condition = query[operator];\r\n\t\tconst field = Object.keys(condition)[0];\r\n\t\tconst value = condition[field];\r\n\t\treturn dataset.filter((section: any) => {\r\n\t\t\tswitch (operator) {\r\n\t\t\t\tcase \"GT\":\r\n\t\t\t\t\treturn section[field] > value;\r\n\t\t\t\tcase \"LT\":\r\n\t\t\t\t\treturn section[field] < value;\r\n\t\t\t\tcase \"EQ\":\r\n\t\t\t\t\treturn section[field] === value;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tprivate handleComparisonOperations(dataset: any[], operator: string, condition: any): any[] {\r\n\t\tconst field = Object.keys(condition)[0];\r\n\t\tconst value = condition[field];\r\n\r\n\t\treturn dataset.filter((section) => {\r\n\t\t\tswitch (operator) {\r\n\t\t\t\tcase \"GT\":\r\n\t\t\t\t\treturn section[field] > value;\r\n\t\t\t\tcase \"LT\":\r\n\t\t\t\t\treturn section[field] < value;\r\n\t\t\t\tcase \"EQ\":\r\n\t\t\t\t\treturn section[field] === value;\r\n\t\t\t\tcase \"IS\":\r\n\t\t\t\t\treturn new RegExp(`^${value.replace(/\\*/g, \".*\")}$`).test(section[field]);\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn true; // Or handle invalid operator\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tprivate applyOptions(filteredResults: any[], options: any): InsightResult[] {\r\n\t\t// Project specified columns\r\n\t\t// const projectedResults = filteredResults.map((item) => {\r\n\t\t// \tconst projectedItem = {};\r\n\t\t// \toptions.COLUMNS.forEach((column) => {\r\n\t\t// \t\tprojectedItem[column] = item[column];\r\n\t\t// \t});\r\n\t\t// \treturn projectedItem;\r\n\t\t// });\r\n\t\t// // Sort results if ORDER is specified\r\n\t\t// if (options.ORDER) {\r\n\t\t// \tconst orderKey = options.ORDER;\r\n\t\t// \tprojectedResults.sort((a, b) => a[orderKey] - b[orderKey]);\r\n\t\t// }\r\n\t\treturn [];\r\n\t}\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"64451d05f074657f60c4be200d92909405122e28","contentHash":"ec0281b2efb93108fab89990236012b6b6a0baaee438f3b2df53d69044d47b55"}}